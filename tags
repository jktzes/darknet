!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	src/activations.h	/^}ACTIVATION;$/;"	t	typeref:enum:__anon38
ACTIVATIONS_H	src/activations.h	2;"	d
ACTIVATION_LAYER_H	src/activation_layer.h	2;"	d
ACTIVE	src/layer.h	/^    ACTIVE,$/;"	e	enum:__anon35
ADDRPOINTER	src/http_stream.cpp	16;"	d	file:
ADDRPOINTER	src/http_stream.cpp	35;"	d	file:
AI2	src/convolutional_layer.c	20;"	d	file:
APPNAMESO	Makefile	/^APPNAMESO=uselib$/;"	m
ARCH	Makefile	/^ARCH= -gencode arch=compute_30,code=sm_30 \\$/;"	m
AVGPOOL	src/layer.h	/^    AVGPOOL,$/;"	e	enum:__anon35
AVGPOOL_LAYER_H	src/avgpool_layer.h	2;"	d
AVX	Makefile	/^AVX=0$/;"	m
AVXFlag	src/gemm.c	77;"	d	file:
Action	crow.h	/^            Action(ActionType t, int start, int end, int pos = 0) $/;"	f	struct:crow::mustache::Action
Action	crow.h	/^        struct Action$/;"	s	namespace:crow::mustache
ActionType	crow.h	/^        enum class ActionType$/;"	c	namespace:crow::mustache
B1	src/layer.h	/^	float B1;$/;"	m	struct:__anon37
B1	src/layer.h	/^    float B1;$/;"	m	struct:layer
B1	src/network.h	/^    float B1;$/;"	m	struct:network
B2	src/layer.h	/^	float B2;$/;"	m	struct:__anon37
B2	src/layer.h	/^    float B2;$/;"	m	struct:layer
B2	src/network.h	/^    float B2;$/;"	m	struct:network
BASE_LAYER_H	src/layer.h	2;"	d
BATCHNORM	src/layer.h	/^    BATCHNORM,$/;"	e	enum:__anon35
BATCHNORM_LAYER_H	src/batchnorm_layer.h	2;"	d
BLANK	src/layer.h	/^    BLANK$/;"	e	enum:__anon35
BLAS_H	src/blas.h	2;"	d
BLOCK	src/cuda.h	26;"	d
BOX	build/darknet/x64/darknet.py	/^class BOX(Structure):$/;"	c
BOX	darknet.py	/^class BOX(Structure):$/;"	c
BOX_H	src/box.h	2;"	d
BaseRule	crow.h	/^        BaseRule(std::string rule)$/;"	f	class:crow::BaseRule
BaseRule	crow.h	/^    class BaseRule$/;"	c	namespace:crow
BattleRoyaleWithCheese	src/compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
BboxContainer	build/darknet/YoloWrapper.cs	/^        public struct BboxContainer$/;"	s	class:Darknet.YoloWrapper
CAPTCHA_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas$/;"	m
CLASSIFICATION_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
CLASS_LIST	scripts/get_openimages_dataset.py	/^CLASS_LIST = ('\/m\/01g317','\/m\/04yx4')$/;"	v
CLMULFlag	src/gemm.c	79;"	d	file:
COL2IM_H	src/col2im.h	2;"	d
COMMON	Makefile	/^COMMON= $/;"	m
COMPARE_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
CONNECT	crow.h	/^        CONNECT,$/;"	m	class:crow::HTTPMethod
CONNECTED	src/layer.h	/^    CONNECTED,$/;"	e	enum:__anon35
CONNECTED_LAYER_H	src/connected_layer.h	2;"	d
CONSTANT	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
CONVOLUTIONAL	src/layer.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon35
CONVOLUTIONAL_LAYER_H	src/convolutional_layer.h	2;"	d
COST	src/layer.h	/^    COST,$/;"	e	enum:__anon35
COST_LAYER_H	src/cost_layer.h	2;"	d
COST_TYPE	src/layer.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon36
CPP	Makefile	/^CPP=g++$/;"	m
CRITICAL	crow.h	/^        CRITICAL,$/;"	m	class:crow::LogLevel
CRNN	src/layer.h	/^    CRNN,$/;"	e	enum:__anon35
CRNN_LAYER_H	src/crnn_layer.h	3;"	d
CROP	src/layer.h	/^    CROP,$/;"	e	enum:__anon35
CROP_LAYER_H	src/crop_layer.h	2;"	d
CROW_ARRAY_SIZE	crow.h	775;"	d
CROW_BIT_AT	crow.h	779;"	d
CROW_CALLBACK_DATA	crow.h	3019;"	d
CROW_CALLBACK_DATA	crow.h	838;"	d
CROW_CALLBACK_DATA_	crow.h	3018;"	d
CROW_CALLBACK_DATA_	crow.h	818;"	d
CROW_CALLBACK_DATA_NOADVANCE	crow.h	3020;"	d
CROW_CALLBACK_DATA_NOADVANCE	crow.h	842;"	d
CROW_CALLBACK_NOTIFY	crow.h	3016;"	d
CROW_CALLBACK_NOTIFY	crow.h	812;"	d
CROW_CALLBACK_NOTIFY_	crow.h	3015;"	d
CROW_CALLBACK_NOTIFY_	crow.h	795;"	d
CROW_CALLBACK_NOTIFY_NOADVANCE	crow.h	3017;"	d
CROW_CALLBACK_NOTIFY_NOADVANCE	crow.h	815;"	d
CROW_CAN_USE_CPP14	crow.h	3318;"	d
CROW_CHUNKED	crow.h	3027;"	d
CROW_CHUNKED	crow.h	859;"	d
CROW_CLOSE	crow.h	3029;"	d
CROW_CLOSE	crow.h	861;"	d
CROW_CONNECTION	crow.h	3023;"	d
CROW_CONNECTION	crow.h	855;"	d
CROW_CONTENT_LENGTH	crow.h	3024;"	d
CROW_CONTENT_LENGTH	crow.h	856;"	d
CROW_CR	crow.h	3031;"	d
CROW_CR	crow.h	991;"	d
CROW_ELEM_AT	crow.h	785;"	d
CROW_ENABLE_LOGGING	crow.h	3298;"	d
CROW_HTTP_ERRNO_GEN	crow.h	603;"	d
CROW_HTTP_ERRNO_GEN	crow.h	607;"	d
CROW_HTTP_ERRNO_MAP	crow.h	/^  CROW_HTTP_ERRNO_MAP(CROW_HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
CROW_HTTP_ERRNO_MAP	crow.h	3013;"	d
CROW_HTTP_ERRNO_MAP	crow.h	560;"	d
CROW_HTTP_MAX_HEADER_SIZE	crow.h	474;"	d
CROW_HTTP_METHOD_MAP	crow.h	/^  CROW_HTTP_METHOD_MAP(CROW_XX)$/;"	e	enum:http_method
CROW_HTTP_METHOD_MAP	crow.h	3012;"	d
CROW_HTTP_METHOD_MAP	crow.h	499;"	d
CROW_HTTP_PARSER_ERRNO	crow.h	611;"	d
CROW_HTTP_PARSER_STRICT	crow.h	463;"	d
CROW_HTTP_PARSER_VERSION_MAJOR	crow.h	439;"	d
CROW_HTTP_PARSER_VERSION_MINOR	crow.h	440;"	d
CROW_HTTP_PARSER_VERSION_PATCH	crow.h	441;"	d
CROW_HTTP_STRERROR_GEN	crow.h	2722;"	d
CROW_HTTP_STRERROR_GEN	crow.h	2729;"	d
CROW_HTTP_STRERROR_GEN	crow.h	2737;"	d
CROW_HTTP_STRERROR_GEN	crow.h	2744;"	d
CROW_INTERNAL_PARAMETER_TAG	crow.h	5860;"	d
CROW_INTERNAL_PARAMETER_TAG	crow.h	5878;"	d
CROW_INTERNAL_PROMOTE_TYPE	crow.h	6130;"	d
CROW_INTERNAL_PROMOTE_TYPE	crow.h	6148;"	d
CROW_IS_ALPHA	crow.h	3034;"	d
CROW_IS_ALPHA	crow.h	994;"	d
CROW_IS_ALPHANUM	crow.h	3036;"	d
CROW_IS_ALPHANUM	crow.h	996;"	d
CROW_IS_HEX	crow.h	3037;"	d
CROW_IS_HEX	crow.h	997;"	d
CROW_IS_HOST_CHAR	crow.h	1008;"	d
CROW_IS_HOST_CHAR	crow.h	1013;"	d
CROW_IS_HOST_CHAR	crow.h	3042;"	d
CROW_IS_MARK	crow.h	3038;"	d
CROW_IS_MARK	crow.h	998;"	d
CROW_IS_NUM	crow.h	3035;"	d
CROW_IS_NUM	crow.h	995;"	d
CROW_IS_URL_CHAR	crow.h	1007;"	d
CROW_IS_URL_CHAR	crow.h	1011;"	d
CROW_IS_URL_CHAR	crow.h	3041;"	d
CROW_IS_USERINFO_CHAR	crow.h	1001;"	d
CROW_IS_USERINFO_CHAR	crow.h	3039;"	d
CROW_KEEP_ALIVE	crow.h	3028;"	d
CROW_KEEP_ALIVE	crow.h	860;"	d
CROW_LF	crow.h	3032;"	d
CROW_LF	crow.h	992;"	d
CROW_LOG_CRITICAL	crow.h	5626;"	d
CROW_LOG_DEBUG	crow.h	5638;"	d
CROW_LOG_ERROR	crow.h	5629;"	d
CROW_LOG_INFO	crow.h	5635;"	d
CROW_LOG_LEVEL	crow.h	3313;"	d
CROW_LOG_WARNING	crow.h	5632;"	d
CROW_LOWER	crow.h	3033;"	d
CROW_LOWER	crow.h	993;"	d
CROW_MARK	crow.h	3021;"	d
CROW_MARK	crow.h	846;"	d
CROW_MIN	crow.h	771;"	d
CROW_MSVC_WORKAROUND	crow.h	3323;"	d
CROW_NEW_MESSAGE	crow.h	1029;"	d
CROW_NEW_MESSAGE	crow.h	1032;"	d
CROW_NEW_MESSAGE	crow.h	3045;"	d
CROW_PARSING_HEADER	crow.h	3030;"	d
CROW_PARSING_HEADER	crow.h	947;"	d
CROW_PROXY_CONNECTION	crow.h	3022;"	d
CROW_PROXY_CONNECTION	crow.h	854;"	d
CROW_QS_HEX2DEC	crow.h	48;"	d
CROW_QS_ISHEX	crow.h	47;"	d
CROW_QS_ISQSCHR	crow.h	49;"	d
CROW_ROUTE	crow.h	9511;"	d
CROW_SET_ERRNO	crow.h	3014;"	d
CROW_SET_ERRNO	crow.h	788;"	d
CROW_STRICT_CHECK	crow.h	1022;"	d
CROW_STRICT_CHECK	crow.h	1031;"	d
CROW_STRICT_CHECK	crow.h	3044;"	d
CROW_T	crow.h	1054;"	d
CROW_T	crow.h	1094;"	d
CROW_TOKEN	crow.h	1006;"	d
CROW_TOKEN	crow.h	1010;"	d
CROW_TOKEN	crow.h	3040;"	d
CROW_TRANSFER_ENCODING	crow.h	3025;"	d
CROW_TRANSFER_ENCODING	crow.h	857;"	d
CROW_ULLONG_MAX	crow.h	767;"	d
CROW_UPGRADE	crow.h	3026;"	d
CROW_UPGRADE	crow.h	858;"	d
CROW_XX	crow.h	1248;"	d
CROW_XX	crow.h	1250;"	d
CROW_XX	crow.h	2700;"	d
CROW_XX	crow.h	2702;"	d
CROW_XX	crow.h	536;"	d
CROW_XX	crow.h	538;"	d
CROW_http_parser_h	crow.h	433;"	d
CROW_start_state	crow.h	1018;"	d
CROW_start_state	crow.h	3043;"	d
CUDA_H	src/cuda.h	2;"	d
CUDNN	Makefile	/^CUDNN=1$/;"	m
CUDNN_HALF	Makefile	/^CUDNN_HALF=0$/;"	m
C_SHARP_MAX_OBJECTS	src/yolo_v2_class.hpp	31;"	d
CallHelper	crow.h	/^        struct CallHelper<F, S<Args...>>$/;"	s	namespace:crow::black_magic
CerrLogHandler	crow.h	/^    class CerrLogHandler : public ILogHandler {$/;"	c	namespace:crow
CloseBlock	crow.h	/^            CloseBlock,$/;"	m	class:crow::mustache::ActionType
Connect	crow.h	/^        Connect,$/;"	m	class:crow::HTTPMethod
Connection	crow.h	/^				Connection(const crow::request& req, Adaptor&& adaptor, $/;"	f	class:crow::websocket::Connection
Connection	crow.h	/^        Connection($/;"	f	class:crow::Connection
Connection	crow.h	/^        class Connection : public connection$/;"	c	namespace:crow::websocket
Connection	crow.h	/^    class Connection$/;"	c	namespace:crow
CookieParser	crow.h	/^    struct CookieParser$/;"	s	namespace:crow
Critical	crow.h	/^        Critical,$/;"	m	class:crow::LogLevel
Crow	crow.h	/^        Crow()$/;"	f	class:crow::Crow
Crow	crow.h	/^    class Crow$/;"	c	namespace:crow
DATA_H	src/data.h	2;"	d
DEBUG	Makefile	/^DEBUG=0$/;"	m
DEBUG	crow.h	/^        DEBUG = 0,$/;"	m	class:crow::LogLevel
DECONVOLUTIONAL	src/layer.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon35
DECONVOLUTIONAL_LAYER_H	src/deconvolutional_layer.h	2;"	d
DELETE	crow.h	/^        DELETE = 0,$/;"	m	class:crow::HTTPMethod
DELTA_EPOCH_IN_MICROSECS	src/gettimeofday.h	6;"	d
DELTA_EPOCH_IN_MICROSECS	src/gettimeofday.h	8;"	d
DEMO	src/demo.h	2;"	d
DEPS	Makefile	/^DEPS = $(wildcard src\/*.h) Makefile$/;"	m
DETECTION	build/darknet/x64/darknet.py	/^class DETECTION(Structure):$/;"	c
DETECTION	darknet.py	/^class DETECTION(Structure):$/;"	c
DETECTION	src/layer.h	/^    DETECTION,$/;"	e	enum:__anon35
DETECTION_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
DETECTION_LAYER_H	src/detection_layer.h	2;"	d
DET_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
DOABS	src/region_layer.c	12;"	d	file:
DOUBLE	crow.h	/^        DOUBLE,$/;"	m	class:crow::ParamType
DROPOUT	src/layer.h	/^    DROPOUT,$/;"	e	enum:__anon35
DROPOUT_LAYER_H	src/dropout_layer.h	2;"	d
DWORD	3rdparty/include/pthread.h	1360;"	d
DWORD	3rdparty/include/pthread.h	312;"	d
DWORD_PTR	3rdparty/include/pthread.h	/^typedef unsigned long DWORD_PTR;$/;"	t
Darknet	build/darknet/YoloWrapper.cs	/^namespace Darknet$/;"	n
Debug	crow.h	/^        Debug = 0,$/;"	m	class:crow::LogLevel
Delete	crow.h	/^        Delete = 0,$/;"	m	class:crow::HTTPMethod
Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(byte[] imageData)$/;"	m	class:Darknet.YoloWrapper
Detect	build/darknet/YoloWrapper.cs	/^        public bbox_t[] Detect(string filename)$/;"	m	class:Darknet.YoloWrapper
DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(IntPtr pArray, int nSize, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
DetectImage	build/darknet/YoloWrapper.cs	/^        private static extern int DetectImage(string filename, ref BboxContainer container);$/;"	m	class:Darknet.YoloWrapper	file:
Detector	src/yolo_v2_class.cpp	/^YOLODLL_API Detector::Detector(std::string cfg_filename, std::string weight_filename, int gpu_id) : cur_gpu_id(gpu_id)$/;"	f	class:Detector
Detector	src/yolo_v2_class.hpp	/^class Detector {$/;"	c
Dispose	build/darknet/YoloWrapper.cs	/^        public void Dispose()$/;"	m	class:Darknet.YoloWrapper
DisposeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int DisposeYolo();$/;"	m	class:Darknet.YoloWrapper	file:
DynamicRule	crow.h	/^        DynamicRule(std::string rule)$/;"	f	class:crow::DynamicRule
DynamicRule	crow.h	/^    class DynamicRule : public BaseRule, public RuleParameterTraits<DynamicRule>$/;"	c	namespace:crow
EDEADLK	3rdparty/include/pthread.h	285;"	d
EDEADLK	3rdparty/include/pthread.h	287;"	d
ELIDE_CODE	src/getopt.c	56;"	d	file:
ELU	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
ENOSYS	3rdparty/include/pthread.h	280;"	d
ENOTRECOVERABLE	3rdparty/include/pthread.h	296;"	d
ENOTSUP	3rdparty/include/pthread.h	272;"	d
EOWNERDEAD	3rdparty/include/pthread.h	293;"	d
ERROR	crow.h	/^        ERROR,$/;"	m	class:crow::LogLevel
ETIMEDOUT	3rdparty/include/pthread.h	276;"	d
EXEC	Makefile	/^EXEC=darknet$/;"	m
EXP	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
ElseBlock	crow.h	/^            ElseBlock,$/;"	m	class:crow::mustache::ActionType
Error	crow.h	/^        Error,$/;"	m	class:crow::LogLevel
FAST_BITS	src/stb_image.h	1639;"	d
FMAFlag	src/gemm.c	78;"	d	file:
FRAMES	src/demo.c	18;"	d	file:
FRAMES	src/yolo_v2_class.cpp	23;"	d	file:
F_CHUNKED	crow.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	crow.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	crow.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_OK	src/unistd.h	23;"	d
F_SKIPBODY	crow.h	/^  , F_SKIPBODY              = 1 << 5$/;"	e	enum:flags
F_TRAILING	crow.h	/^  , F_TRAILING              = 1 << 3$/;"	e	enum:flags
F_UPGRADE	crow.h	/^  , F_UPGRADE               = 1 << 4$/;"	e	enum:flags
False	crow.h	/^            False,$/;"	m	class:crow::json::type
GEMM_H	src/gemm.h	2;"	d
GET	crow.h	/^        GET,$/;"	m	class:crow::HTTPMethod
GETOPT_INTERFACE_VERSION	src/getopt.c	52;"	d	file:
GPU	Makefile	/^GPU=1$/;"	m
GPU	src/yolo_console_dll.cpp	14;"	d	file:
GRU	src/layer.h	/^    GRU,$/;"	e	enum:__anon35
GRU_LAYER_H	src/gru_layer.h	3;"	d
Get	crow.h	/^        Get,$/;"	m	class:crow::HTTPMethod
HANDLE	3rdparty/include/pthread.h	1357;"	d
HANDLE	3rdparty/include/pthread.h	308;"	d
HARDTAN	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
HAVE_MODE_T	3rdparty/include/pthread.h	250;"	d
HAVE_MODE_T	3rdparty/include/pthread.h	252;"	d
HAVE_MODE_T	3rdparty/include/sched.h	101;"	d
HAVE_MODE_T	3rdparty/include/sched.h	103;"	d
HAVE_MODE_T	3rdparty/include/semaphore.h	100;"	d
HAVE_MODE_T	3rdparty/include/semaphore.h	102;"	d
HAVE_PTW32_CONFIG_H	3rdparty/include/pthread.h	115;"	d
HAVE_SIGNAL_H	3rdparty/include/pthread.h	114;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/include/pthread.h	113;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/include/pthread.h	249;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/include/pthread.h	317;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/include/sched.h	100;"	d
HAVE_STRUCT_TIMESPEC	3rdparty/include/semaphore.h	99;"	d
HEAD	crow.h	/^        HEAD,$/;"	m	class:crow::HTTPMethod
HOSTENT	src/http_stream.cpp	32;"	d	file:
HTTPMethod	crow.h	/^    enum class HTTPMethod$/;"	c	namespace:crow
HTTPParser	crow.h	/^        HTTPParser(Handler* handler) :$/;"	f	struct:crow::HTTPParser
HTTPParser	crow.h	/^    struct HTTPParser : public http_parser$/;"	s	namespace:crow
HTTP_BOTH	crow.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_REQUEST	crow.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	crow.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STREAM_H	src/http_stream.h	3;"	d
Head	crow.h	/^        Head,$/;"	m	class:crow::HTTPMethod
ILogHandler	crow.h	/^    class ILogHandler {$/;"	c	namespace:crow
IM2COL_H	src/im2col.h	2;"	d
IMAGE	build/darknet/x64/darknet.py	/^class IMAGE(Structure):$/;"	c
IMAGE	darknet.py	/^class IMAGE(Structure):$/;"	c
IMAGE_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
IMAGE_H	src/image.h	2;"	d
INCLUDE_STB_IMAGE_WRITE_H	src/stb_image_write.h	125;"	d
INFO	crow.h	/^        INFO,$/;"	m	class:crow::LogLevel
INT	crow.h	/^        INT,$/;"	m	class:crow::ParamType
INVALID_SOCKET	src/http_stream.cpp	36;"	d	file:
IOU	build/darknet/x64/gen_anchors.py	/^def IOU(x,centroids):$/;"	f
IOU	scripts/gen_anchors.py	/^def IOU(x,centroids):$/;"	f
Ignore	crow.h	/^            Ignore,$/;"	m	class:crow::mustache::ActionType
Info	crow.h	/^        Info,$/;"	m	class:crow::LogLevel
InitializeYolo	build/darknet/YoloWrapper.cs	/^        private static extern int InitializeYolo(string configurationFilename, string weightsFilename, int gpu);$/;"	m	class:Darknet.YoloWrapper	file:
IsSimpleNode	crow.h	/^            bool IsSimpleNode() const$/;"	f	struct:crow::Trie::Node
LAYER_TYPE	src/layer.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon35
LDFLAGS	Makefile	/^LDFLAGS= -lm -pthread $/;"	m
LEAKY	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
LETTERBOX_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
LHTAN	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
LIBNAMESO	Makefile	/^LIBNAMESO=darknet.so$/;"	m
LIBSO	Makefile	/^LIBSO=1$/;"	m
LINEAR	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
LIST_H	src/list.h	2;"	d
LOCAL	src/layer.h	/^    LOCAL,$/;"	e	enum:__anon35
LOCAL_LAYER_H	src/local_layer.h	2;"	d
LOGGY	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
LOGISTIC	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
LeftRotate	crow.h	/^		inline static uint32_t LeftRotate(uint32_t value, size_t count) {$/;"	f	class:sha1::SHA1
Len16	crow.h	/^            Len16,$/;"	m	class:crow::websocket::WebSocketReadState
Len64	crow.h	/^            Len64,$/;"	m	class:crow::websocket::WebSocketReadState
List	crow.h	/^            List,$/;"	m	class:crow::json::type
LogLevel	crow.h	/^    enum class LogLevel$/;"	c	namespace:crow
MASKED	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon36
MATRIX_H	src/matrix.h	2;"	d
MAXPOOL	src/layer.h	/^    MAXPOOL,$/;"	e	enum:__anon35
MAXPOOL_LAYER_H	src/maxpool_layer.h	2;"	d
MAX_KEY_VALUE_PAIRS_COUNT	crow.h	/^        static const int MAX_KEY_VALUE_PAIRS_COUNT = 256;$/;"	m	class:crow::query_string
METADATA	build/darknet/x64/darknet.py	/^class METADATA(Structure):$/;"	c
METADATA	darknet.py	/^class METADATA(Structure):$/;"	c
MJPGWriter	src/http_stream.cpp	/^    MJPGWriter(int port = 0, int _timeout = 200000, int _quality = 30)$/;"	f	class:MJPGWriter
MJPGWriter	src/http_stream.cpp	/^class MJPGWriter$/;"	c	file:
Mask	crow.h	/^            Mask,$/;"	m	class:crow::websocket::WebSocketReadState
MaxObjects	build/darknet/YoloWrapper.cs	/^        private const int MaxObjects = 1000;$/;"	f	class:Darknet.YoloWrapper	file:
MiniHeader	crow.h	/^            MiniHeader,$/;"	m	class:crow::websocket::WebSocketReadState
NEED_ERRNO	3rdparty/include/pthread.h	245;"	d
NEED_ERRNO	3rdparty/include/sched.h	96;"	d
NEED_ERRNO	3rdparty/include/semaphore.h	95;"	d
NEED_SEM	3rdparty/include/pthread.h	246;"	d
NEED_SEM	3rdparty/include/sched.h	97;"	d
NEED_SEM	3rdparty/include/semaphore.h	96;"	d
NETWORK	src/layer.h	/^    NETWORK,$/;"	e	enum:__anon35
NETWORK_H	src/network.h	3;"	d
NONOPTION_P	src/getopt.c	539;"	d	file:
NORMALIZATION	src/layer.h	/^    NORMALIZATION,$/;"	e	enum:__anon35
NORMALIZATION_LAYER_H	src/normalization_layer.h	2;"	d
NUMCHARS	src/data.c	383;"	d	file:
NVCC	Makefile	/^NVCC=nvcc $/;"	m
Node	crow.h	/^        struct Node$/;"	s	class:crow::Trie
Null	crow.h	/^            Null,$/;"	m	class:crow::json::type
Number	crow.h	/^            Number,$/;"	m	class:crow::json::type
OBJ	Makefile	/^OBJ=http_stream.o gemm.o utils.o cuda.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o darknet.o detection_layer.o captcha.o route_layer.o writing.o box.o nightmare.o normalization_layer.o avgpool_layer.o coco.o dice.o yolo.o detector.o layer.o compare.o classifier.o local_layer.o swag.o shortcut_layer.o activation_layer.o rnn_layer.o gru_layer.o rnn.o rnn_vid.o crnn_layer.o demo.o tag.o cifar.o go.o batchnorm_layer.o art.o region_layer.o reorg_layer.o reorg_old_layer.o super.o voxel.o tree.o yolo_layer.o upsample_layer.o$/;"	m
OBJDIR	Makefile	/^OBJDIR=.\/obj\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR), $(OBJ))$/;"	m
OLD_CLASSIFICATION_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
OPENCV	Makefile	/^OPENCV=0$/;"	m
OPENCV	src/yolo_console_dll.cpp	13;"	d	file:
OPENCV_VERSION	src/detector.c	19;"	d	file:
OPENCV_VERSION	src/detector.c	22;"	d	file:
OPENCV_VERSION	src/yolo_console_dll.cpp	31;"	d	file:
OPENCV_VERSION	src/yolo_console_dll.cpp	41;"	d	file:
OPENMP	Makefile	/^OPENMP=0$/;"	m
OPTIONS	crow.h	/^        OPTIONS,$/;"	m	class:crow::HTTPMethod
OPTION_LIST_H	src/option_list.h	2;"	d
OPTS	Makefile	/^OPTS= -O0 -g$/;"	m
OPTS	Makefile	/^OPTS=-Ofast$/;"	m
OS	Makefile	/^OS := $(shell uname)$/;"	m
OSXSAVEFlag	src/gemm.c	76;"	d	file:
Object	crow.h	/^            Object,$/;"	m	class:crow::json::type
OpenBlock	crow.h	/^            OpenBlock,$/;"	m	class:crow::mustache::ActionType
Options	crow.h	/^        Options,$/;"	m	class:crow::HTTPMethod
OutOfRange	crow.h	/^            OutOfRange(unsigned \/*pos*\/, unsigned \/*length*\/) {}$/;"	f	struct:crow::black_magic::OutOfRange
OutOfRange	crow.h	/^        struct OutOfRange$/;"	s	namespace:crow::black_magic
PARSER_H	src/parser.h	2;"	d
PATH	crow.h	/^        PATH,$/;"	m	class:crow::ParamType
PERMUTE	src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon3	file:
PLSE	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
POLY	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
PORT	src/http_stream.cpp	15;"	d	file:
PORT	src/http_stream.cpp	30;"	d	file:
POST	crow.h	/^        POST,$/;"	m	class:crow::HTTPMethod
PTHREAD_BARRIER_SERIAL_THREAD	3rdparty/include/pthread.h	/^  PTHREAD_BARRIER_SERIAL_THREAD = -1$/;"	e	enum:__anon49
PTHREAD_CANCELED	3rdparty/include/pthread.h	665;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS   = 0,$/;"	e	enum:__anon49
PTHREAD_CANCEL_DEFERRED	3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED       = 1,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_CANCEL_DISABLE	3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE        = 1,$/;"	e	enum:__anon49
PTHREAD_CANCEL_ENABLE	3rdparty/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE         = 0,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_COND_INITIALIZER	3rdparty/include/pthread.h	703;"	d
PTHREAD_CREATE_DETACHED	3rdparty/include/pthread.h	/^  PTHREAD_CREATE_DETACHED       = 1,$/;"	e	enum:__anon49
PTHREAD_CREATE_JOINABLE	3rdparty/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE       = 0,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_DESTRUCTOR_ITERATIONS	3rdparty/include/pthread.h	507;"	d
PTHREAD_DESTRUCTOR_ITERATIONS	3rdparty/include/pthread.h	508;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER	3rdparty/include/pthread.h	695;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	3rdparty/include/pthread.h	701;"	d
PTHREAD_EXPLICIT_SCHED	3rdparty/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED        = 1,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_H	3rdparty/include/pthread.h	34;"	d
PTHREAD_INHERIT_SCHED	3rdparty/include/pthread.h	/^  PTHREAD_INHERIT_SCHED         = 0,$/;"	e	enum:__anon49
PTHREAD_KEYS_MAX	3rdparty/include/pthread.h	513;"	d
PTHREAD_KEYS_MAX	3rdparty/include/pthread.h	514;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_DEFAULT	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon50
PTHREAD_MUTEX_ERRORCHECK	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_ERRORCHECK_NP	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_FAST_NP	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_INITIALIZER	3rdparty/include/pthread.h	693;"	d
PTHREAD_MUTEX_NORMAL	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_RECURSIVE	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_RECURSIVE_NP	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon50
PTHREAD_MUTEX_ROBUST	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST          = 1,$/;"	e	enum:__anon49
PTHREAD_MUTEX_STALLED	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_STALLED         = 0,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_MUTEX_TIMED_NP	3rdparty/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP = PTHREAD_MUTEX_FAST_NP,$/;"	e	enum:__anon50
PTHREAD_ONCE_INIT	3rdparty/include/pthread.h	675;"	d
PTHREAD_PROCESS_PRIVATE	3rdparty/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE       = 0,$/;"	e	enum:__anon49
PTHREAD_PROCESS_SHARED	3rdparty/include/pthread.h	/^  PTHREAD_PROCESS_SHARED        = 1,$/;"	e	enum:__anon49
PTHREAD_RECURSIVE_MUTEX_INITIALIZER	3rdparty/include/pthread.h	694;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	3rdparty/include/pthread.h	700;"	d
PTHREAD_RWLOCK_INITIALIZER	3rdparty/include/pthread.h	705;"	d
PTHREAD_SCOPE_PROCESS	3rdparty/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS         = 0,$/;"	e	enum:__anon49
PTHREAD_SCOPE_SYSTEM	3rdparty/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM          = 1,  \/* Default *\/$/;"	e	enum:__anon49
PTHREAD_SPINLOCK_INITIALIZER	3rdparty/include/pthread.h	707;"	d
PTHREAD_STACK_MIN	3rdparty/include/pthread.h	516;"	d
PTHREAD_STACK_MIN	3rdparty/include/pthread.h	517;"	d
PTHREAD_THREADS_MAX	3rdparty/include/pthread.h	523;"	d
PTHREAD_THREADS_MAX	3rdparty/include/pthread.h	524;"	d
PTW32_ALERTABLE_ASYNC_CANCEL	3rdparty/include/pthread.h	/^  PTW32_ALERTABLE_ASYNC_CANCEL              = 0x0002  \/* Can cancel blocked threads. *\/$/;"	e	enum:ptw32_features
PTW32_CDECL	3rdparty/include/pthread.h	570;"	d
PTW32_DLLPORT	3rdparty/include/pthread.h	552;"	d
PTW32_DLLPORT	3rdparty/include/pthread.h	554;"	d
PTW32_DLLPORT	3rdparty/include/pthread.h	557;"	d
PTW32_DLLPORT	3rdparty/include/sched.h	81;"	d
PTW32_DLLPORT	3rdparty/include/sched.h	83;"	d
PTW32_DLLPORT	3rdparty/include/sched.h	86;"	d
PTW32_DLLPORT	3rdparty/include/semaphore.h	80;"	d
PTW32_DLLPORT	3rdparty/include/semaphore.h	82;"	d
PTW32_DLLPORT	3rdparty/include/semaphore.h	85;"	d
PTW32_FALSE	3rdparty/include/pthread.h	/^  PTW32_FALSE = 0,$/;"	e	enum:__anon47
PTW32_INCLUDE_WINDOWS_H	3rdparty/include/pthread.h	194;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	100;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	101;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	108;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	1363;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	86;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	89;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	94;"	d
PTW32_LEVEL	3rdparty/include/pthread.h	95;"	d
PTW32_LEVEL_MAX	3rdparty/include/pthread.h	105;"	d
PTW32_LEVEL_MAX	3rdparty/include/pthread.h	1364;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	179;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	42;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	45;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	50;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	51;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	56;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	57;"	d
PTW32_SCHED_LEVEL	3rdparty/include/sched.h	64;"	d
PTW32_SCHED_LEVEL_MAX	3rdparty/include/sched.h	180;"	d
PTW32_SCHED_LEVEL_MAX	3rdparty/include/sched.h	61;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	166;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	42;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	45;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	50;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	51;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	56;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	57;"	d
PTW32_SEMAPHORE_LEVEL	3rdparty/include/semaphore.h	64;"	d
PTW32_SEMAPHORE_LEVEL_MAX	3rdparty/include/semaphore.h	167;"	d
PTW32_SEMAPHORE_LEVEL_MAX	3rdparty/include/semaphore.h	61;"	d
PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE	3rdparty/include/pthread.h	/^  PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE = 0x0001, \/* System provides it. *\/$/;"	e	enum:ptw32_features
PTW32_TRUE	3rdparty/include/pthread.h	/^  PTW32_TRUE = (! PTW32_FALSE)$/;"	e	enum:__anon47
PTW32_VERSION	3rdparty/include/pthread.h	40;"	d
PTW32_VERSION_STRING	3rdparty/include/pthread.h	41;"	d
PTW32__DWORD_DEF	3rdparty/include/pthread.h	311;"	d
PTW32__HANDLE_DEF	3rdparty/include/pthread.h	307;"	d
PThreadCleanup	3rdparty/include/pthread.h	/^          PThreadCleanup($/;"	f	class:PThreadCleanup
PThreadCleanup	3rdparty/include/pthread.h	/^          PThreadCleanup() :$/;"	f	class:PThreadCleanup
PThreadCleanup	3rdparty/include/pthread.h	/^        class PThreadCleanup {$/;"	c
PUT	crow.h	/^        PUT,$/;"	m	class:crow::HTTPMethod
ParamType	crow.h	/^    enum class ParamType$/;"	c	namespace:crow
Partial	crow.h	/^            Partial,$/;"	m	class:crow::mustache::ActionType
Payload	crow.h	/^            Payload,$/;"	m	class:crow::websocket::WebSocketReadState
Post	crow.h	/^        Post,$/;"	m	class:crow::HTTPMethod
PtW32CatchAll	3rdparty/include/pthread.h	1336;"	d
Put	crow.h	/^        Put,$/;"	m	class:crow::HTTPMethod
RAMP	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
RANDOM	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
REGION	src/layer.h	/^    REGION,$/;"	e	enum:__anon35
REGION_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
REGION_LAYER_H	src/region_layer.h	2;"	d
RELIE	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
RELU	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
REORG	src/layer.h	/^    REORG,$/;"	e	enum:__anon35
REORG_LAYER_H	src/reorg_layer.h	2;"	d
REORG_OLD	src/layer.h	/^	REORG_OLD,$/;"	e	enum:__anon35
REORG_OLD_LAYER_H	src/reorg_old_layer.h	2;"	d
REQUIRE_ORDER	src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon3	file:
RETURN_IN_ORDER	src/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon3	file:
RNN	src/layer.h	/^    RNN,$/;"	e	enum:__anon35
RNN_LAYER_H	src/rnn_layer.h	3;"	d
ROUTE	src/layer.h	/^    ROUTE,$/;"	e	enum:__anon35
ROUTE_LAYER_H	src/route_layer.h	2;"	d
RULE_SPECIAL_REDIRECT_SLASH	crow.h	/^    const int RULE_SPECIAL_REDIRECT_SLASH = 1;$/;"	m	namespace:crow
R_OK	src/unistd.h	20;"	d
Router	crow.h	/^        Router() : rules_(2) $/;"	f	class:crow::Router
Router	crow.h	/^    class Router$/;"	c	namespace:crow
RuleParameterTraits	crow.h	/^    struct RuleParameterTraits$/;"	s	namespace:crow
S	crow.h	/^        struct S$/;"	s	namespace:crow::black_magic
SCHED_FIFO	3rdparty/include/sched.h	/^  SCHED_FIFO,$/;"	e	enum:__anon51
SCHED_MAX	3rdparty/include/sched.h	/^  SCHED_MAX   = SCHED_RR$/;"	e	enum:__anon51
SCHED_MIN	3rdparty/include/sched.h	/^  SCHED_MIN   = SCHED_OTHER,$/;"	e	enum:__anon51
SCHED_OTHER	3rdparty/include/sched.h	/^  SCHED_OTHER = 0,$/;"	e	enum:__anon51
SCHED_RR	3rdparty/include/sched.h	/^  SCHED_RR,$/;"	e	enum:__anon51
SECRET_NUM	src/utils.h	11;"	d
SEMAPHORE_H	3rdparty/include/semaphore.h	40;"	d
SEM_NSEMS_MAX	3rdparty/include/pthread.h	530;"	d
SEM_NSEMS_MAX	3rdparty/include/pthread.h	531;"	d
SEM_VALUE_MAX	3rdparty/include/pthread.h	536;"	d
SEM_VALUE_MAX	3rdparty/include/pthread.h	537;"	d
SHA1	crow.h	/^		SHA1(){ reset(); }$/;"	f	class:sha1::SHA1
SHA1	crow.h	/^		SHA1(const SHA1& s) { *this = s; }$/;"	f	class:sha1::SHA1
SHA1	crow.h	/^	class SHA1$/;"	c	namespace:sha1
SHORTCUT	src/layer.h	/^    SHORTCUT,$/;"	e	enum:__anon35
SHORTCUT_LAYER_H	src/shortcut_layer.h	2;"	d
SIG	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
SIG_BLOCK	3rdparty/include/pthread.h	328;"	d
SIG_SETMASK	3rdparty/include/pthread.h	336;"	d
SIG_UNBLOCK	3rdparty/include/pthread.h	332;"	d
SMOOTH	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon36
SOCKADDR	src/http_stream.cpp	33;"	d	file:
SOCKADDR_IN	src/http_stream.cpp	34;"	d	file:
SOCKET	src/http_stream.cpp	31;"	d	file:
SOCKET_ERROR	src/http_stream.cpp	37;"	d	file:
SOFTMAX	src/layer.h	/^    SOFTMAX,$/;"	e	enum:__anon35
SOFTMAX_LAYER_H	src/softmax_layer.h	2;"	d
SSE	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon36
SSLAdaptor	crow.h	/^        SSLAdaptor(boost::asio::io_service& io_service, context* ctx)$/;"	f	struct:crow::SSLAdaptor
SSLAdaptor	crow.h	/^    struct SSLAdaptor$/;"	s	namespace:crow
STAIR	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
STBIDEF	src/stb_image.h	328;"	d
STBIDEF	src/stb_image.h	330;"	d
STBIWDEF	src/stb_image_write.h	132;"	d
STBIWDEF	src/stb_image_write.h	134;"	d
STBIW_ASSERT	src/stb_image_write.h	206;"	d
STBIW_FREE	src/stb_image_write.h	191;"	d
STBIW_MALLOC	src/stb_image_write.h	189;"	d
STBIW_MEMMOVE	src/stb_image_write.h	200;"	d
STBIW_REALLOC	src/stb_image_write.h	190;"	d
STBIW_REALLOC_SIZED	src/stb_image_write.h	195;"	d
STBIW_UCHAR	src/stb_image_write.h	209;"	d
STBI_ASSERT	src/stb_image.h	516;"	d
STBI_FREE	src/stb_image.h	574;"	d
STBI_HAS_LROTL	src/stb_image.h	554;"	d
STBI_INCLUDE_STB_IMAGE_H	src/stb_image.h	103;"	d
STBI_MALLOC	src/stb_image.h	572;"	d
STBI_NEON	src/stb_image.h	663;"	d
STBI_NOTUSED	src/stb_image.h	548;"	d
STBI_NOTUSED	src/stb_image.h	550;"	d
STBI_NO_BMP	src/stb_image.h	473;"	d
STBI_NO_GIF	src/stb_image.h	482;"	d
STBI_NO_HDR	src/stb_image.h	485;"	d
STBI_NO_JPEG	src/stb_image.h	467;"	d
STBI_NO_PIC	src/stb_image.h	488;"	d
STBI_NO_PNG	src/stb_image.h	470;"	d
STBI_NO_PNM	src/stb_image.h	491;"	d
STBI_NO_PSD	src/stb_image.h	476;"	d
STBI_NO_SIMD	src/stb_image.h	596;"	d
STBI_NO_SIMD	src/stb_image.h	611;"	d
STBI_NO_TGA	src/stb_image.h	479;"	d
STBI_NO_ZLIB	src/stb_image.h	496;"	d
STBI_ORDER_BGR	src/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon8
STBI_ORDER_RGB	src/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon8
STBI_REALLOC	src/stb_image.h	573;"	d
STBI_REALLOC_SIZED	src/stb_image.h	578;"	d
STBI_SIMD_ALIGN	src/stb_image.h	641;"	d
STBI_SIMD_ALIGN	src/stb_image.h	649;"	d
STBI_SIMD_ALIGN	src/stb_image.h	669;"	d
STBI_SIMD_ALIGN	src/stb_image.h	673;"	d
STBI_SSE2	src/stb_image.h	615;"	d
STBI_VERSION	src/stb_image.h	308;"	d
STBI__BYTECAST	src/stb_image.h	1452;"	d
STBI__CASE	src/stb_image.h	1490;"	d
STBI__CASE	src/stb_image.h	1508;"	d
STBI__CASE	src/stb_image.h	1539;"	d
STBI__CASE	src/stb_image.h	1557;"	d
STBI__CASE	src/stb_image.h	4360;"	d
STBI__CASE	src/stb_image.h	4373;"	d
STBI__CASE	src/stb_image.h	4377;"	d
STBI__CASE	src/stb_image.h	4390;"	d
STBI__COMBO	src/stb_image.h	1489;"	d
STBI__COMBO	src/stb_image.h	1538;"	d
STBI__F_avg	src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon19
STBI__F_avg_first	src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon19
STBI__F_none	src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon19
STBI__F_paeth	src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon19
STBI__F_paeth_first	src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon19
STBI__F_sub	src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon19
STBI__F_up	src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon19
STBI__HDR_BUFLEN	src/stb_image.h	6426;"	d
STBI__IDCT_1D	src/stb_image.h	2118;"	d
STBI__MARKER_none	src/stb_image.h	2603;"	d
STBI__PNG_TYPE	src/stb_image.h	4678;"	d
STBI__RESTART	src/stb_image.h	2620;"	d
STBI__SCAN_header	src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon10
STBI__SCAN_load	src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon10
STBI__SCAN_type	src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon10
STBI__X64_TARGET	src/stb_image.h	583;"	d
STBI__X86_TARGET	src/stb_image.h	585;"	d
STBI__ZFAST_BITS	src/stb_image.h	3740;"	d
STBI__ZFAST_MASK	src/stb_image.h	3741;"	d
STBI_default	src/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon5
STBI_grey	src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon5
STBI_grey_alpha	src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon5
STBI_rgb	src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon5
STBI_rgb_alpha	src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon5
STB_IMAGE_IMPLEMENTATION	src/image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/image.c	10;"	d	file:
STDERR_FILENO	src/unistd.h	41;"	d
STDIN_FILENO	src/unistd.h	39;"	d
STDOUT_FILENO	src/unistd.h	40;"	d
STEP	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
STEPS	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon30
STRING	crow.h	/^        STRING,$/;"	m	class:crow::ParamType
STUDY_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
SUPER_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
SWAG_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
SWAP_FLAGS	src/getopt.c	274;"	d	file:
SWAP_FLAGS	src/getopt.c	282;"	d	file:
SWAP_FLAGS	src/getopt.c	285;"	d	file:
Server	crow.h	/^    Server(Handler* handler, std::string bindaddr, uint16_t port, std::tuple<Middlewares...>* middlewares = nullptr, uint16_t concurrency = 1, typename Adaptor::context* adaptor_ctx = nullptr)$/;"	f	class:crow::Server
Server	crow.h	/^    class Server$/;"	c	namespace:crow
SocketAdaptor	crow.h	/^        SocketAdaptor(boost::asio::io_service& io_service, context*)$/;"	f	struct:crow::SocketAdaptor
SocketAdaptor	crow.h	/^    struct SocketAdaptor$/;"	s	namespace:crow
SortMaster3000	src/compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
String	crow.h	/^            String,$/;"	m	class:crow::json::type
TAG_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
TANH	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon38
TRACE	crow.h	/^        TRACE,$/;"	m	class:crow::HTTPMethod
TREE_H	src/tree.h	2;"	d
TWO_PI	src/utils.h	12;"	d
Tag	crow.h	/^            Tag,$/;"	m	class:crow::mustache::ActionType
TaggedRule	crow.h	/^        TaggedRule(std::string rule)$/;"	f	class:crow::TaggedRule
TaggedRule	crow.h	/^    class TaggedRule : public BaseRule, public RuleParameterTraits<TaggedRule<Args...>>$/;"	c	namespace:crow
Trace	crow.h	/^        Trace,$/;"	m	class:crow::HTTPMethod
Tracker_optflow	src/yolo_v2_class.hpp	/^    Tracker_optflow(int _gpu_id = 0, int win_size = 9, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	src/yolo_v2_class.hpp	/^    Tracker_optflow(int win_size = 9, int max_level = 3, int iterations = 8000, int _flow_error = -1) :$/;"	f	class:Tracker_optflow
Tracker_optflow	src/yolo_v2_class.hpp	/^class Tracker_optflow {$/;"	c
Tracker_optflow	src/yolo_v2_class.hpp	/^class Tracker_optflow {};$/;"	c
Trie	crow.h	/^        Trie() : nodes_(1)$/;"	f	class:crow::Trie
Trie	crow.h	/^    class Trie$/;"	c	namespace:crow
True	crow.h	/^            True,$/;"	m	class:crow::json::type
UF_FRAGMENT	crow.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	crow.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	crow.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	crow.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	crow.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	crow.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	crow.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	crow.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
UINT	crow.h	/^        UINT,$/;"	m	class:crow::ParamType
ULONG_PTR	3rdparty/include/pthread.h	/^typedef unsigned long ULONG_PTR;$/;"	t
UPSAMPLE	src/layer.h	/^	UPSAMPLE,$/;"	e	enum:__anon35
UPSAMPLE_LAYER_H	src/upsample_layer.h	2;"	d
USET	src/rnn_layer.h	8;"	d
UTILS_H	src/utils.h	2;"	d
UnescapeTag	crow.h	/^            UnescapeTag,$/;"	m	class:crow::mustache::ActionType
VAESFlag	src/gemm.c	80;"	d	file:
VPATH	Makefile	/^VPATH=.\/src\/$/;"	m
WARNING	crow.h	/^        WARNING,$/;"	m	class:crow::LogLevel
WCSS	scripts/kmeansiou.c	/^double WCSS(matrix data, int *assignments, matrix centers)$/;"	f
WRITING_DATA	src/data.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, LETTERBOX_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA$/;"	e	enum:__anon33
W_OK	src/unistd.h	21;"	d
Warning	crow.h	/^        Warning,$/;"	m	class:crow::LogLevel
WebSocketReadState	crow.h	/^        enum class WebSocketReadState$/;"	c	namespace:crow::websocket
WebSocketRule	crow.h	/^	class WebSocketRule : public BaseRule$/;"	c	namespace:crow
WebSocketRule	crow.h	/^        WebSocketRule(std::string rule)$/;"	f	class:crow::WebSocketRule
Wrapped	crow.h	/^            struct Wrapped$/;"	s	namespace:crow::detail::routing_handler_call_helper
X	src/data.h	/^    matrix X;$/;"	m	struct:__anon32
XNOR	src/layer.h	/^    XNOR,$/;"	e	enum:__anon35
YCbCr_to_RGB_kernel	src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon12
YOLO	src/layer.h	/^	YOLO,$/;"	e	enum:__anon35
YOLODLL_API	src/box.h	12;"	d
YOLODLL_API	src/box.h	14;"	d
YOLODLL_API	src/box.h	6;"	d
YOLODLL_API	src/box.h	8;"	d
YOLODLL_API	src/cuda.h	10;"	d
YOLODLL_API	src/cuda.h	12;"	d
YOLODLL_API	src/cuda.h	16;"	d
YOLODLL_API	src/cuda.h	18;"	d
YOLODLL_API	src/option_list.h	13;"	d
YOLODLL_API	src/option_list.h	15;"	d
YOLODLL_API	src/option_list.h	7;"	d
YOLODLL_API	src/option_list.h	9;"	d
YOLODLL_API	src/utils.h	16;"	d
YOLODLL_API	src/utils.h	18;"	d
YOLODLL_API	src/utils.h	22;"	d
YOLODLL_API	src/utils.h	24;"	d
YOLODLL_API	src/yolo_v2_class.hpp	10;"	d
YOLODLL_API	src/yolo_v2_class.hpp	12;"	d
YOLODLL_API	src/yolo_v2_class.hpp	4;"	d
YOLODLL_API	src/yolo_v2_class.hpp	6;"	d
YOLO_LAYER_H	src/yolo_layer.h	2;"	d
YoloLibraryName	build/darknet/YoloWrapper.cs	/^        private const string YoloLibraryName = "yolo_cpp_dll.dll";$/;"	f	class:Darknet.YoloWrapper	file:
YoloWrapper	build/darknet/YoloWrapper.cs	/^        public YoloWrapper(string configurationFilename, string weightsFilename, int gpu)$/;"	m	class:Darknet.YoloWrapper
YoloWrapper	build/darknet/YoloWrapper.cs	/^    public class YoloWrapper : IDisposable$/;"	c	namespace:Darknet
_	src/getopt.c	84;"	d	file:
_	src/getopt.c	87;"	d	file:
_CRT_NONSTDC_NO_DEPRECATE	src/stb_image_write.h	167;"	d
_CRT_SECURE_NO_WARNINGS	src/stb_image_write.h	164;"	d
_GETOPT_H	src/getopt.h	23;"	d
_INIT_W32DATA	src/http_stream.cpp	/^    _INIT_W32DATA() { WSAStartup(MAKEWORD(2, 1), &w); }$/;"	f	struct:_INIT_W32DATA
_INIT_W32DATA	src/http_stream.cpp	/^struct _INIT_W32DATA$/;"	s	file:
_NO_PROTO	src/getopt.c	27;"	d	file:
_POSIX_BARRIERS	3rdparty/include/pthread.h	443;"	d
_POSIX_BARRIERS	3rdparty/include/pthread.h	444;"	d
_POSIX_READER_WRITER_LOCKS	3rdparty/include/pthread.h	437;"	d
_POSIX_READER_WRITER_LOCKS	3rdparty/include/pthread.h	438;"	d
_POSIX_SEMAPHORES	3rdparty/include/semaphore.h	118;"	d
_POSIX_SEM_NSEMS_MAX	3rdparty/include/pthread.h	526;"	d
_POSIX_SEM_NSEMS_MAX	3rdparty/include/pthread.h	527;"	d
_POSIX_SEM_VALUE_MAX	3rdparty/include/pthread.h	533;"	d
_POSIX_SEM_VALUE_MAX	3rdparty/include/pthread.h	534;"	d
_POSIX_SPIN_LOCKS	3rdparty/include/pthread.h	440;"	d
_POSIX_SPIN_LOCKS	3rdparty/include/pthread.h	441;"	d
_POSIX_THREADS	3rdparty/include/pthread.h	434;"	d
_POSIX_THREADS	3rdparty/include/pthread.h	435;"	d
_POSIX_THREAD_ATTR_STACKADDR	3rdparty/include/pthread.h	455;"	d
_POSIX_THREAD_ATTR_STACKADDR	3rdparty/include/pthread.h	456;"	d
_POSIX_THREAD_ATTR_STACKSIZE	3rdparty/include/pthread.h	449;"	d
_POSIX_THREAD_ATTR_STACKSIZE	3rdparty/include/pthread.h	450;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	3rdparty/include/pthread.h	504;"	d
_POSIX_THREAD_DESTRUCTOR_ITERATIONS	3rdparty/include/pthread.h	505;"	d
_POSIX_THREAD_KEYS_MAX	3rdparty/include/pthread.h	510;"	d
_POSIX_THREAD_KEYS_MAX	3rdparty/include/pthread.h	511;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	3rdparty/include/pthread.h	465;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	3rdparty/include/pthread.h	466;"	d
_POSIX_THREAD_PRIO_INHERIT	3rdparty/include/pthread.h	458;"	d
_POSIX_THREAD_PRIO_INHERIT	3rdparty/include/pthread.h	459;"	d
_POSIX_THREAD_PRIO_PROTECT	3rdparty/include/pthread.h	461;"	d
_POSIX_THREAD_PRIO_PROTECT	3rdparty/include/pthread.h	462;"	d
_POSIX_THREAD_PROCESS_SHARED	3rdparty/include/pthread.h	468;"	d
_POSIX_THREAD_PROCESS_SHARED	3rdparty/include/pthread.h	469;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	3rdparty/include/pthread.h	446;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	3rdparty/include/pthread.h	447;"	d
_POSIX_THREAD_THREADS_MAX	3rdparty/include/pthread.h	519;"	d
_POSIX_THREAD_THREADS_MAX	3rdparty/include/pthread.h	520;"	d
_SCHED_H	3rdparty/include/sched.h	40;"	d
_TIMESPEC_DEFINED	3rdparty/include/pthread.h	319;"	d
_TINY_SHA1_HPP_	crow.h	3113;"	d
_UNISTD_H	src/unistd.h	2;"	d
__CLEANUP_C	3rdparty/include/pthread.h	74;"	d
__except	3rdparty/include/pthread.h	1297;"	d
__getopt_initialized	src/getopt.c	/^int __getopt_initialized;$/;"	v
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("bbox", BOX),$/;"	v	class:DETECTION
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
_fields_	build/darknet/x64/darknet.py	/^    _fields_ = [("x", c_float),$/;"	v	class:BOX
_fields_	darknet.py	/^    _fields_ = [("bbox", BOX),$/;"	v	class:DETECTION
_fields_	darknet.py	/^    _fields_ = [("classes", c_int),$/;"	v	class:METADATA
_fields_	darknet.py	/^    _fields_ = [("w", c_int),$/;"	v	class:IMAGE
_fields_	darknet.py	/^    _fields_ = [("x", c_float),$/;"	v	class:BOX
_ftime	3rdparty/include/pthread.h	1264;"	d
_getopt_initialize	src/getopt.c	/^_getopt_initialize (argc, argv, optstring)$/;"	f	file:
_getopt_internal	src/getopt.c	/^_getopt_internal (argc, argv, optstring, longopts, longind, long_only)$/;"	f
_init_once	src/http_stream.cpp	/^} _init_once;$/;"	v	typeref:struct:_INIT_W32DATA
_method	crow.h	/^constexpr crow::HTTPMethod operator "" _method(const char* str, size_t \/*len*\/)$/;"	f
_qsSORTING	crow.h	44;"	d
_timeb	3rdparty/include/pthread.h	1265;"	d
_write	src/http_stream.cpp	/^    int _write(int sock, char const*const s, int len)$/;"	f	class:MJPGWriter	file:
abs_mean	src/nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
absolute	src/layer.h	/^    int absolute;$/;"	m	struct:layer
accept_handler_	crow.h	/^				std::function<bool(const crow::request&)> accept_handler_;$/;"	m	class:crow::websocket::Connection
accept_handler_	crow.h	/^		std::function<bool(const crow::request&)> accept_handler_;$/;"	m	class:crow::WebSocketRule
acceptor_	crow.h	/^        tcp::acceptor acceptor_;$/;"	m	class:crow::Server
access	src/unistd.h	25;"	d
actions_	crow.h	/^            std::vector<Action> actions_;$/;"	m	class:crow::mustache::template_t
activate	src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activation	src/layer.h	/^    ACTIVATION activation;$/;"	m	struct:layer
adam	src/layer.h	/^	int adam;$/;"	m	struct:__anon37
adam	src/layer.h	/^    int adam;$/;"	m	struct:layer
adam	src/network.h	/^    int adam;$/;"	m	struct:network
adaptor_	crow.h	/^				Adaptor adaptor_;$/;"	m	class:crow::websocket::Connection
adaptor_	crow.h	/^        Adaptor adaptor_;$/;"	m	class:crow::Connection
adaptor_ctx_	crow.h	/^        typename Adaptor::context* adaptor_ctx_;$/;"	m	class:crow::Server
add	crow.h	/^            key add(std::function<void()> f)$/;"	f	class:crow::detail::dumb_timer_queue
add	crow.h	/^        void add(const std::string& url, unsigned rule_index)$/;"	f	class:crow::Trie
add_bias	src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_header	crow.h	/^        void add_header(std::string key, std::string value)$/;"	f	struct:crow::request
add_header	crow.h	/^        void add_header(std::string key, std::string value)$/;"	f	struct:crow::response
add_pixel	src/image.c	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
after_handle	crow.h	/^        void after_handle(request& \/*req*\/, response& res, context& ctx)$/;"	f	struct:crow::CookieParser
after_handler_call	crow.h	/^        after_handler_call(MW& mw, request& req, response& res, Context& ctx, ParentContext& \/*parent_ctx*\/)$/;"	f	namespace:crow::detail
after_handlers_call_helper	crow.h	/^        typename std::enable_if<(N>0)>::type after_handlers_call_helper(Container& middlewares, Context& ctx, request& req, response& res)$/;"	f	namespace:crow::detail
all_a	src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon20
alpha	src/layer.h	/^    float alpha;$/;"	m	struct:layer
alphanum_to_int	src/utils.c	/^int alphanum_to_int(char c)$/;"	f
altNames	build/darknet/x64/darknet.py	/^altNames = None$/;"	v
altNames	darknet.py	/^altNames = None$/;"	v
anchors_comparator	src/detector.c	/^int anchors_comparator(const void *pa, const void *pb)$/;"	f
anchors_t	src/detector.c	/^} anchors_t;$/;"	t	typeref:struct:__anon40	file:
angle	src/data.h	/^    float angle;$/;"	m	struct:load_args
angle	src/layer.h	/^    float angle;$/;"	m	struct:layer
angle	src/network.h	/^    float angle;$/;"	m	struct:network
app14_color_transform	src/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon12
arg	3rdparty/include/pthread.h	/^  void *arg;$/;"	m	struct:ptw32_cleanup_t
args	build/darknet/x64/reval_voc_py3.py	/^    args = parse_args()$/;"	v
args	scripts/log_parser/log_parser.py	/^    args = parse_args()$/;"	v
args	scripts/reval_voc.py	/^    args = parse_args()$/;"	v
args	scripts/reval_voc_py3.py	/^    args = parse_args()$/;"	v
arguments	crow.h	/^        struct arguments$/;"	s	namespace:crow::black_magic
arguments	crow.h	/^        struct arguments<0>$/;"	s	namespace:crow::black_magic
arity	crow.h	/^            static const size_t arity = parent_t::arity;$/;"	m	struct:crow::utility::function_traits
arity	crow.h	/^            static const size_t arity = sizeof...(Args);$/;"	m	struct:crow::utility::function_traits
array_to_image	build/darknet/x64/darknet.py	/^def array_to_image(arr):$/;"	f
array_to_image	darknet.py	/^def array_to_image(arr):$/;"	f
asm_cpuid	src/gemm.c	/^void asm_cpuid(uint32_t* abcd, uint32_t eax)$/;"	f
aspect	src/data.h	/^    float aspect;$/;"	m	struct:load_args
aspect	src/network.h	/^    float aspect;$/;"	m	struct:network
assignments	scripts/kmeansiou.c	/^    int *assignments;$/;"	m	struct:__anon52	file:
average	src/darknet.c	/^void average(int argc, char *argv[])$/;"	f
avg	src/demo.c	/^static float *avg;$/;"	v	file:
avg	src/yolo_v2_class.cpp	/^    float *avg;$/;"	m	struct:detector_gpu_t	file:
avg_IOU	build/darknet/x64/gen_anchors.py	/^def avg_IOU(X,centroids):$/;"	f
avg_IOU	scripts/gen_anchors.py	/^def avg_IOU(X,centroids):$/;"	f
avg_flipped_yolo	src/yolo_layer.c	/^void avg_flipped_yolo(layer l)$/;"	f
avgpool_layer	src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
b	crow.h	/^            bool b() const$/;"	f	class:crow::json::rvalue
b	src/detector.c	/^    box b;$/;"	m	struct:__anon39	file:
back	src/list.h	/^    node *back;$/;"	m	struct:list
background	src/data.h	/^    int background;$/;"	m	struct:load_args
background	src/layer.h	/^    int background;$/;"	m	struct:layer
backward	src/layer.h	/^    void (*backward)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_activation_layer	src/activation_layer.c	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_batchnorm_layer	src/batchnorm_layer.c	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
backward_bias	src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	src/connected_layer.c	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	src/connected_layer.c	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_convolutional_layer	src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	src/crnn_layer.c	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_detection_layer	src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropout_layer	src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_gpu	src/layer.h	/^    void (*backward_gpu)  (struct layer, struct network_state);$/;"	m	struct:layer
backward_gru_layer	src/gru_layer.c	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_local_layer	src/local_layer.c	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_maxpool_layer	src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_network	src/network.c	/^void backward_network(network net, network_state state)$/;"	f
backward_normalization_layer	src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	src/region_layer.c	/^void backward_region_layer(const region_layer l, network_state state)$/;"	f
backward_region_layer_gpu	src/region_layer.c	/^void backward_region_layer_gpu(region_layer l, network_state state)$/;"	f
backward_reorg_layer	src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_old_layer	src/reorg_old_layer.c	/^void backward_reorg_old_layer(const layer l, network_state state)$/;"	f
backward_reorg_old_layer_gpu	src/reorg_old_layer.c	/^void backward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	src/rnn_layer.c	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	src/route_layer.c	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_scale_cpu	src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_softmax_layer	src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
backward_softmax_layer_gpu	src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
backward_upsample_layer	src/upsample_layer.c	/^void backward_upsample_layer(const layer l, network_state state)$/;"	f
backward_upsample_layer_gpu	src/upsample_layer.c	/^void backward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
backward_yolo_layer	src/yolo_layer.c	/^void backward_yolo_layer(const layer l, network_state state)$/;"	f
backward_yolo_layer_gpu	src/yolo_layer.c	/^void backward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
base64encode	crow.h	/^        inline static std::string base64encode(const char* data, size_t size, const char* key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/")$/;"	f	namespace:crow::utility
base64encode_urlsafe	crow.h	/^        inline static std::string base64encode_urlsafe(const char* data, size_t size)$/;"	f	namespace:crow::utility
basecfg	src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	src/layer.h	/^	int batch;$/;"	m	struct:__anon37
batch	src/layer.h	/^    int batch;$/;"	m	struct:layer
batch	src/network.h	/^    int batch;$/;"	m	struct:network
batch	src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
batch_normalize	src/layer.h	/^    int batch_normalize;$/;"	m	struct:layer
bbox	src/box.h	/^	box bbox;$/;"	m	struct:detection
bbox	src/yolo_v2_class.hpp	/^        bbox_t bbox;$/;"	m	struct:preview_boxes_t::preview_box_track_t
bbox_comparator	src/compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	src/compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class_id)$/;"	f
bbox_t	build/darknet/YoloWrapper.cs	/^        public struct bbox_t$/;"	s	class:Darknet.YoloWrapper
bbox_t	src/yolo_v2_class.hpp	/^struct bbox_t {$/;"	s
bbox_t_container	src/yolo_v2_class.hpp	/^struct bbox_t_container {$/;"	s
bbox_update	src/compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class_id, int result)$/;"	f
bboxs	scripts/get_openimages_dataset.py	/^    bboxs = csv.reader(csvfile, delimiter=',', quotechar='|')$/;"	v
bd_algo	src/layer.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer
before_handle	crow.h	/^        void before_handle(request& req, response& res, context& ctx)$/;"	f	struct:crow::CookieParser
before_handler_call	crow.h	/^        before_handler_call(MW& mw, request& req, response& res, Context& ctx, ParentContext& \/*parent_ctx*\/)$/;"	f	namespace:crow::detail
begin	crow.h	/^                const char* begin() const { return s_; }$/;"	f	struct:crow::json::detail::r_string
begin	crow.h	/^            constexpr const char* begin() const { return begin_; }$/;"	f	class:crow::black_magic::const_str
begin	crow.h	/^            rvalue* begin() const $/;"	f	class:crow::json::rvalue
begin_	crow.h	/^            const char * const begin_;$/;"	m	class:crow::black_magic::const_str
best_3d_shift	src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
best_class	src/box.h	/^	int best_class;$/;"	m	struct:detection_with_class
beta	src/layer.h	/^    float beta;$/;"	m	struct:layer
bf_algo	src/layer.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer
bflops	src/layer.h	/^	float bflops;$/;"	m	struct:layer
bgindex	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
bias_match	src/layer.h	/^    int bias_match;$/;"	m	struct:layer
bias_updates	src/layer.h	/^    float *bias_updates;$/;"	m	struct:layer
bias_updates_gpu	src/layer.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
biases	src/layer.h	/^    float *biases;$/;"	m	struct:layer
biases_gpu	src/layer.h	/^    float * biases_gpu;$/;"	m	struct:layer
bilinear_interpolate	src/image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	src/image.c	/^image binarize_image(image im)$/;"	f
binarize_input	src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binary	src/layer.h	/^    int binary;$/;"	m	struct:layer
binary_input	src/layer.h	/^    float *binary_input;$/;"	m	struct:layer
binary_input_gpu	src/layer.h	/^    float *binary_input_gpu;$/;"	m	struct:layer
binary_weights	src/layer.h	/^    float *binary_weights;$/;"	m	struct:layer
binary_weights_gpu	src/layer.h	/^    float *binary_weights_gpu;$/;"	m	struct:layer
bindaddr	crow.h	/^        self_t& bindaddr(std::string bindaddr)$/;"	f	class:crow::Crow
bindaddr_	crow.h	/^        std::string bindaddr_ = "0.0.0.0";$/;"	m	class:crow::Crow
bindaddr_	crow.h	/^        std::string bindaddr_;$/;"	m	class:crow::Server
bits_per_channel	src/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon9
black_magic	crow.h	/^    namespace black_magic$/;"	n	namespace:crow
blas_handle	src/cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
board_to_string	src/go.c	/^void board_to_string(char *s, float *board)$/;"	f
body	crow.h	/^        std::string body;$/;"	m	struct:crow::HTTPParser
body	crow.h	/^        std::string body;$/;"	m	struct:crow::request
body	crow.h	/^        std::string body;$/;"	m	struct:crow::response
body_	crow.h	/^            std::string body_;$/;"	m	class:crow::mustache::template_t
border_image	src/image.c	/^image border_image(image a, int border)$/;"	f
bottom	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon34
bottom_offset	src/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
box	src/box.h	/^} box;$/;"	t	typeref:struct:__anon25
box_intersection	src/box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	src/box.c	/^float box_iou(box a, box b)$/;"	f
box_label	src/data.h	/^} box_label;$/;"	t	typeref:struct:__anon34
box_prob	src/detector.c	/^} box_prob;$/;"	t	typeref:struct:__anon39	file:
box_rmse	src/box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	src/box.c	/^float box_union(box a, box b)$/;"	f
boxes	src/data.h	/^    box **boxes;$/;"	m	struct:__anon32
boxes	src/demo.c	/^static box *boxes;$/;"	v	file:
bpp	src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon20
buffer_	crow.h	/^                boost::array<char, 4096> buffer_;$/;"	m	class:crow::websocket::Connection
buffer_	crow.h	/^        boost::array<char, 4096> buffer_;$/;"	m	class:crow::Connection
buffer_start	src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon7
buffers_	crow.h	/^        std::vector<boost::asio::const_buffer> buffers_;$/;"	m	class:crow::Connection
buflen	src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon7
build_header	crow.h	/^                std::string build_header(int opcode, size_t size)$/;"	f	class:crow::websocket::Connection
burn_in	src/network.h	/^    int burn_in;$/;"	m	struct:network
c	src/data.h	/^	int c; \/\/ color depth$/;"	m	struct:load_args
c	src/image.h	/^    int c;$/;"	m	struct:__anon44
c	src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
c	src/network.h	/^    int h, w, c;$/;"	m	struct:network
c	src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
c	src/yolo_v2_class.hpp	/^    int c;                        \/\/ number of chanels (3 - for RGB)$/;"	m	struct:image_t
c_array	build/darknet/x64/darknet.py	/^def c_array(ctype, values):$/;"	f
c_array	darknet.py	/^def c_array(ctype, values):$/;"	f
cached_bit	crow.h	/^            static const int cached_bit = 2;$/;"	m	class:crow::json::rvalue
calc_anchors	src/detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show) {$/;"	f
calc_anchors	src/detector.c	/^void calc_anchors(char *datacfg, int num_of_clusters, int width, int height, int show)$/;"	f
calculate_liberties	src/go.c	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	src/nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
call	crow.h	/^            struct call$/;"	s	namespace:crow::detail::routing_handler_call_helper
call	crow.h	/^            struct call<F, NInt, NUint, NDouble, NString, black_magic::S<>, black_magic::S<Args1...>>$/;"	s	namespace:crow::detail::routing_handler_call_helper
call	crow.h	/^            struct call<F, NInt, NUint, NDouble, NString, black_magic::S<double, Args1...>, black_magic::S<Args2...>>$/;"	s	namespace:crow::detail::routing_handler_call_helper
call	crow.h	/^            struct call<F, NInt, NUint, NDouble, NString, black_magic::S<int64_t, Args1...>, black_magic::S<Args2...>>$/;"	s	namespace:crow::detail::routing_handler_call_helper
call	crow.h	/^            struct call<F, NInt, NUint, NDouble, NString, black_magic::S<std::string, Args1...>, black_magic::S<Args2...>>$/;"	s	namespace:crow::detail::routing_handler_call_helper
call	crow.h	/^            struct call<F, NInt, NUint, NDouble, NString, black_magic::S<uint64_t, Args1...>, black_magic::S<Args2...>>$/;"	s	namespace:crow::detail::routing_handler_call_helper
call_pair	crow.h	/^            struct call_pair$/;"	s	namespace:crow::detail::routing_handler_call_helper
call_params	crow.h	/^            struct call_params$/;"	s	namespace:crow::detail::routing_handler_call_helper
cancel	crow.h	/^            void cancel(key& k)$/;"	f	class:crow::detail::dumb_timer_queue
cancel_deadline_timer	crow.h	/^        void cancel_deadline_timer()$/;"	f	class:crow::Connection
candidates	build/darknet/YoloWrapper.cs	/^            public bbox_t[] candidates;$/;"	f	struct:Darknet.YoloWrapper.BboxContainer
candidates	src/yolo_v2_class.hpp	/^    bbox_t candidates[C_SHARP_MAX_OBJECTS];$/;"	m	struct:bbox_t_container
cap	src/demo.c	/^static CvCapture * cap;$/;"	v	file:
catch	3rdparty/include/pthread.h	1342;"	d
centers	scripts/kmeansiou.c	/^    matrix centers;$/;"	m	struct:__anon52	file:
change_leaves	src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon21
channel_order	src/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon9
chdir	src/unistd.h	32;"	d
check_after_handle_arity_3	crow.h	/^        struct check_after_handle_arity_3$/;"	s	namespace:crow::detail
check_after_handle_arity_3_const	crow.h	/^        struct check_after_handle_arity_3_const$/;"	s	namespace:crow::detail
check_before_handle_arity_3	crow.h	/^        struct check_before_handle_arity_3$/;"	s	namespace:crow::detail
check_before_handle_arity_3_const	crow.h	/^        struct check_before_handle_arity_3_const$/;"	s	namespace:crow::detail
check_cuda	src/yolo_v2_class.cpp	/^void check_cuda(cudaError_t status) {$/;"	f
check_destroy	crow.h	/^                void check_destroy()$/;"	f	class:crow::websocket::Connection
check_destroy	crow.h	/^        void check_destroy()$/;"	f	class:crow::Connection
check_error	src/cuda.c	/^void check_error(cudaError_t status)$/;"	f
check_version	crow.h	/^        bool check_version(int major, int minor) const$/;"	f	struct:crow::HTTPParser
child	src/tree.h	/^	int *child;$/;"	m	struct:__anon45
children	crow.h	/^            std::unordered_map<std::string, unsigned> children;$/;"	m	struct:crow::Trie::Node
ci_hash	crow.h	/^    struct ci_hash$/;"	s	namespace:crow
ci_key_eq	crow.h	/^    struct ci_key_eq$/;"	s	namespace:crow
class_id	src/box.c	/^    int class_id;$/;"	m	struct:__anon1	file:
class_id	src/compare.c	/^    int class_id;$/;"	m	struct:__anon29	file:
class_id	src/detector.c	/^    int class_id;$/;"	m	struct:__anon39	file:
class_scale	src/layer.h	/^    float class_scale;$/;"	m	struct:layer
classes	build/darknet/x64/data/voc/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	build/darknet/x64/reval_voc_py3.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	scripts/reval_voc.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	scripts/reval_voc_py3.py	/^    classes = [t.strip('\\n') for t in lines]$/;"	v
classes	scripts/voc_label.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	scripts/voc_label_difficult.py	/^classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]$/;"	v
classes	src/box.h	/^	int classes;$/;"	m	struct:detection
classes	src/compare.c	/^    int classes;$/;"	m	struct:__anon29	file:
classes	src/data.h	/^    int classes;$/;"	m	struct:load_args
classes	src/layer.h	/^    int classes;$/;"	m	struct:layer
classes	src/option_list.h	/^	int classes;$/;"	m	struct:__anon28
classfix	src/layer.h	/^    int classfix;$/;"	m	struct:layer
classify	build/darknet/x64/darknet.py	/^def classify(net, meta, im):$/;"	f
classify	darknet.py	/^def classify(net, meta, im):$/;"	f
cleanUpRout	3rdparty/include/pthread.h	/^      ptw32_cleanup_callback_t cleanUpRout;$/;"	m	class:PThreadCleanup
clear	crow.h	/^            void clear()$/;"	f	class:crow::json::wvalue
clear	crow.h	/^        void clear() $/;"	f	class:crow::query_string
clear	crow.h	/^        void clear()$/;"	f	struct:crow::HTTPParser
clear	crow.h	/^        void clear()$/;"	f	struct:crow::response
close	crow.h	/^        void close()$/;"	f	struct:crow::SSLAdaptor
close	crow.h	/^        void close()$/;"	f	struct:crow::SocketAdaptor
close_connection_	crow.h	/^        bool close_connection_ = false;$/;"	m	class:crow::Connection
close_handler_	crow.h	/^				std::function<void(crow::websocket::connection&, const std::string&)> close_handler_;$/;"	m	class:crow::websocket::Connection
close_handler_	crow.h	/^		std::function<void(crow::websocket::connection&, const std::string&)> close_handler_;$/;"	m	class:crow::WebSocketRule
closest_center	scripts/kmeansiou.c	/^int closest_center(double *datum, matrix centers)$/;"	f
coco_classes	src/coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	src/coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	src/detector.c	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
code	src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon11
code_bits	src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon12
code_buffer	src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon12
code_buffer	src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon16
codes	src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon23
coeff	src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon12::__anon13
coeff_h	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon12::__anon13
coeff_w	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon12::__anon13
col2im_add_pixel	src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
col_image	src/layer.h	/^    float *col_image;$/;"	m	struct:layer
col_image_gpu	src/layer.h	/^    float * col_image_gpu;$/;"	m	struct:layer
collapse_image_layers	src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon23
colors	src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
cols	src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
compare_by_lefts	src/image.c	/^int compare_by_lefts(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_by_probs	src/image.c	/^int compare_by_probs(const void *a_ptr, const void *b_ptr) {$/;"	f
compare_networks	src/network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
compile	crow.h	/^        inline template_t compile(const std::string& body)$/;"	f	namespace:crow::mustache
complete_request	crow.h	/^        void complete_request()$/;"	f	class:crow::Connection
complete_request_handler_	crow.h	/^            std::function<void()> complete_request_handler_;$/;"	m	struct:crow::response
composite_3d	src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
compute_parameter_tag_from_args_list	crow.h	/^        struct compute_parameter_tag_from_args_list<>$/;"	s	namespace:crow::black_magic
compute_parameter_tag_from_args_list	crow.h	/^        struct compute_parameter_tag_from_args_list<Arg, Args...>$/;"	s	namespace:crow::black_magic
concat	crow.h	/^        struct concat<seq<I1...>, seq<I2...>>$/;"	s	namespace:crow::black_magic
concat	src/layer.h	/^    float *concat;$/;"	m	struct:layer
concat_data	src/data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	src/data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	src/layer.h	/^    float *concat_delta;$/;"	m	struct:layer
concat_delta_gpu	src/layer.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	src/layer.h	/^    float * concat_gpu;$/;"	m	struct:layer
concat_matrix	src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
concurrency	crow.h	/^        self_t& concurrency(std::uint16_t concurrency)$/;"	f	class:crow::Crow
concurrency_	crow.h	/^        uint16_t concurrency_ = 1;$/;"	m	class:crow::Crow
connected_layer	src/connected_layer.h	/^typedef layer connected_layer;$/;"	t
connection	crow.h	/^		struct connection$/;"	s	namespace:crow::websocket
connectionCount	crow.h	/^    static std::atomic<int> connectionCount;$/;"	m	namespace:crow
const	src/getopt.c	38;"	d	file:
const_cpu	src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
const_str	crow.h	/^                constexpr const_str( const char(&arr)[N] ) : begin_(arr), size_(N - 1) {$/;"	f	class:crow::black_magic::const_str
const_str	crow.h	/^        class const_str$/;"	c	namespace:crow::black_magic
constexpr	crow.h	3324;"	d
constrain	src/utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	src/image.c	/^void constrain_image(image im)$/;"	f
constrain_int	src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
contains	crow.h	/^        struct contains : std::true_type {};$/;"	s	namespace:crow::black_magic
contains	crow.h	/^        struct contains<Tp, Head, Rest...>$/;"	s	namespace:crow::black_magic
contains	crow.h	/^        struct contains<Tp> : std::false_type {};$/;"	s	namespace:crow::black_magic
content_length	crow.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
content_length_	crow.h	/^        std::string content_length_;$/;"	m	class:crow::Connection
context	crow.h	/^        struct context : private partial_context<Middlewares...>$/;"	s	namespace:crow::detail
context	crow.h	/^        struct context$/;"	s	struct:crow::CookieParser
context	src/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon41
contr_size	src/yolo_console_dll.cpp	/^    int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
convDesc	src/layer.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
convert	build/darknet/x64/data/voc/voc_label.py	/^def convert(size, box):$/;"	f
convert	scripts/voc_label.py	/^def convert(size, box):$/;"	f
convert	scripts/voc_label_difficult.py	/^def convert(size, box):$/;"	f
convert_annotation	build/darknet/x64/data/voc/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f
convert_annotation	scripts/voc_label.py	/^def convert_annotation(year, image_id):$/;"	f
convert_annotation	scripts/voc_label_difficult.py	/^def convert_annotation(year, image_id):$/;"	f
convolutional_layer	src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
cookies_to_add	crow.h	/^            std::unordered_map<std::string, std::string> cookies_to_add;$/;"	m	struct:crow::CookieParser::context
coord_scale	src/layer.h	/^    float coord_scale;$/;"	m	struct:layer
coords	src/layer.h	/^    int coords;$/;"	m	struct:layer
copy	scripts/kmeansiou.c	/^void copy(double *x, double *y, int n)$/;"	f
copy_cpu	src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_image	src/image.c	/^image copy_image(image p)$/;"	f
copy_l	crow.h	/^            void copy_l(const rvalue& r)$/;"	f	class:crow::json::rvalue
copy_string	src/utils.c	/^char *copy_string(char *s)$/;"	f
correct	src/yolo_console_dll.cpp	/^    std::vector<bbox_t> correct(std::vector<bbox_t> result_vec) {$/;"	f	class:track_kalman
correct_boxes	src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_region_boxes	src/region_layer.c	/^void correct_region_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
correct_yolo_boxes	src/yolo_layer.c	/^void correct_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative, int letter)$/;"	f
cost	src/layer.h	/^    float *cost;$/;"	m	struct:layer
cost_layer	src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_type	src/layer.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
count	crow.h	/^            int count(const std::string& str)$/;"	f	class:crow::json::rvalue
count	crow.h	/^            int count(const std::string& str)$/;"	f	class:crow::json::wvalue
count_fields	scripts/kmeansiou.c	/^int count_fields(char *line)$/;"	f
count_fields	src/utils.c	/^int count_fields(char *line)$/;"	f
cpp_video_capture	src/demo.c	/^static int cpp_video_capture = 0;$/;"	v	file:
cpu_gemm	src/cpu_gemm.c	/^void cpu_gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_nn	src/cpu_gemm.c	/^void cpu_gemm_nn(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_nt	src/cpu_gemm.c	/^void cpu_gemm_nt(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_tn	src/cpu_gemm.c	/^void cpu_gemm_tn(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
cpu_gemm_tt	src/cpu_gemm.c	/^void cpu_gemm_tt(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
crop_image	src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
crow	crow.h	/^namespace crow $/;"	n
crow	crow.h	/^namespace crow$/;"	n
crow_json_likely	crow.h	3465;"	d
crow_json_likely	crow.h	4922;"	d
crow_json_unlikely	crow.h	3466;"	d
crow_json_unlikely	crow.h	4923;"	d
csv_to_matrix	scripts/kmeansiou.c	/^matrix csv_to_matrix(char *filename, int header)$/;"	f
csv_to_matrix	src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
ctx_	crow.h	/^        detail::context<Middlewares...> ctx_;$/;"	m	class:crow::Connection
cuda_compare	src/cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	src/cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	src/cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	src/cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_make_array	src/cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	src/cuda.c	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_pull_array	src/cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	src/cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	src/cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	src/cuda.c	/^void cuda_set_device(int n) {}$/;"	f
cuda_set_device	src/cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnn_convolutional_setup	src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l, int cudnn_preference)$/;"	f
cudnn_fastest	src/cuda.h	/^enum {cudnn_fastest, cudnn_smallest};$/;"	e	enum:__anon31
cudnn_handle	src/cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cudnn_smallest	src/cuda.h	/^enum {cudnn_fastest, cudnn_smallest};$/;"	e	enum:__anon31
cur_bbox_vec	src/yolo_v2_class.hpp	/^    std::vector<bbox_t> cur_bbox_vec;$/;"	m	class:Tracker_optflow
cur_gpu_id	src/yolo_v2_class.hpp	/^    const int cur_gpu_id;$/;"	m	class:Detector
cur_pts_flow	src/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
cur_pts_flow_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
cur_x	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon23
cur_y	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon23
current_class_id	src/compare.c	/^int current_class_id = 0;$/;"	v
current_detection	src/yolo_v2_class.hpp	/^        bool current_detection;$/;"	m	struct:preview_boxes_t::preview_box_track_t
custom_get_region_detections	src/network.c	/^void custom_get_region_detections(layer l, int w, int h, int net_w, int net_h, float thresh, int *map, float hier, int relative, detection *dets, int letter)$/;"	f
cwd	build/darknet/x64/darknet.py	/^    cwd = os.path.dirname(__file__)$/;"	v
cwd	darknet.py	/^    cwd = os.path.dirname(__file__)$/;"	v
cweights	src/layer.h	/^    char  *cweights;$/;"	m	struct:layer
d	crow.h	/^            double d() const$/;"	f	class:crow::json::rvalue
d	src/data.h	/^    data *d;$/;"	m	struct:load_args
data	crow.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
data	src/data.h	/^} data;$/;"	t	typeref:struct:__anon32
data	src/go.c	/^    char **data;$/;"	m	struct:__anon24	file:
data	src/image.h	/^    float *data;$/;"	m	struct:__anon44
data	src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon12::__anon13
data	src/yolo_v2_class.hpp	/^    float *data;                \/\/ pointer to the image data$/;"	m	struct:image_t
data_type	src/data.h	/^} data_type;$/;"	t	typeref:enum:__anon33
date_str_	crow.h	/^        std::string date_str_;$/;"	m	class:crow::Connection
dbox	src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon26
dc_pred	src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon12::__anon13
dct_bfly32o	src/stb_image.h	2253;"	d
dct_bfly32o	src/stb_image.h	2387;"	d
dct_bfly32o	src/stb_image.h	2439;"	d
dct_bfly32o	src/stb_image.h	2597;"	d
dct_const	src/stb_image.h	2225;"	d
dct_const	src/stb_image.h	2382;"	d
dct_interleave16	src/stb_image.h	2270;"	d
dct_interleave16	src/stb_image.h	2389;"	d
dct_interleave8	src/stb_image.h	2264;"	d
dct_interleave8	src/stb_image.h	2388;"	d
dct_long_mac	src/stb_image.h	2420;"	d
dct_long_mac	src/stb_image.h	2593;"	d
dct_long_mul	src/stb_image.h	2416;"	d
dct_long_mul	src/stb_image.h	2592;"	d
dct_pass	src/stb_image.h	2275;"	d
dct_pass	src/stb_image.h	2390;"	d
dct_pass	src/stb_image.h	2447;"	d
dct_pass	src/stb_image.h	2598;"	d
dct_rot	src/stb_image.h	2229;"	d
dct_rot	src/stb_image.h	2383;"	d
dct_trn16	src/stb_image.h	2507;"	d
dct_trn16	src/stb_image.h	2529;"	d
dct_trn32	src/stb_image.h	2508;"	d
dct_trn32	src/stb_image.h	2530;"	d
dct_trn64	src/stb_image.h	2509;"	d
dct_trn64	src/stb_image.h	2531;"	d
dct_trn8_16	src/stb_image.h	2553;"	d
dct_trn8_16	src/stb_image.h	2588;"	d
dct_trn8_32	src/stb_image.h	2554;"	d
dct_trn8_32	src/stb_image.h	2589;"	d
dct_trn8_8	src/stb_image.h	2552;"	d
dct_trn8_8	src/stb_image.h	2587;"	d
dct_wadd	src/stb_image.h	2243;"	d
dct_wadd	src/stb_image.h	2385;"	d
dct_wadd	src/stb_image.h	2429;"	d
dct_wadd	src/stb_image.h	2595;"	d
dct_widen	src/stb_image.h	2238;"	d
dct_widen	src/stb_image.h	2384;"	d
dct_widen	src/stb_image.h	2424;"	d
dct_widen	src/stb_image.h	2594;"	d
dct_wsub	src/stb_image.h	2248;"	d
dct_wsub	src/stb_image.h	2386;"	d
dct_wsub	src/stb_image.h	2434;"	d
dct_wsub	src/stb_image.h	2596;"	d
ddstTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
debug_node_print	crow.h	/^        void debug_node_print(Node* n, int level)$/;"	f	class:crow::Trie
debug_print	crow.h	/^        void debug_print() const$/;"	f	struct:crow::routing_params
debug_print	crow.h	/^        void debug_print()$/;"	f	class:crow::Crow
debug_print	crow.h	/^        void debug_print()$/;"	f	class:crow::Router
debug_print	crow.h	/^        void debug_print()$/;"	f	class:crow::Trie
decay	src/layer.h	/^	float decay;$/;"	m	struct:__anon37
decay	src/network.h	/^    float decay;$/;"	m	struct:network
decode_box	src/box.c	/^box decode_box(box b, box anchor)$/;"	f
deconvolutional_layer	src/deconvolutional_layer.h	/^typedef layer deconvolutional_layer;$/;"	t
deconvolutional_out_height	src/deconvolutional_layer.c	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	src/deconvolutional_layer.c	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	src/deconvolutional_layer.c	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
default_loader	crow.h	/^        inline std::string default_loader(const std::string& filename)$/;"	f	namespace:crow::mustache
deinter_cpu	src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	scripts/kmeansiou.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
del_arg	src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delay	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
delta	src/layer.h	/^    float * delta;$/;"	m	struct:layer
delta	src/network.h	/^    float *delta;$/;"	m	struct:network_state
delta	src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon11
delta_gpu	src/layer.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_region_box	src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class_id, int classes, tree *hier, float scale, float *avg_cat, int focal_loss)$/;"	f
delta_yolo_box	src/yolo_layer.c	/^float delta_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_yolo_class	src/yolo_layer.c	/^void delta_yolo_class(float *output, float *delta, int index, int class_id, int classes, int stride, float *avg_cat, int focal_loss)$/;"	f
demo	src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, float hier_thresh, int cam_index, const char *filename, char **names, int classes,$/;"	f
demo_alphabet	src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	src/art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	src/classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_ext_output	src/demo.c	/^static int demo_ext_output = 0;$/;"	v	file:
demo_index	src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_index	src/yolo_v2_class.cpp	/^    int demo_index;$/;"	m	struct:detector_gpu_t	file:
demo_names	src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_thresh	src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
denormalize_connected_layer	src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	src/darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
depth	src/stb_image.h	/^   int depth;$/;"	m	struct:__anon18
dequant	src/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon12
derivative	src/box.c	/^dbox derivative(box a, box b)$/;"	f
det	src/box.h	/^	detection det;$/;"	m	struct:detection_with_class
det_img	src/demo.c	/^IplImage* det_img;$/;"	v
det_s	src/demo.c	/^static image det_s;$/;"	v	file:
detail	crow.h	/^        namespace detail $/;"	n	namespace:crow::json
detail	crow.h	/^        namespace detail {$/;"	n	namespace:crow::json
detail	crow.h	/^        namespace detail$/;"	n	namespace:crow::mustache
detail	crow.h	/^    namespace detail $/;"	n	namespace:crow
detail	crow.h	/^    namespace detail$/;"	n	namespace:crow
detect	build/darknet/x64/darknet.py	/^def detect(net, meta, image, thresh=.5, hier_thresh=.5, nms=.45, debug= False):$/;"	f
detect	darknet.py	/^def detect(net, meta, image, thresh=.5, hier_thresh=.5, nms=.45, debug= False):$/;"	f
detect	src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::detect(image_t img, float thresh, bool use_mean)$/;"	f	class:Detector
detect	src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::detect(std::string image_filename, float thresh, bool use_mean)$/;"	f	class:Detector
detect	src/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect(cv::Mat mat, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detect_image	src/yolo_v2_class.cpp	/^int detect_image(const char *filename, bbox_t_container &container) $/;"	f
detect_in_thread	src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_mat	src/yolo_v2_class.cpp	/^int detect_mat(const uint8_t* data, const size_t data_length, bbox_t_container &container) {$/;"	f
detect_resized	src/yolo_v2_class.hpp	/^    std::vector<bbox_t> detect_resized(image_t img, int init_w, int init_h, float thresh = 0.2, bool use_mean = false)$/;"	f	class:Detector
detection	src/box.h	/^typedef struct detection {$/;"	s
detection	src/box.h	/^} detection;$/;"	t	typeref:struct:detection
detection_layer	src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
detection_with_class	src/box.h	/^typedef struct detection_with_class {$/;"	s
detection_with_class	src/box.h	/^} detection_with_class;$/;"	t	typeref:struct:detection_with_class
detections_comparator	src/detector.c	/^int detections_comparator(const void *pa, const void *pb)$/;"	f
detector	src/yolo_v2_class.cpp	/^static std::unique_ptr<Detector> detector;$/;"	v	file:
detector_gpu_ptr	src/yolo_v2_class.hpp	/^    std::shared_ptr<void> detector_gpu_ptr;$/;"	m	class:Detector
detector_gpu_t	src/yolo_v2_class.cpp	/^struct detector_gpu_t {$/;"	s	file:
dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon26
dice_labels	src/dice.c	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
digest32_t	crow.h	/^		typedef uint32_t digest32_t[5];$/;"	t	class:sha1::SHA1
digest8_t	crow.h	/^		typedef uint8_t digest8_t[20];$/;"	t	class:sha1::SHA1
dintersect	src/box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	src/box.c	/^dbox diou(box a, box b)$/;"	f
dispatch	crow.h	/^                void dispatch(CompletionHandler handler)$/;"	f	class:crow::websocket::Connection
dispatch	crow.h	/^        void dispatch(CompletionHandler handler)$/;"	f	struct:crow::request
dispose	src/yolo_v2_class.cpp	/^int dispose() {$/;"	f
dist	scripts/kmeansiou.c	/^double dist(double *x, double *y, int n)$/;"	f
dist_array	src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
dist_to_closest_center	scripts/kmeansiou.c	/^double dist_to_closest_center(double *datum, matrix centers)$/;"	f
distance_from_edge	src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
do_accept	crow.h	/^        void do_accept()$/;"	f	class:crow::Server
do_kmeans	scripts/kmeansiou.c	/^model do_kmeans(matrix data, int k)$/;"	f
do_nms	src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	build/darknet/x64/darknet.py	/^do_nms_obj = lib.do_nms_obj$/;"	v
do_nms_obj	darknet.py	/^do_nms_obj = lib.do_nms_obj$/;"	v
do_nms_obj	src/box.c	/^void do_nms_obj(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort	build/darknet/x64/darknet.py	/^do_nms_sort = lib.do_nms_sort$/;"	v
do_nms_sort	darknet.py	/^do_nms_sort = lib.do_nms_sort$/;"	v
do_nms_sort	src/box.c	/^void do_nms_sort(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort_v2	src/box.c	/^void do_nms_sort_v2(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_python_eval	build/darknet/x64/reval_voc_py3.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_python_eval	scripts/reval_voc.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_python_eval	scripts/reval_voc_py3.py	/^def do_python_eval(devkit_path, year, image_set, classes, output_dir = 'results'):$/;"	f
do_read	crow.h	/^                void do_read()$/;"	f	class:crow::websocket::Connection
do_read	crow.h	/^        void do_read()$/;"	f	class:crow::Connection
do_write	crow.h	/^                void do_write()$/;"	f	class:crow::websocket::Connection
do_write	crow.h	/^        void do_write()$/;"	f	class:crow::Connection
does_cost	src/layer.h	/^    int does_cost;$/;"	m	struct:layer
done	3rdparty/include/pthread.h	/^  int          done;        \/* indicates if user function has been executed *\/$/;"	m	struct:pthread_once_t_
done	crow.h	/^        bool done()$/;"	f	struct:crow::HTTPParser
dontload	src/layer.h	/^    int dontload;$/;"	m	struct:layer
dontloadscales	src/layer.h	/^    int dontloadscales;$/;"	m	struct:layer
dot	src/layer.h	/^    float dot;$/;"	m	struct:layer
dot_cpu	src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
double_params	crow.h	/^        std::vector<double> double_params;$/;"	m	struct:crow::routing_params
dq_	crow.h	/^            std::deque<std::pair<decltype(std::chrono::steady_clock::now()), std::function<void()>>> dq_;$/;"	m	class:crow::detail::dumb_timer_queue
draw	src/yolo_v2_class.hpp	/^    void draw(cv::Mat draw_mat, bool show_small_boxes = false)$/;"	f	class:preview_boxes_t
draw_bbox	src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_boxes	src/yolo_console_dll.cpp	/^void draw_boxes(cv::Mat mat_img, std::vector<bbox_t> result_vec, std::vector<std::string> obj_names, $/;"	f
draw_detections	src/image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv	src/image.c	/^void draw_detections_cv(IplImage* show_img, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_detections_cv_v3	src/image.c	/^void draw_detections_cv_v3(IplImage* show_img, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_detections_v3	src/image.c	/^void draw_detections_v3(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)$/;"	f
draw_label	src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
draw_train_chart	src/image.c	/^IplImage* draw_train_chart(float max_img_loss, int max_batches, int number_of_lines, int img_size)$/;"	f
draw_train_loss	src/image.c	/^void draw_train_loss(IplImage* img, int img_size, float avg_loss, float max_img_loss, int current_batch, int max_batches)$/;"	f
dropout_layer	src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dsrcTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dst_grey	src/yolo_v2_class.hpp	/^    cv::Mat dst_grey;$/;"	m	class:Tracker_optflow
dst_grey_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dst_mat_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat dst_mat_gpu, dst_grey_gpu;$/;"	m	class:Tracker_optflow
dumb_timer_queue	crow.h	/^        class dumb_timer_queue$/;"	c	namespace:crow::detail
dump	crow.h	/^        inline std::string dump(const wvalue& v)$/;"	f	namespace:crow::json
dump_internal	crow.h	/^        inline void dump_internal(const wvalue& v, std::string& out)$/;"	f	namespace:crow::json
dump_string	crow.h	/^        inline void dump_string(const std::string& str, std::string& out)$/;"	f	namespace:crow::json
dunion	src/box.c	/^dbox dunion(box a, box b)$/;"	f
dup2	src/unistd.h	26;"	d
dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon26
dweightDesc	src/layer.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer
dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon26
dx_vec	src/yolo_console_dll.cpp	/^    std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon26
dy_vec	src/yolo_console_dll.cpp	/^    std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
e_	crow.h	/^                mutable char* e_;$/;"	m	struct:crow::json::detail::r_string
eflags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
elo	src/compare.c	/^    float elo;$/;"	m	struct:__anon29	file:
elo_comparator	src/compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	src/compare.c	/^    float *elos;$/;"	m	struct:__anon29	file:
elu_activate	src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_gradient	src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
emplace_back	crow.h	/^            void emplace_back(rvalue&& v)$/;"	f	class:crow::json::rvalue
empty_context	crow.h	/^        struct empty_context$/;"	s	namespace:crow::black_magic
encode_box	src/box.c	/^box encode_box(box b, box anchor)$/;"	f
end	crow.h	/^                const char* end() const { return e_; }$/;"	f	struct:crow::json::detail::r_string
end	crow.h	/^            constexpr const char* end() const { return begin_ + size_; }$/;"	f	class:crow::black_magic::const_str
end	crow.h	/^            int end;$/;"	m	struct:crow::mustache::Action
end	crow.h	/^            rvalue* end() const $/;"	f	class:crow::json::rvalue
end	crow.h	/^        void end()$/;"	f	struct:crow::response
end	crow.h	/^        void end(const std::string& body_part)$/;"	f	struct:crow::response
end_	crow.h	/^            mutable char* end_;$/;"	m	class:crow::json::rvalue
engine_go	src/go.c	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
entry_index	src/region_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
entry_index	src/yolo_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
envKeys	build/darknet/x64/darknet.py	/^    envKeys = list()$/;"	v
envKeys	darknet.py	/^    envKeys = list()$/;"	v
eob_run	src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon12
eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon6
epoch	src/network.h	/^    float epoch;$/;"	m	struct:network
eps	src/layer.h	/^	float eps;$/;"	m	struct:__anon37
eps	src/layer.h	/^    float eps;$/;"	m	struct:layer
eps	src/network.h	/^    float eps;$/;"	m	struct:network
erased_handler_	crow.h	/^        std::function<void(const request&, response&, const routing_params&)> erased_handler_;$/;"	m	class:crow::DynamicRule
err	src/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
err_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
errno	3rdparty/include/pthread.h	1254;"	d
error	crow.h	/^            bool error() const$/;"	f	class:crow::json::rvalue
error	scripts/kmeansiou.c	/^void error(char *s){$/;"	f
error	src/utils.c	/^void error(const char *s)$/;"	f
error_bit	crow.h	/^            static const int error_bit = 4;$/;"	m	class:crow::json::rvalue
error_handler_	crow.h	/^				std::function<void(crow::websocket::connection&)> error_handler_;$/;"	m	class:crow::websocket::Connection
error_handler_	crow.h	/^		std::function<void(crow::websocket::connection&)> error_handler_;$/;"	m	class:crow::WebSocketRule
escape	crow.h	/^            void escape(const std::string& in, std::string& out)$/;"	f	class:crow::mustache::template_t
escape	crow.h	/^        inline std::string escape(const std::string& str)$/;"	f	namespace:crow::json
escape	crow.h	/^        inline void escape(const std::string& str, std::string& ret)$/;"	f	namespace:crow::json
estimate_length	crow.h	/^            size_t estimate_length() const$/;"	f	class:crow::json::wvalue
eval_cifar_csv	src/cifar.c	/^void eval_cifar_csv()$/;"	f
exchange	src/getopt.c	/^exchange (argv)$/;"	f	file:
execute	3rdparty/include/pthread.h	/^          void execute( int exec )$/;"	f	class:PThreadCleanup
executeIt	3rdparty/include/pthread.h	/^          int             executeIt;$/;"	m	class:PThreadCleanup
execve	src/unistd.h	27;"	d
expanded	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon18
exposure	src/data.h	/^    float exposure;$/;"	m	struct:load_args
exposure	src/layer.h	/^    float exposure;$/;"	m	struct:layer
exposure	src/network.h	/^    float exposure;$/;"	m	struct:network
exposure_image	src/image.c	/^void exposure_image(image im, float sat)$/;"	f
extract_cifar	src/cifar.c	/^void extract_cifar()$/;"	f
extract_voxel	src/voxel.c	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
extrapolate_coords_t	src/yolo_console_dll.cpp	/^class extrapolate_coords_t {$/;"	c	file:
f	crow.h	/^                    Func f;$/;"	m	struct:crow::detail::routing_handler_call_helper::Wrapped::req_handler_wrapper
fast	src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon15
fast	src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon11
fast_ac	src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon12
feed	crow.h	/^        bool feed(const char* buffer, int length)$/;"	f	struct:crow::HTTPParser
fetch_in_thread	src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetgo	src/go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	scripts/kmeansiou.c	/^char *fgetl(FILE *fp)$/;"	f
fgetl	src/utils.c	/^char *fgetl(FILE *fp)$/;"	f
field_data	crow.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon46
field_set	crow.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
file_error	src/utils.c	/^void file_error(char *s)$/;"	f
filename	src/compare.c	/^    char *filename;$/;"	m	struct:__anon29	file:
fileno	src/unistd.h	30;"	d
fill_cpu	src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	src/image.c	/^void fill_image(image m, float s)$/;"	f
fill_network_boxes	src/network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets, int letter)$/;"	f
fill_truth	src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	src/data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy,$/;"	f
fill_truth_region	src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find	crow.h	/^        std::pair<unsigned, routing_params> find(const std::string& req_url, const Node* node = nullptr, unsigned pos = 0, routing_params* params = nullptr) const$/;"	f	class:crow::Trie
find_arg	scripts/kmeansiou.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_arg	src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	scripts/kmeansiou.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_char_arg	src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_closing_tag	crow.h	/^        constexpr unsigned find_closing_tag(const_str s, unsigned p)$/;"	f	namespace:crow::black_magic
find_closing_tag_runtime	crow.h	/^        static inline unsigned find_closing_tag_runtime(const char* s, unsigned p)$/;"	f	namespace:crow::black_magic
find_float_arg	scripts/kmeansiou.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_float_arg	src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	scripts/kmeansiou.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_int_arg	src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	src/utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_extension	src/utils.c	/^void find_replace_extension(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
first	src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon22
first_nonopt	src/getopt.c	/^static int first_nonopt;$/;"	v	file:
first_row_filter	src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon15
firstsymbol	src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon15
fix_data_captcha	src/captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
flag	src/getopt.h	/^  int *flag;$/;"	m	struct:option
flag_exit	src/demo.c	/^static int flag_exit;$/;"	v	file:
flags	crow.h	/^  unsigned int flags : 6;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	crow.h	/^enum flags$/;"	g
flags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
flatten	src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip	src/data.h	/^    int flip;$/;"	m	struct:load_args
flip	src/layer.h	/^    int flip;$/;"	m	struct:layer
flip	src/network.h	/^    int flip; \/\/ horizontal flip 50% probability augmentaiont for classifier training (default = 1)$/;"	m	struct:network
flip_board	src/go.c	/^void flip_board(float *board)$/;"	f
flip_image	src/image.c	/^void flip_image(image a)$/;"	f
flipped	src/layer.h	/^    int flipped;$/;"	m	struct:layer
float_abs_compare	src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	src/rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon4	file:
float_pair	src/rnn_vid.c	/^} float_pair;$/;"	t	typeref:struct:__anon2	file:
float_to_box	src/box.c	/^box float_to_box(float *f)$/;"	f
float_to_box_stride	src/yolo_layer.c	/^static box float_to_box_stride(float *f, int stride)$/;"	f	file:
float_to_image	src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
flow_error	src/yolo_v2_class.hpp	/^    const int flow_error;$/;"	m	class:Tracker_optflow
focal_loss	src/layer.h	/^	int focal_loss;$/;"	m	struct:layer
focus	src/layer.h	/^	float focus;$/;"	m	struct:layer
font	build/darknet/x64/data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
font	data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
force	crow.h	/^                void force(char* s, uint32_t \/*length*\/)$/;"	f	struct:crow::json::detail::r_string
forced	src/layer.h	/^    int forced;$/;"	m	struct:layer
forgot_delta	src/layer.h	/^    float *forgot_delta;$/;"	m	struct:layer
forgot_delta_gpu	src/layer.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	src/layer.h	/^    float *forgot_state;$/;"	m	struct:layer
forgot_state_gpu	src/layer.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	src/layer.h	/^    void (*forward)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_activation_layer	src/activation_layer.c	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_batchnorm_layer	src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_connected_layer	src/connected_layer.c	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	src/connected_layer.c	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_convolutional_layer	src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	src/crnn_layer.c	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_deconvolutional_layer	src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_detection_layer	src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_gpu	src/layer.h	/^    void (*forward_gpu)   (struct layer, struct network_state);$/;"	m	struct:layer
forward_gru_layer	src/gru_layer.c	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_local_layer	src/local_layer.c	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_maxpool_layer	src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_network	src/network.c	/^void forward_network(network net, network_state state)$/;"	f
forward_normalization_layer	src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	src/region_layer.c	/^void forward_region_layer(const region_layer l, network_state state)$/;"	f
forward_region_layer_gpu	src/region_layer.c	/^void forward_region_layer_gpu(const region_layer l, network_state state)$/;"	f
forward_reorg_layer	src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_reorg_old_layer	src/reorg_old_layer.c	/^void forward_reorg_old_layer(const layer l, network_state state)$/;"	f
forward_reorg_old_layer_gpu	src/reorg_old_layer.c	/^void forward_reorg_old_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	src/rnn_layer.c	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	src/route_layer.c	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_shortcut_layer	src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
forward_softmax_layer_gpu	src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state state)$/;"	f
forward_upsample_layer	src/upsample_layer.c	/^void forward_upsample_layer(const layer l, network_state net)$/;"	f
forward_upsample_layer_gpu	src/upsample_layer.c	/^void forward_upsample_layer_gpu(const layer l, network_state state)$/;"	f
forward_yolo_layer	src/yolo_layer.c	/^void forward_yolo_layer(const layer l, network_state state)$/;"	f
forward_yolo_layer_gpu	src/yolo_layer.c	/^void forward_yolo_layer_gpu(const layer l, network_state state)$/;"	f
fps	src/demo.c	/^static float fps = 0;$/;"	v	file:
fragment_	crow.h	/^                std::string fragment_;$/;"	m	class:crow::websocket::Connection
fragments_	crow.h	/^            std::vector<std::pair<int,int>> fragments_;$/;"	m	class:crow::mustache::template_t
frames_counter	build/darknet/YoloWrapper.cs	/^            public UInt32 frames_counter;$/;"	f	struct:Darknet.YoloWrapper.bbox_t
frames_counter	src/yolo_v2_class.hpp	/^    unsigned int frames_counter;\/\/ counter of frames on which the object was detected$/;"	m	struct:bbox_t
frames_history	src/yolo_v2_class.hpp	/^    enum { frames_history = 30 };    \/\/ how long to keep the history saved$/;"	e	enum:preview_boxes_t::__anon42
free_data	src/data.c	/^void free_data(data d)$/;"	f
free_detections	build/darknet/x64/darknet.py	/^free_detections = lib.free_detections$/;"	v
free_detections	darknet.py	/^free_detections = lib.free_detections$/;"	v
free_detections	src/network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_image	build/darknet/x64/darknet.py	/^free_image = lib.free_image$/;"	v
free_image	darknet.py	/^free_image = lib.free_image$/;"	v
free_image	src/image.c	/^void free_image(image m)$/;"	f
free_image	src/yolo_v2_class.cpp	/^YOLODLL_API void Detector::free_image(image_t m)$/;"	f	class:Detector
free_layer	src/layer.c	/^void free_layer(layer l)$/;"	f
free_list	src/list.c	/^void free_list(list *l)$/;"	f
free_list_contents	src/list.c	/^void free_list_contents(list *l)$/;"	f
free_list_contents_kvp	src/list.c	/^void free_list_contents_kvp(list *l)$/;"	f
free_matrix	src/matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	src/network.c	/^void free_network(network net)$/;"	f
free_node	src/list.c	/^void free_node(node *n)$/;"	f
free_ptrs	build/darknet/x64/darknet.py	/^free_ptrs = lib.free_ptrs$/;"	v
free_ptrs	darknet.py	/^free_ptrs = lib.free_ptrs$/;"	v
free_ptrs	src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	src/parser.c	/^void free_section(section *s)$/;"	f
front	src/list.h	/^    node *front;$/;"	m	struct:list
ftruncate	src/unistd.h	28;"	d
func	src/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon41
function_traits	crow.h	/^        struct function_traits : public function_traits<decltype(&T::operator())>$/;"	s	namespace:crow::utility
function_traits	crow.h	/^        struct function_traits<R(ClassType::*)(Args...) const>$/;"	s	namespace:crow::utility
function_traits	crow.h	/^        struct function_traits<R(ClassType::*)(Args...)>$/;"	s	namespace:crow::utility
function_traits	crow.h	/^        struct function_traits<std::function<R(Args...)>>$/;"	s	namespace:crow::utility
fuse_conv_batchnorm	src/network.c	/^void fuse_conv_batchnorm(network net)$/;"	f
fw_algo	src/layer.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer
gamma	src/network.h	/^    float gamma;$/;"	m	struct:network
gate_delta_gpu	src/layer.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	src/layer.h	/^    float * gate_gpu;$/;"	m	struct:layer
gemm	src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_gpu	src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_nn	src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt	src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_ongpu	src/gemm.c	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_tn	src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
gen_seq	crow.h	/^        struct gen_seq : Concat<GenSeq<N\/2>, GenSeq<N - N\/2>>{};$/;"	s	namespace:crow::black_magic
gen_seq	crow.h	/^        template<> struct gen_seq<0> : seq<>{};$/;"	s	namespace:crow::black_magic
gen_seq	crow.h	/^        template<> struct gen_seq<1> : seq<0>{};$/;"	s	namespace:crow::black_magic
generate_move	src/go.c	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	src/rnn_vid.c	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
get	crow.h	/^            struct get$/;"	s	struct:crow::detail::check_after_handle_arity_3
get	crow.h	/^            struct get$/;"	s	struct:crow::detail::check_after_handle_arity_3_const
get	crow.h	/^            struct get$/;"	s	struct:crow::detail::check_before_handle_arity_3
get	crow.h	/^            struct get$/;"	s	struct:crow::detail::check_before_handle_arity_3_const
get	crow.h	/^            typename T::context& get()$/;"	f	struct:crow::detail::context
get	crow.h	/^            typename T::context& get()$/;"	f	struct:crow::detail::partial_context
get	crow.h	/^        char* get (const std::string& name) const$/;"	f	class:crow::query_string
get	crow.h	/^    inline double routing_params::get<double>(unsigned index) const$/;"	f	class:crow::routing_params
get	crow.h	/^    inline int64_t routing_params::get<int64_t>(unsigned index) const$/;"	f	class:crow::routing_params
get	crow.h	/^    inline std::string routing_params::get<std::string>(unsigned index) const$/;"	f	class:crow::routing_params
get	crow.h	/^    inline uint64_t routing_params::get<uint64_t>(unsigned index) const$/;"	f	class:crow::routing_params
getDigest	crow.h	/^		const uint32_t* getDigest(digest32_t digest) {$/;"	f	class:sha1::SHA1
getDigestBytes	crow.h	/^		const uint8_t* getDigestBytes(digest8_t digest) {$/;"	f	class:sha1::SHA1
get_activation	src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_actual_detections	src/image.c	/^detection_with_class* get_actual_detections(detection *dets, int dets_num, float thresh, int* selected_detections_num)$/;"	f
get_cached_date_str	crow.h	/^        std::function<std::string()>& get_cached_date_str;$/;"	m	class:crow::Connection
get_cached_date_str_pool_	crow.h	/^        std::vector<std::function<std::string()>> get_cached_date_str_pool_;$/;"	m	class:crow::Server
get_capture_video_stream	src/http_stream.cpp	/^CvCapture* get_capture_video_stream(char *path) {$/;"	f
get_capture_webcam	src/http_stream.cpp	/^CvCapture* get_capture_webcam(int index) {$/;"	f
get_coco_image_id	src/coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	src/detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	src/image.c	/^float get_color(int c, int x, int max)$/;"	f
get_context	crow.h	/^        typename T::context& get_context(const request& req)$/;"	f	class:crow::Crow
get_convolutional_delta	src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cookie	crow.h	/^            std::string get_cookie(const std::string& key) const$/;"	f	struct:crow::CookieParser::context
get_cost_string	src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_cuda_stream	src/cuda.c	/^cudaStream_t get_cuda_stream() {$/;"	f
get_current_batch	src/network.c	/^int get_current_batch(network net)$/;"	f
get_current_log_level	crow.h	/^            static LogLevel get_current_log_level() {$/;"	f	class:crow::logger
get_current_rate	src/network.c	/^float get_current_rate(network net)$/;"	f
get_data_part	src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	src/deconvolutional_layer.c	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	src/deconvolutional_layer.c	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	src/detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_detection_detections	src/detection_layer.c	/^void get_detection_detections(layer l, int w, int h, float thresh, detection *dets)$/;"	f
get_device_count	src/yolo_v2_class.cpp	/^int get_device_count() {$/;"	f
get_device_name	src/yolo_v2_class.cpp	/^int get_device_name(int gpu, char* deviceName) {$/;"	f
get_dict	crow.h	/^        std::unordered_map<std::string, std::string> get_dict (const std::string& name) const$/;"	f	class:crow::query_string
get_element_by_type	crow.h	/^        T& get_element_by_type(std::tuple<Args...>& t)$/;"	f	namespace:crow::utility
get_file_name_and_ext	scripts/log_parser/log_parser.py	/^def get_file_name_and_ext(filename):$/;"	f
get_handler_ref	crow.h	/^            static ILogHandler*& get_handler_ref()$/;"	f	class:crow::logger
get_header_value	crow.h	/^        const std::string& get_header_value(const std::string& key) const$/;"	f	struct:crow::request
get_header_value	crow.h	/^        const std::string& get_header_value(const std::string& key)$/;"	f	struct:crow::response
get_header_value	crow.h	/^    inline const std::string& get_header_value(const T& headers, const std::string& key)$/;"	f	namespace:crow
get_hierarchy_probability	src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream	src/image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_from_stream_cpp	src/image.c	/^image get_image_from_stream_cpp(CvCapture *cap)$/;"	f
get_image_from_stream_letterbox	src/image.c	/^image get_image_from_stream_letterbox(CvCapture *cap, int w, int h, int c, IplImage** in_img, int cpp_video_capture, int dont_close)$/;"	f
get_image_from_stream_resize	src/image.c	/^image get_image_from_stream_resize(CvCapture *cap, int w, int h, int c, IplImage** in_img, int cpp_video_capture, int dont_close)$/;"	f
get_image_layer	src/image.c	/^image get_image_layer(image m, int l)$/;"	f
get_index_of_element_from_tuple_by_type_impl	crow.h	/^        struct get_index_of_element_from_tuple_by_type_impl$/;"	s	namespace:crow::detail
get_index_of_element_from_tuple_by_type_impl	crow.h	/^        struct get_index_of_element_from_tuple_by_type_impl<T, N, T, Args...>$/;"	s	namespace:crow::detail
get_index_of_element_from_tuple_by_type_impl	crow.h	/^        struct get_index_of_element_from_tuple_by_type_impl<T, N, U, Args...>$/;"	s	namespace:crow::detail
get_io_service	crow.h	/^        boost::asio::io_service& get_io_service()$/;"	f	struct:crow::SSLAdaptor
get_io_service	crow.h	/^        boost::asio::io_service& get_io_service()$/;"	f	struct:crow::SocketAdaptor
get_label	src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_label_v3	src/image.c	/^image get_label_v3(image **characters, char *string, int size)$/;"	f
get_labels	src/data.c	/^char **get_labels(char *filename)$/;"	f
get_labels_custom	src/data.c	/^char **get_labels_custom(char *filename, int *size)$/;"	f
get_layer_string	src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_list	crow.h	/^        std::vector<char*> get_list (const std::string& name) const$/;"	f	class:crow::query_string
get_loader_ref	crow.h	/^            inline std::function<std::string (std::string)>& get_loader_ref()$/;"	f	namespace:crow::mustache::detail
get_log_level_ref	crow.h	/^            static LogLevel& get_log_level_ref()$/;"	f	class:crow::logger
get_maxpool_delta	src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_metadata	src/option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_methods	crow.h	/^        uint32_t get_methods()$/;"	f	class:crow::BaseRule
get_middleware	crow.h	/^        T& get_middleware()$/;"	f	class:crow::Crow
get_net_color_depth	src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_color_depth() const {$/;"	f	class:Detector
get_net_height	src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_height() const {$/;"	f	class:Detector
get_net_width	src/yolo_v2_class.cpp	/^YOLODLL_API int Detector::get_net_width() const {$/;"	f	class:Detector
get_network_boxes	build/darknet/x64/darknet.py	/^get_network_boxes = lib.get_network_boxes$/;"	v
get_network_boxes	darknet.py	/^get_network_boxes = lib.get_network_boxes$/;"	v
get_network_boxes	src/network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num, int letter)$/;"	f
get_network_cost	src/network.c	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	src/network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	src/network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	src/network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	src/network.c	/^int get_network_input_size(network net)$/;"	f
get_network_layer	src/network.c	/^layer* get_network_layer(network* net, int i)$/;"	f
get_network_output	src/network.c	/^float *get_network_output(network net)$/;"	f
get_network_output_size	src/network.c	/^int get_network_output_size(network net)$/;"	f
get_next_batch	src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_parameter_tag	crow.h	/^        constexpr uint64_t get_parameter_tag(const_str s, unsigned p = 0)$/;"	f	namespace:crow::black_magic
get_parameter_tag_runtime	crow.h	/^        static inline uint64_t get_parameter_tag_runtime(const char* s, unsigned p = 0)$/;"	f	namespace:crow::black_magic
get_paths	src/data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	src/image.c	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	src/image.c	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_policy	src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	src/network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	src/data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	src/region_layer.c	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map)$/;"	f
get_region_detections	src/region_layer.c	/^void get_region_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, float tree_thresh, int relative, detection *dets)$/;"	f
get_regression_values	src/classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_rnn_data	src/rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	src/rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	src/rnn_vid.c	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_stream_fps	src/image.c	/^int get_stream_fps(CvCapture *cap, int cpp_video_capture)$/;"	f
get_stream_fps_cpp	src/http_stream.cpp	/^int get_stream_fps_cpp(CvCapture *cap) {$/;"	f
get_template_base_directory_ref	crow.h	/^            inline std::string& get_template_base_directory_ref()$/;"	f	namespace:crow::mustache::detail
get_type_str	crow.h	/^        inline const char* get_type_str(type t) {$/;"	f	namespace:crow::json
get_voc_results_file_template	build/darknet/x64/reval_voc_py3.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_voc_results_file_template	scripts/reval_voc.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_voc_results_file_template	scripts/reval_voc_py3.py	/^def get_voc_results_file_template(image_set, out_dir = 'results'):$/;"	f
get_wall_time	src/demo.c	/^double get_wall_time()$/;"	f
get_webcam_frame	src/http_stream.cpp	/^IplImage* get_webcam_frame(CvCapture *cap) {$/;"	f
get_weights	src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	src/convolutional_layer.c	/^size_t get_workspace_size(layer l){$/;"	f
get_yolo_box	src/yolo_layer.c	/^box get_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride)$/;"	f
get_yolo_detections	src/yolo_layer.c	/^int get_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets, int letter)$/;"	f
getcwd	src/unistd.h	31;"	d
getopt	src/getopt.c	/^getopt (argc, argv, optstring)$/;"	f
gettimeofday	src/gettimeofday.c	/^int gettimeofday(struct timeval *tv, struct timezone *tz)$/;"	f
good_bbox_vec_flags	src/yolo_v2_class.hpp	/^    std::vector<bool> good_bbox_vec_flags;$/;"	m	class:Tracker_optflow
gpu_count	src/yolo_v2_class.hpp	/^    const int gpu_count;$/;"	m	class:Tracker_optflow
gpu_id	src/yolo_v2_class.hpp	/^    const int gpu_id;$/;"	m	class:Tracker_optflow
gpu_index	src/cuda.c	/^int gpu_index = 0;$/;"	v
gpu_index	src/network.h	/^    int gpu_index;$/;"	m	struct:network
gradient	src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
grayscale_image	src/image.c	/^image grayscale_image(image im)$/;"	f
group	src/tree.h	/^    int *group;$/;"	m	struct:__anon45
group_offset	src/tree.h	/^    int *group_offset;$/;"	m	struct:__anon45
group_size	src/tree.h	/^    int *group_size;$/;"	m	struct:__anon45
groups	src/layer.h	/^    int groups;$/;"	m	struct:layer
groups	src/tree.h	/^    int groups;$/;"	m	struct:__anon45
gun_classifier	src/classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
h	src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
h	src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon34
h	src/data.h	/^    int h;$/;"	m	struct:load_args
h	src/data.h	/^    int w, h;$/;"	m	struct:__anon32
h	src/detector.c	/^    float w, h;$/;"	m	struct:__anon40	file:
h	src/image.h	/^	int h;$/;"	m	struct:__anon44
h	src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
h	src/network.h	/^    int h, w, c;$/;"	m	struct:network
h	src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
h	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon12::__anon13
h	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon23
h	src/yolo_v2_class.hpp	/^    int h;                        \/\/ height$/;"	m	struct:image_t
h	src/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
h2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon12::__anon13
h_C	crow.h	/^  , h_C$/;"	e	enum:header_states
h_CO	crow.h	/^  , h_CO$/;"	e	enum:header_states
h_CON	crow.h	/^  , h_CON$/;"	e	enum:header_states
h_connection	crow.h	/^  , h_connection$/;"	e	enum:header_states
h_connection_close	crow.h	/^  , h_connection_close$/;"	e	enum:header_states
h_connection_keep_alive	crow.h	/^  , h_connection_keep_alive$/;"	e	enum:header_states
h_content_length	crow.h	/^  , h_content_length$/;"	e	enum:header_states
h_cpu	src/layer.h	/^    float *h_cpu;$/;"	m	struct:layer
h_general	crow.h	/^  { h_general = 0$/;"	e	enum:header_states
h_gpu	src/layer.h	/^    float *h_gpu;$/;"	m	struct:layer
h_matching_connection	crow.h	/^  , h_matching_connection$/;"	e	enum:header_states
h_matching_connection_close	crow.h	/^  , h_matching_connection_close$/;"	e	enum:header_states
h_matching_connection_keep_alive	crow.h	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states
h_matching_content_length	crow.h	/^  , h_matching_content_length$/;"	e	enum:header_states
h_matching_proxy_connection	crow.h	/^  , h_matching_proxy_connection$/;"	e	enum:header_states
h_matching_transfer_encoding	crow.h	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states
h_matching_transfer_encoding_chunked	crow.h	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states
h_matching_upgrade	crow.h	/^  , h_matching_upgrade$/;"	e	enum:header_states
h_transfer_encoding	crow.h	/^  , h_transfer_encoding$/;"	e	enum:header_states
h_transfer_encoding_chunked	crow.h	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states
h_upgrade	crow.h	/^  , h_upgrade$/;"	e	enum:header_states
ha	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon12::__anon13
handle	crow.h	/^        void handle()$/;"	f	class:crow::Connection
handle	crow.h	/^        void handle(const request& req, response& res)$/;"	f	class:crow::Crow
handle	crow.h	/^        void handle(const request& req, response& res)$/;"	f	class:crow::Router
handle_fragment	crow.h	/^                void handle_fragment()$/;"	f	class:crow::websocket::Connection
handle_header	crow.h	/^        void handle_header()$/;"	f	class:crow::Connection
handle_upgrade	crow.h	/^		void handle_upgrade(const request& req, response& res, Adaptor&& adaptor)$/;"	f	class:crow::Router
handle_upgrade	crow.h	/^        virtual void handle_upgrade(const request&, response& res, SSLAdaptor&&) $/;"	f	class:crow::BaseRule
handle_upgrade	crow.h	/^        virtual void handle_upgrade(const request&, response& res, SocketAdaptor&&) $/;"	f	class:crow::BaseRule
handle_upgrade	crow.h	/^        void handle_upgrade(const request& req, response& res, Adaptor&& adaptor)$/;"	f	class:crow::Crow
handler	crow.h	/^                H1& handler;$/;"	m	struct:crow::detail::routing_handler_call_helper::call_params
handler_	crow.h	/^                typename handler_type_helper<ArgsWrapped...>::type handler_;$/;"	m	struct:crow::detail::routing_handler_call_helper::Wrapped
handler_	crow.h	/^        Handler* handler_;$/;"	m	class:crow::Connection
handler_	crow.h	/^        Handler* handler_;$/;"	m	class:crow::Server
handler_	crow.h	/^        Handler* handler_;$/;"	m	struct:crow::HTTPParser
handler_	crow.h	/^        std::function<void(const crow::request&, crow::response&, Args...)> handler_;$/;"	m	class:crow::TaggedRule
handler_type_helper	crow.h	/^                struct handler_type_helper$/;"	s	struct:crow::detail::routing_handler_call_helper::Wrapped
handler_type_helper	crow.h	/^                struct handler_type_helper<const request&, Args...>$/;"	s	struct:crow::detail::routing_handler_call_helper::Wrapped
handler_type_helper	crow.h	/^                struct handler_type_helper<const request&, response&, Args...>$/;"	s	struct:crow::detail::routing_handler_call_helper::Wrapped
hardtan_activate	src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
has	crow.h	/^            bool has(const char* str) const$/;"	f	class:crow::json::rvalue
has	crow.h	/^            bool has(const std::string& str) const$/;"	f	class:crow::json::rvalue
hasGPU	build/darknet/x64/darknet.py	/^        hasGPU = False$/;"	v
hasGPU	build/darknet/x64/darknet.py	/^hasGPU = True$/;"	v
hasGPU	darknet.py	/^        hasGPU = False$/;"	v
hasGPU	darknet.py	/^hasGPU = True$/;"	v
has_arg	src/getopt.h	/^  int has_arg;$/;"	m	struct:option
hd	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon12::__anon13
head	crow.h	/^        Node* head()$/;"	f	class:crow::Trie
head	crow.h	/^        const Node* head() const$/;"	f	class:crow::Trie
header_building_state	crow.h	/^        int header_building_state = 0;$/;"	m	struct:crow::HTTPParser
header_field	crow.h	/^        std::string header_field;$/;"	m	struct:crow::HTTPParser
header_state	crow.h	/^  unsigned int header_state : 8; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	crow.h	/^enum header_states$/;"	g
header_value	crow.h	/^        std::string header_value;$/;"	m	struct:crow::HTTPParser
headers	crow.h	/^        ci_map headers;$/;"	m	struct:crow::HTTPParser
headers	crow.h	/^        ci_map headers;$/;"	m	struct:crow::request
headers	crow.h	/^        ci_map headers;$/;"	m	struct:crow::response
height_in_cfg_file	build/darknet/x64/gen_anchors.py	/^height_in_cfg_file = 416.$/;"	v
height_in_cfg_file	scripts/gen_anchors.py	/^height_in_cfg_file = 416.$/;"	v
hidden	src/layer.h	/^    int hidden;$/;"	m	struct:layer
hierarchy	src/data.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	src/network.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy_predictions	src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
hold_out_matrix	src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon14
hsv_to_rgb	src/image.c	/^void hsv_to_rgb(image im)$/;"	f
hsz	src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon20
http_body_is_final	crow.h	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	crow.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	crow.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	crow.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser
http_errno	crow.h	/^enum http_errno {$/;"	g
http_errno_description	crow.h	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	crow.h	/^http_errno_name(enum http_errno err) {$/;"	f
http_host_state	crow.h	/^enum http_host_state$/;"	g
http_major	crow.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	crow.h	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	crow.h	/^enum http_method$/;"	g
http_method_str	crow.h	/^http_method_str (enum http_method m)$/;"	f
http_minor	crow.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_parse_host	crow.h	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f
http_parse_host_char	crow.h	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f
http_parser	crow.h	/^struct http_parser {$/;"	s
http_parser	crow.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	crow.h	/^inline size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_init	crow.h	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_parse_url	crow.h	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	crow.h	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	crow.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	crow.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_type	crow.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	crow.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	crow.h	/^enum http_parser_url_fields$/;"	g
http_parser_version	crow.h	/^http_parser_version(void) {$/;"	f
http_should_keep_alive	crow.h	/^http_should_keep_alive (const http_parser *parser)$/;"	f
hue	src/data.h	/^    float hue;$/;"	m	struct:load_args
hue	src/network.h	/^    float hue;$/;"	m	struct:network
hue_image	src/image.c	/^void hue_image(image im, float hue)$/;"	f
huff_ac	src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon12
huff_dc	src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon12
i	crow.h	/^            int64_t i() const$/;"	f	class:crow::json::rvalue
id	src/data.h	/^    int id;$/;"	m	struct:__anon34
id	src/stb_image.h	/^      int id;$/;"	m	struct:__anon12::__anon13
idata	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon18
idct_block_kernel	src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon12
ignore_thresh	src/layer.h	/^	float ignore_thresh;$/;"	m	struct:layer
im	src/data.h	/^    image *im;$/;"	m	struct:load_args
im2col_cpu	src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image	src/image.h	/^} image;$/;"	t	typeref:struct:__anon44
image_data_augmentation	src/http_stream.cpp	/^image image_data_augmentation(IplImage* ipl, int w, int h,$/;"	f
image_distance	src/image.c	/^image image_distance(image a, image b)$/;"	f
image_ids	build/darknet/x64/data/voc/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_ids	scripts/voc_label.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_ids	scripts/voc_label_difficult.py	/^    image_ids = open('VOCdevkit\/VOC%s\/ImageSets\/Main\/%s.txt'%(year, image_set)).read().strip().split()$/;"	v
image_index	src/detector.c	/^    int image_index;$/;"	m	struct:__anon39	file:
image_t	src/yolo_v2_class.hpp	/^struct image_t {$/;"	s
images	src/demo.c	/^static image images[FRAMES];$/;"	v	file:
images	src/yolo_v2_class.cpp	/^    image images[FRAMES];$/;"	m	struct:detector_gpu_t	file:
img_buffer	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon7
img_buffer_end	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon7
img_buffer_original	src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon7
img_buffer_original_end	src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon7
img_comp	src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon12	typeref:struct:__anon12::__anon13
img_h_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon12
img_mcu_h	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon12
img_mcu_w	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon12
img_mcu_x	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon12
img_mcu_y	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon12
img_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon7
img_name	scripts/get_openimages_dataset.py	/^                    img_name = bbox[0]$/;"	v
img_name	scripts/get_openimages_dataset.py	/^img_name = "111111111111"$/;"	v
img_out_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon7
img_v_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon12
img_x	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon7
img_y	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon7
in_img	src/demo.c	/^IplImage* in_img;$/;"	v
in_s	src/demo.c	/^static image in_s ;$/;"	v	file:
increment_layer	src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	crow.h	/^  unsigned int index : 8;        \/* index into current matcher *\/$/;"	m	struct:http_parser
index	src/box.c	/^    int index;$/;"	m	struct:__anon1	file:
index	src/layer.h	/^    int index;$/;"	m	struct:layer
index	src/network.h	/^    int index;$/;"	m	struct:network_state
index	src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
indexes	src/layer.h	/^    int *indexes;$/;"	m	struct:layer
indexes_gpu	src/layer.h	/^    int *indexes_gpu;$/;"	m	struct:layer
init	src/yolo_v2_class.cpp	/^int init(const char *configurationFilename, const char *weightsFilename, int gpu) $/;"	f
inline	src/cuda.h	5;"	d
inline	src/data.h	6;"	d
input	src/network.h	/^    float *input;$/;"	m	struct:network_state
input16_gpu	src/network.h	/^	float **input16_gpu;$/;"	m	struct:network
input_gate_layer	src/layer.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gpu	src/network.h	/^    float **input_gpu;$/;"	m	struct:network
input_h_layer	src/layer.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	src/layer.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layers	src/layer.h	/^    int   * input_layers;$/;"	m	struct:layer
input_r_layer	src/layer.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	src/layer.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_sizes	src/layer.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_state_layer	src/layer.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	src/layer.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
inputs	src/layer.h	/^    int inputs;$/;"	m	struct:layer
inputs	src/network.h	/^    int inputs;$/;"	m	struct:network
inputs	src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int16_t	crow.h	/^typedef __int16 int16_t;$/;"	t
int32_t	crow.h	/^typedef __int32 int32_t;$/;"	t
int64_t	crow.h	/^typedef __int64 int64_t;$/;"	t
int8_t	crow.h	/^typedef __int8 int8_t;$/;"	t
int_index	src/utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_params	crow.h	/^        std::vector<int64_t> int_params;$/;"	m	struct:crow::routing_params
int_to_alphanum	src/utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
internal_add_rule_object	crow.h	/^        void internal_add_rule_object(const std::string& rule, BaseRule* ruleObject)$/;"	f	class:crow::Router
invalid_template_exception	crow.h	/^            invalid_template_exception(const std::string& msg)$/;"	f	class:crow::mustache::invalid_template_exception
invalid_template_exception	crow.h	/^        class invalid_template_exception : public std::exception$/;"	c	namespace:crow::mustache
inverted	src/go.c	/^int inverted = 1;$/;"	v
io	src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon7
io_service_	crow.h	/^        asio::io_service io_service_;$/;"	m	class:crow::Server
io_service_pool_	crow.h	/^        std::vector<std::unique_ptr<asio::io_service>> io_service_pool_;$/;"	m	class:crow::Server
io_user_data	src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon7
ipl_images	src/demo.c	/^static IplImage* ipl_images[FRAMES];$/;"	v	file:
ipl_to_image	src/image.c	/^image ipl_to_image(IplImage* src)$/;"	f
ipl_to_image	src/yolo_v2_class.hpp	/^    static image_t ipl_to_image(IplImage* src)$/;"	f	class:Detector
isOpened	src/http_stream.cpp	/^    bool isOpened()$/;"	f	class:MJPGWriter
is_FIN	crow.h	/^                bool is_FIN()$/;"	f	class:crow::websocket::Connection
is_after_handle_arity_3_impl	crow.h	/^        struct is_after_handle_arity_3_impl$/;"	s	namespace:crow::detail
is_alive	crow.h	/^        bool is_alive()$/;"	f	struct:crow::response
is_alive_helper_	crow.h	/^            std::function<bool()> is_alive_helper_;$/;"	m	struct:crow::response
is_before_handle_arity_3_impl	crow.h	/^        struct is_before_handle_arity_3_impl$/;"	s	namespace:crow::detail
is_binary_	crow.h	/^                bool is_binary_;$/;"	m	class:crow::websocket::Connection
is_cached	crow.h	/^            bool is_cached() const$/;"	f	class:crow::json::rvalue
is_equ_n	crow.h	/^        constexpr bool is_equ_n(const_str a, unsigned ai, const_str b, unsigned bi, unsigned n)$/;"	f	namespace:crow::black_magic
is_equ_p	crow.h	/^        constexpr bool is_equ_p(const char* a, const char* b, unsigned n)$/;"	f	namespace:crow::black_magic
is_float	crow.h	/^        constexpr bool is_float(const_str s, unsigned i)$/;"	f	namespace:crow::black_magic
is_fma_avx	src/gemm.c	/^int is_fma_avx() {$/;"	f
is_int	crow.h	/^        constexpr bool is_int(const_str s, unsigned i)$/;"	f	namespace:crow::black_magic
is_network	src/parser.c	/^int is_network(section *s)$/;"	f
is_open	crow.h	/^        bool is_open()$/;"	f	struct:crow::SSLAdaptor
is_open	crow.h	/^        bool is_open()$/;"	f	struct:crow::SocketAdaptor
is_parameter_tag_compatible	crow.h	/^        static inline bool is_parameter_tag_compatible(uint64_t a, uint64_t b)$/;"	f	namespace:crow::black_magic
is_path	crow.h	/^        constexpr bool is_path(const_str s, unsigned i)$/;"	f	namespace:crow::black_magic
is_str	crow.h	/^        constexpr bool is_str(const_str s, unsigned i)$/;"	f	namespace:crow::black_magic
is_uint	crow.h	/^        constexpr bool is_uint(const_str s, unsigned i)$/;"	f	namespace:crow::black_magic
is_upgrade	crow.h	/^		bool is_upgrade() const$/;"	f	struct:crow::HTTPParser
is_valid	crow.h	/^        constexpr bool is_valid(const_str s, unsigned i = 0, int f = 0)$/;"	f	namespace:crow::black_magic
isatty	src/unistd.h	33;"	d
jar	crow.h	/^            std::unordered_map<std::string, std::string> jar;$/;"	m	struct:crow::CookieParser::context
jfif	src/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon12
jitter	src/data.h	/^    float jitter;$/;"	m	struct:load_args
jitter	src/layer.h	/^    float jitter;$/;"	m	struct:layer
joint	src/layer.h	/^    int joint;$/;"	m	struct:layer
json	crow.h	/^    namespace json$/;"	n	namespace:crow
json_mode	crow.h	/^            void json_mode()$/;"	f	struct:crow::response
json_value	crow.h	/^        json::wvalue json_value;$/;"	m	struct:crow::response
kappa	src/layer.h	/^    float kappa;$/;"	m	struct:layer
key	crow.h	/^            const detail::r_string& key() const$/;"	f	class:crow::json::rvalue
key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon27
key_	crow.h	/^            detail::r_string key_;$/;"	m	class:crow::json::rvalue
key_value_pairs_	crow.h	/^        std::vector<char*> key_value_pairs_;$/;"	m	class:crow::query_string
keys	crow.h	/^            std::vector<std::string> keys() const $/;"	f	class:crow::json::wvalue
kf	src/yolo_console_dll.cpp	/^    cv::KalmanFilter kf;$/;"	m	class:track_kalman	file:
kmeans	build/darknet/x64/gen_anchors.py	/^def kmeans(X,centroids,eps,anchor_file):$/;"	f
kmeans	scripts/gen_anchors.py	/^def kmeans(X,centroids,eps,anchor_file):$/;"	f
kmeans_expectation	scripts/kmeansiou.c	/^int kmeans_expectation(matrix data, int *assignments, matrix centers)$/;"	f
kmeans_maximization	scripts/kmeansiou.c	/^void kmeans_maximization(matrix data, int *assignments, matrix centers)$/;"	f
kvp	src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon27
l	crow.h	/^            std::unique_ptr<std::vector<wvalue>> l;$/;"	m	class:crow::json::wvalue
l1_cpu	src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l_	crow.h	/^            std::unique_ptr<rvalue[]> l_;$/;"	m	class:crow::json::rvalue
label_classifier	src/classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
labels	src/data.h	/^    char **labels;$/;"	m	struct:load_args
last_element_type	crow.h	/^        struct last_element_type$/;"	s	namespace:crow::black_magic
last_element_type	crow.h	/^        struct last_element_type<>$/;"	s	namespace:crow::black_magic
last_nonopt	src/getopt.c	/^static int last_nonopt;$/;"	v	file:
last_showed_frames_ago	src/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
layer	src/layer.h	/^struct layer{$/;"	s
layer	src/layer.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layers	src/network.h	/^    layer *layers;$/;"	m	struct:network
leaf	src/tree.h	/^    int *leaf;$/;"	m	struct:__anon45
leaky_activate	src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	src/layer.h	/^	float learning_rate;$/;"	m	struct:__anon37
learning_rate	src/network.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate_policy	src/network.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon30
left	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon34
legal_go	src/go.c	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
len	crow.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon46
length	src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon17
letter_box	src/demo.c	/^static int letter_box = 0;$/;"	v	file:
letterbox_image	build/darknet/x64/darknet.py	/^letterbox_image = lib.letterbox_image$/;"	v
letterbox_image	darknet.py	/^letterbox_image = lib.letterbox_image$/;"	v
letterbox_image	src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
level_	crow.h	/^            LogLevel level_;$/;"	m	class:crow::logger
lflags	src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon23
lhtan_activate	src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
lib	build/darknet/x64/darknet.py	/^            lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^            lib = CDLL(winNoGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^        lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	build/darknet/x64/darknet.py	/^    lib = CDLL(".\/darknet.so", RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^            lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^            lib = CDLL(winNoGPUdll, RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^        lib = CDLL(winGPUdll, RTLD_GLOBAL)$/;"	v
lib	darknet.py	/^    lib = CDLL(".\/darknet.so", RTLD_GLOBAL)$/;"	v
line0	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon14
line1	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon14
line_size	src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon23
linear_activate	src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linebuf	src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon12::__anon13
lines	build/darknet/x64/reval_voc_py3.py	/^        lines = f.readlines()$/;"	v
lines	scripts/reval_voc.py	/^        lines = f.readlines()$/;"	v
lines	scripts/reval_voc_py3.py	/^        lines = f.readlines()$/;"	v
list	src/list.h	/^typedef struct list{$/;"	s
list	src/list.h	/^} list;$/;"	t	typeref:struct:list
list_file	build/darknet/x64/data/voc/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_file	scripts/voc_label.py	/^    list_file = open('%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_file	scripts/voc_label_difficult.py	/^    list_file = open('difficult_%s_%s.txt'%(year, image_set), 'w')$/;"	v
list_insert	src/list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	src/list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	src/list.c	/^void **list_to_array(list *l)$/;"	f
load	crow.h	/^        inline rvalue load(const char* data)$/;"	f	namespace:crow::json
load	crow.h	/^        inline rvalue load(const char* data, size_t size)$/;"	f	namespace:crow::json
load	crow.h	/^        inline rvalue load(const std::string& str)$/;"	f	namespace:crow::json
load	crow.h	/^        inline template_t load(const std::string& filename)$/;"	f	namespace:crow::mustache
load_all_cifar10	src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	src/image.c	/^image **load_alphabet()$/;"	f
load_args	src/data.h	/^typedef struct load_args{$/;"	s
load_args	src/data.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_batchnorm_weights	src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	src/data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	src/data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_captcha	src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int c, int boxes, int classes, int use_flip, float jitter, float hue, float saturation, float exposure, int small_object)$/;"	f
load_data_in_thread	src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	src/data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	src/go.c	/^moves load_go_moves(char *filename)$/;"	f
load_image	build/darknet/x64/darknet.py	/^load_image = lib.load_image_color$/;"	v
load_image	darknet.py	/^load_image = lib.load_image_color$/;"	v
load_image	src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image	src/yolo_v2_class.cpp	/^YOLODLL_API image_t Detector::load_image(std::string image_filename)$/;"	f	class:Detector
load_image_augment_paths	src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int use_flip, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_image_color	src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	src/image.c	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_image_stb	src/yolo_v2_class.cpp	/^static image load_image_stb(char *filename, int channels)$/;"	f	file:
load_jpeg_image	src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_meta	build/darknet/x64/darknet.py	/^load_meta = lib.get_metadata$/;"	v
load_meta	darknet.py	/^load_meta = lib.get_metadata$/;"	v
load_net	build/darknet/x64/darknet.py	/^load_net = lib.load_network$/;"	v
load_net	darknet.py	/^load_net = lib.load_network$/;"	v
load_net_custom	build/darknet/x64/darknet.py	/^load_net_custom = lib.load_network_custom$/;"	v
load_net_custom	darknet.py	/^load_net_custom = lib.load_network_custom$/;"	v
load_network	src/network.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_custom	src/network.c	/^network *load_network_custom(char *cfg, char *weights, int clear, int batch)$/;"	f
load_nocopy_internal	crow.h	/^        inline rvalue load_nocopy_internal(char* data, size_t size)$/;"	f	namespace:crow::json
load_tags_paths	src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_text	crow.h	/^        inline std::string load_text(const std::string& filename)$/;"	f	namespace:crow::mustache
load_thread	src/data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	src/data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	src/parser.c	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_layer	src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f
lock	3rdparty/include/pthread.h	/^  void *       lock;$/;"	m	struct:pthread_once_t_
log	src/layer.h	/^    int log;$/;"	m	struct:layer
log_parser	scripts/log_parser/log_parser.py	/^def log_parser(args):$/;"	f
logger	crow.h	/^            logger(std::string prefix, LogLevel level) : level_(level) {$/;"	f	class:crow::logger
logger	crow.h	/^    class logger {$/;"	c	namespace:crow
loggy_activate	src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_gradient	src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_gradient	src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logit	src/region_layer.c	/^float logit(float x)$/;"	f
loglevel	crow.h	/^        self_t& loglevel(crow::LogLevel level)$/;"	f	class:crow::Crow
lpal	src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon23
lremain_	crow.h	/^            uint16_t lremain_;$/;"	m	class:crow::json::rvalue
lseek	src/unistd.h	34;"	d
lsize_	crow.h	/^            uint32_t lsize_;$/;"	m	class:crow::json::rvalue
m	src/data.h	/^    int m;$/;"	m	struct:load_args
m	src/layer.h	/^    float *m;$/;"	m	struct:layer
m_block	crow.h	/^		uint8_t m_block[64];$/;"	m	class:sha1::SHA1
m_blockByteIndex	crow.h	/^		size_t m_blockByteIndex;$/;"	m	class:sha1::SHA1
m_byteCount	crow.h	/^		size_t m_byteCount;$/;"	m	class:sha1::SHA1
m_digest	crow.h	/^		digest32_t m_digest;$/;"	m	class:sha1::SHA1
m_gpu	src/layer.h	/^    float *m_gpu;$/;"	m	struct:layer
ma	src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon20
mag_array	src/utils.c	/^float mag_array(float *a, int n)$/;"	f
main	build/darknet/x64/gen_anchors.py	/^def main(argv):$/;"	f
main	crow.cpp	/^int main(int argc, char* argv[])$/;"	f
main	scripts/gen_anchors.py	/^def main(argv):$/;"	f
main	scripts/kmeansiou.c	/^int main(int argc, char *argv[])$/;"	f
main	src/darknet.c	/^int main(int argc, char **argv)$/;"	f
main	src/getopt.c	/^main (argc, argv)$/;"	f
main	src/yolo_console_dll.cpp	/^int main(int argc, char *argv[])$/;"	f
make_activation_layer	src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	src/connected_layer.c	/^connected_layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_convolutional_layer	src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	src/deconvolutional_layer.c	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_empty_image	src/yolo_v2_class.hpp	/^    static image_t make_empty_image(int w, int h, int c)$/;"	f	class:Detector
make_gru_layer	src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_image	build/darknet/x64/darknet.py	/^make_image = lib.make_image$/;"	v
make_image	darknet.py	/^make_image = lib.make_image$/;"	v
make_image	src/image.c	/^image make_image(int w, int h, int c)$/;"	f
make_image_custom	src/yolo_v2_class.hpp	/^    static image_t make_image_custom(int w, int h, int c)$/;"	f	class:Detector
make_labels	build/darknet/x64/data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_labels	data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_list	src/list.c	/^list *make_list()$/;"	f
make_local_layer	src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_matrix	scripts/kmeansiou.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_matrix	src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	src/network.c	/^network make_network(int n)$/;"	f
make_network_boxes	build/darknet/x64/darknet.py	/^make_network_boxes = lib.make_network_boxes$/;"	v
make_network_boxes	darknet.py	/^make_network_boxes = lib.make_network_boxes$/;"	v
make_network_boxes	src/network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_normalization_layer	src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	src/region_layer.c	/^region_layer make_region_layer(int batch, int w, int h, int n, int classes, int coords, int max_boxes)$/;"	f
make_reorg_layer	src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_reorg_old_layer	src/reorg_old_layer.c	/^layer make_reorg_old_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_upsample_layer	src/upsample_layer.c	/^layer make_upsample_layer(int batch, int w, int h, int c, int stride)$/;"	f
make_yolo_layer	src/yolo_layer.c	/^layer make_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes, int max_boxes)$/;"	f
makes_safe_go	src/go.c	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	src/utils.c	/^void malloc_error()$/;"	f
map	src/layer.h	/^    int  *map;$/;"	m	struct:layer
marker	src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon12
mask	src/box.h	/^	float *mask;$/;"	m	struct:detection
mask	src/layer.h	/^	int *mask;$/;"	m	struct:layer
mask_	crow.h	/^                uint32_t mask_;$/;"	m	class:crow::websocket::Connection
mask_scale	src/layer.h	/^	float mask_scale;$/;"	m	struct:layer
master	src/http_stream.cpp	/^    fd_set master;$/;"	m	class:MJPGWriter	file:
mat_obj	src/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_resized_obj	src/yolo_v2_class.hpp	/^        cv::Mat mat_obj, mat_resized_obj;$/;"	m	struct:preview_boxes_t::preview_box_track_t
mat_to_image	src/yolo_v2_class.hpp	/^    static std::shared_ptr<image_t> mat_to_image(cv::Mat img_src)$/;"	f	class:Detector
mat_to_image_resize	src/yolo_v2_class.hpp	/^    std::shared_ptr<image_t> mat_to_image_resize(cv::Mat mat) const$/;"	f	class:Detector
matrix	scripts/kmeansiou.c	/^typedef struct matrix{$/;"	s	file:
matrix	scripts/kmeansiou.c	/^} matrix;$/;"	t	typeref:struct:matrix	file:
matrix	src/matrix.h	/^typedef struct matrix{$/;"	s
matrix	src/matrix.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix_add_matrix	src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
max_batches	src/network.h	/^    int max_batches;$/;"	m	struct:network
max_boxes	src/layer.h	/^    int max_boxes;$/;"	m	struct:layer
max_crop	src/network.h	/^    int max_crop;$/;"	m	struct:network
max_index	src/utils.c	/^int max_index(float *a, int n)$/;"	f
max_input16_size	src/network.h	/^	size_t *max_input16_size;$/;"	m	struct:network
max_output16_size	src/network.h	/^	size_t *max_output16_size;$/;"	m	struct:network
max_x	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon23
max_y	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon23
maxcode	src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon15
maxcode	src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon11
maxfd	src/http_stream.cpp	/^    SOCKET maxfd;$/;"	m	class:MJPGWriter	file:
maxpool_layer	src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mb	src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon20
mean	src/layer.h	/^    float * mean;$/;"	m	struct:layer
mean_array	src/utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	src/layer.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta_cpu	src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	src/layer.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_gpu	src/layer.h	/^    float * mean_gpu;$/;"	m	struct:layer
meas_size	src/yolo_console_dll.cpp	/^    int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
message_	crow.h	/^                std::string message_;$/;"	m	class:crow::websocket::Connection
message_handler_	crow.h	/^				std::function<void(crow::websocket::connection&, const std::string&, bool)> message_handler_;$/;"	m	class:crow::websocket::Connection
message_handler_	crow.h	/^		std::function<void(crow::websocket::connection&, const std::string&, bool)> message_handler_;$/;"	m	class:crow::WebSocketRule
metaMain	build/darknet/x64/darknet.py	/^metaMain = None$/;"	v
metaMain	darknet.py	/^metaMain = None$/;"	v
metadata	src/option_list.h	/^} metadata;$/;"	t	typeref:struct:__anon28
method	crow.h	/^        HTTPMethod method;$/;"	m	struct:crow::request
method	crow.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser
method_name	crow.h	/^    inline std::string method_name(HTTPMethod method)$/;"	f	namespace:crow
methods	crow.h	/^        self_t& methods(HTTPMethod method)$/;"	f	struct:crow::RuleParameterTraits
methods	crow.h	/^        self_t& methods(HTTPMethod method, MethodArgs ... args_method)$/;"	f	struct:crow::RuleParameterTraits
mg	src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon20
middleware_call_helper	crow.h	/^        bool middleware_call_helper(Container& \/*middlewares*\/, request& \/*req*\/, response& \/*res*\/, Context& \/*ctx*\/)$/;"	f	namespace:crow::detail
middleware_call_helper	crow.h	/^        bool middleware_call_helper(Container& middlewares, request& req, response& res, Context& ctx)$/;"	f	namespace:crow::detail
middlewares_	crow.h	/^        std::tuple<Middlewares...> middlewares_;$/;"	m	class:crow::Crow
middlewares_	crow.h	/^        std::tuple<Middlewares...>* middlewares_;$/;"	m	class:crow::Connection
middlewares_	crow.h	/^        std::tuple<Middlewares...>* middlewares_;$/;"	m	class:crow::Server
min	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
min_crop	src/network.h	/^    int min_crop;$/;"	m	struct:network
mini_header_	crow.h	/^                uint16_t mini_header_;$/;"	m	class:crow::websocket::Connection
mode_t	3rdparty/include/semaphore.h	/^typedef unsigned int mode_t;$/;"	t
model	scripts/kmeansiou.c	/^} model;$/;"	t	typeref:struct:__anon52	file:
momentum	src/layer.h	/^	float momentum;$/;"	m	struct:__anon37
momentum	src/network.h	/^    float momentum;$/;"	m	struct:network
move_go	src/go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
moves	src/go.c	/^} moves;$/;"	t	typeref:struct:__anon24	file:
mr	src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon20
mse_array	src/utils.c	/^float mse_array(float *a, int n)$/;"	f
msg	crow.h	/^            std::string msg;$/;"	m	class:crow::mustache::invalid_template_exception
mul_cpu	src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
multithreaded	crow.h	/^        self_t& multithreaded()$/;"	f	class:crow::Crow
mustache	crow.h	/^    namespace mustache$/;"	n	namespace:crow
mutex	src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
my_index	src/getopt.c	/^my_index (str, chr)$/;"	f	file:
my_index	src/getopt.c	202;"	d	file:
n	src/data.h	/^    int n;$/;"	m	struct:load_args
n	src/go.c	/^    int n;$/;"	m	struct:__anon24	file:
n	src/layer.h	/^    int n;$/;"	m	struct:layer
n	src/network.h	/^    int n;$/;"	m	struct:network
n	src/tree.h	/^    int n;$/;"	m	struct:__anon45
name	src/getopt.h	/^  const char *name;$/;"	m	struct:option
name	src/tree.h	/^    char **name;$/;"	m	struct:__anon45
name_	crow.h	/^        std::string name_;$/;"	m	class:crow::BaseRule
names	src/option_list.h	/^	char **names;$/;"	m	struct:__anon28
net	src/compare.c	/^    network net;$/;"	m	struct:__anon29	file:
net	src/demo.c	/^static network net;$/;"	v	file:
net	src/network.h	/^    network net;$/;"	m	struct:network_state
net	src/parser.c	/^    network net;$/;"	m	struct:size_params	file:
net	src/yolo_v2_class.cpp	/^    network net;$/;"	m	struct:detector_gpu_t	file:
netMain	build/darknet/x64/darknet.py	/^netMain = None$/;"	v
netMain	darknet.py	/^netMain = None$/;"	v
network	src/network.h	/^typedef struct network{$/;"	s
network	src/network.h	/^} network;$/;"	t	typeref:struct:network
network_accuracies	src/network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	src/network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	src/network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_height	src/network.c	/^int network_height(network *net) { return net->h; }$/;"	f
network_predict	build/darknet/x64/darknet.py	/^network_predict = lib.network_predict$/;"	v
network_predict	darknet.py	/^network_predict = lib.network_predict$/;"	v
network_predict	src/network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	src/network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	src/network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_image	src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_state	src/network.h	/^typedef struct network_state {$/;"	s
network_state	src/network.h	/^} network_state;$/;"	t	typeref:struct:network_state
network_width	src/network.c	/^int network_width(network *net) { return net->w; }$/;"	f
new_node	crow.h	/^        unsigned new_node()$/;"	f	class:crow::Trie
new_result	src/yolo_console_dll.cpp	/^    void new_result(std::vector<bbox_t> new_result_vec, float new_time) {$/;"	f	class:extrapolate_coords_t
new_rule_dynamic	crow.h	/^        DynamicRule& new_rule_dynamic(const std::string& rule)$/;"	f	class:crow::Router
new_rule_tagged	crow.h	/^        typename black_magic::arguments<N>::type::template rebind<TaggedRule>& new_rule_tagged(const std::string& rule)$/;"	f	class:crow::Router
next	src/list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nextchar	src/getopt.c	/^static char *nextchar;$/;"	v	file:
nh	src/data.h	/^    int nh;$/;"	m	struct:load_args
nind	src/go.c	14;"	d	file:
nms	src/yolo_v2_class.hpp	/^    float nms = .4;$/;"	m	class:Detector
nms_comparator	src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nms_comparator_v3	src/box.c	/^int nms_comparator_v3(const void *pa, const void *pb)$/;"	f
no_argument	src/getopt.h	97;"	d
noadjust	src/layer.h	/^    int noadjust;$/;"	m	struct:layer
node	src/list.h	/^typedef struct node{$/;"	s
node	src/list.h	/^} node;$/;"	t	typeref:struct:node
nodes_	crow.h	/^        std::vector<Node> nodes_;$/;"	m	class:crow::Trie
noexcept	crow.h	3325;"	d
noi	src/go.c	/^int noi = 1;$/;"	v
nomore	src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon12
nonoption_flags_len	src/getopt.c	/^static int nonoption_flags_len;$/;"	v	file:
nonoption_flags_max_len	src/getopt.c	/^static int nonoption_flags_max_len;$/;"	v	file:
noobject_scale	src/layer.h	/^    float noobject_scale;$/;"	m	struct:layer
normDstTensorDesc	src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normDstTensorDescF16	src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normTensorDesc	src/layer.h	/^	cudnnTensorDescriptor_t normTensorDesc, normDstTensorDesc, normDstTensorDescF16;$/;"	m	struct:layer
normalize_array	src/utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	src/data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	src/image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	src/image.c	/^void normalize_image2(image p)$/;"	f
normalize_layer	src/darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	src/darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
norms	src/layer.h	/^    float * norms;$/;"	m	struct:layer
norms_gpu	src/layer.h	/^    float * norms_gpu;$/;"	m	struct:layer
nread	crow.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
num_bits	src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon16
num_boxes	src/data.h	/^    int *num_boxes;$/;"	m	struct:__anon32
num_boxes	src/data.h	/^    int num_boxes;$/;"	m	struct:load_args
num_channels	src/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon9
num_detections	src/network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_steps	src/network.h	/^    int num_steps;$/;"	m	struct:network
nw	src/data.h	/^    int nw;$/;"	m	struct:load_args
o	crow.h	/^            std::unique_ptr<std::unordered_map<std::string, wvalue>> o;$/;"	m	class:crow::json::wvalue
obj	3rdparty/include/pthread.h	/^          void    *       obj;$/;"	m	class:PThreadCleanup
obj_id	build/darknet/YoloWrapper.cs	/^            public UInt32 obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	f	struct:Darknet.YoloWrapper.bbox_t
obj_id	src/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
obj_id	src/yolo_v2_class.hpp	/^    unsigned int obj_id;        \/\/ class of object - from range [0, classes-1]$/;"	m	struct:bbox_t
obj_id_to_color	src/yolo_v2_class.hpp	/^static cv::Scalar obj_id_to_color(int obj_id) {$/;"	f
object_scale	src/layer.h	/^    float object_scale;$/;"	m	struct:layer
objectness	src/box.h	/^	float objectness;$/;"	m	struct:detection
objectness	src/layer.h	/^    int objectness;$/;"	m	struct:layer
objects_names_from_file	crow.cpp	/^std::vector<std::string> objects_names_from_file(std::string const filename) {$/;"	f
objects_names_from_file	src/yolo_console_dll.cpp	/^std::vector<std::string> objects_names_from_file(std::string const filename) {$/;"	f
off	crow.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon46
offset	src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon20
old_dx_vec	src/yolo_console_dll.cpp	/^    std::vector<float> old_dx_vec, old_dy_vec;$/;"	m	class:extrapolate_coords_t	file:
old_dy_vec	src/yolo_console_dll.cpp	/^    std::vector<float> old_dx_vec, old_dy_vec;$/;"	m	class:extrapolate_coords_t	file:
old_out	src/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon23
old_result_vec	src/yolo_console_dll.cpp	/^    std::vector<bbox_t> old_result_vec;$/;"	m	class:extrapolate_coords_t	file:
on_body	crow.h	/^        static int on_body(http_parser* self_, const char* at, size_t length)$/;"	f	struct:crow::HTTPParser
on_body	crow.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_header_field	crow.h	/^        static int on_header_field(http_parser* self_, const char* at, size_t length)$/;"	f	struct:crow::HTTPParser
on_header_field	crow.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_value	crow.h	/^        static int on_header_value(http_parser* self_, const char* at, size_t length)$/;"	f	struct:crow::HTTPParser
on_header_value	crow.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_headers_complete	crow.h	/^        static int on_headers_complete(http_parser* self_)$/;"	f	struct:crow::HTTPParser
on_headers_complete	crow.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_message_begin	crow.h	/^        static int on_message_begin(http_parser* self_)$/;"	f	struct:crow::HTTPParser
on_message_begin	crow.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_complete	crow.h	/^        static int on_message_complete(http_parser* self_)$/;"	f	struct:crow::HTTPParser
on_message_complete	crow.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_status	crow.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings
on_tick	crow.h	/^        void on_tick()$/;"	f	class:crow::Server
on_url	crow.h	/^        static int on_url(http_parser* self_, const char* at, size_t length)$/;"	f	struct:crow::HTTPParser
on_url	crow.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
onaccept	crow.h	/^		self_t& onaccept(Func f)$/;"	f	class:crow::WebSocketRule
onclose	crow.h	/^		self_t& onclose(Func f)$/;"	f	class:crow::WebSocketRule
one_hot_encode	src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
one_off_detections	src/yolo_v2_class.hpp	/^    bool const one_off_detections;$/;"	m	class:preview_boxes_t
oneoff	src/darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
onerror	crow.h	/^		self_t& onerror(Func f)$/;"	f	class:crow::WebSocketRule
onlyforward	src/layer.h	/^    int onlyforward;$/;"	m	struct:layer
onmessage	crow.h	/^		self_t& onmessage(Func f)$/;"	f	class:crow::WebSocketRule
onopen	crow.h	/^		self_t& onopen(Func f)$/;"	f	class:crow::WebSocketRule
opcode	crow.h	/^                int opcode()$/;"	f	class:crow::websocket::Connection
open	src/http_stream.cpp	/^    bool open(int port)$/;"	f	class:MJPGWriter
open_handler_	crow.h	/^				std::function<void(crow::websocket::connection&)> open_handler_;$/;"	m	class:crow::websocket::Connection
open_handler_	crow.h	/^		std::function<void(crow::websocket::connection&)> open_handler_;$/;"	m	class:crow::WebSocketRule
operations	src/darknet.c	/^void operations(char *cfgfile)$/;"	f
operator !=	crow.h	/^        inline bool operator != (const rvalue& l, const std::string& r)$/;"	f	namespace:crow::json
operator !=	crow.h	/^        inline bool operator != (const rvalue& l, double r)$/;"	f	namespace:crow::json
operator !=	crow.h	/^        inline bool operator != (const std::string& l, const rvalue& r)$/;"	f	namespace:crow::json
operator !=	crow.h	/^        inline bool operator != (double l, const rvalue& r)$/;"	f	namespace:crow::json
operator ()	crow.h	/^                    void operator()(const request& req, response& res, Args... args)$/;"	f	struct:crow::detail::routing_handler_call_helper::Wrapped::req_handler_wrapper
operator ()	crow.h	/^                void operator()(F cparams)$/;"	f	struct:crow::detail::routing_handler_call_helper::call
operator ()	crow.h	/^                void operator()(const request& req, response& res, const routing_params& params)$/;"	f	struct:crow::detail::routing_handler_call_helper::Wrapped
operator ()	crow.h	/^        bool operator()(const std::string& l, const std::string& r) const$/;"	f	struct:crow::ci_key_eq
operator ()	crow.h	/^        operator()(Func&& f)$/;"	f	class:crow::TaggedRule
operator ()	crow.h	/^        size_t operator()(const std::string& key) const$/;"	f	struct:crow::ci_hash
operator ()	crow.h	/^        void operator()(Func f)$/;"	f	class:crow::DynamicRule
operator ()	crow.h	/^        void operator()(std::string name, Func&& f)$/;"	f	class:crow::DynamicRule
operator ()	crow.h	/^        void operator()(std::string name, Func&& f)$/;"	f	class:crow::TaggedRule
operator <	crow.h	/^            inline bool operator < (const r_string& l, const r_string& r)$/;"	f	namespace:crow::json::detail
operator <	crow.h	/^            inline bool operator < (const r_string& l, const std::string& r)$/;"	f	namespace:crow::json::detail
operator <<	crow.h	/^                friend std::ostream& operator << (std::ostream& os, const r_string& s)$/;"	f	struct:crow::json::detail::r_string
operator <<	crow.h	/^            friend std::ostream& operator <<(std::ostream& os, const rvalue& r)$/;"	f	class:crow::json::rvalue
operator <<	crow.h	/^            logger& operator<<(T const &value) {$/;"	f	class:crow::logger
operator <<	crow.h	/^        friend std::ostream& operator<<(std::ostream& os, const query_string& qs)$/;"	f	class:crow::query_string
operator =	crow.h	/^		const SHA1& operator = (const SHA1& s) {$/;"	f	class:sha1::SHA1
operator =	crow.h	/^                r_string& operator = (const r_string& r)$/;"	f	struct:crow::json::detail::r_string
operator =	crow.h	/^                r_string& operator = (r_string&& r)$/;"	f	struct:crow::json::detail::r_string
operator =	crow.h	/^            rvalue& operator = (const rvalue& r)$/;"	f	class:crow::json::rvalue
operator =	crow.h	/^            wvalue& operator = (bool value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (double value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (int value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (long long value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (long value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (short value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (std::nullptr_t)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (unsigned int value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (unsigned long long value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (unsigned long value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (unsigned short value)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator = (wvalue&& r)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator=(const char* str)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator=(const std::string& str)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator=(const std::vector<T>& v)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^            wvalue& operator=(std::vector<wvalue>&& v)$/;"	f	class:crow::json::wvalue
operator =	crow.h	/^        query_string& operator = (const query_string& qs)$/;"	f	class:crow::query_string
operator =	crow.h	/^        query_string& operator = (query_string&& qs)$/;"	f	class:crow::query_string
operator ==	crow.h	/^            inline bool operator == (const r_string& l, const r_string& r)$/;"	f	namespace:crow::json::detail
operator ==	crow.h	/^            inline bool operator == (const r_string& l, const std::string& r)$/;"	f	namespace:crow::json::detail
operator ==	crow.h	/^        inline bool operator == (const rvalue& l, const std::string& r)$/;"	f	namespace:crow::json
operator ==	crow.h	/^        inline bool operator == (const rvalue& l, double r)$/;"	f	namespace:crow::json
operator ==	crow.h	/^        inline bool operator == (const std::string& l, const rvalue& r)$/;"	f	namespace:crow::json
operator ==	crow.h	/^        inline bool operator == (double l, const rvalue& r)$/;"	f	namespace:crow::json
operator >	crow.h	/^            inline bool operator > (const r_string& l, const std::string& r)$/;"	f	namespace:crow::json::detail
operator []	crow.h	/^            const rvalue& operator[](const char* str) const$/;"	f	class:crow::json::rvalue
operator []	crow.h	/^            const rvalue& operator[](const std::string& str) const$/;"	f	class:crow::json::rvalue
operator []	crow.h	/^            const rvalue& operator[](int index) const$/;"	f	class:crow::json::rvalue
operator []	crow.h	/^            const rvalue& operator[](size_t index) const$/;"	f	class:crow::json::rvalue
operator []	crow.h	/^            constexpr char operator[]( unsigned i ) const { $/;"	f	class:crow::black_magic::const_str
operator []	crow.h	/^            wvalue& operator[](const std::string& str)$/;"	f	class:crow::json::wvalue
operator []	crow.h	/^            wvalue& operator[](unsigned index)$/;"	f	class:crow::json::wvalue
operator const char *	crow.h	/^            constexpr operator const char *() const { $/;"	f	class:crow::black_magic::const_str
operator int	crow.h	/^            explicit operator int() const$/;"	f	class:crow::json::rvalue
operator int64_t	crow.h	/^            explicit operator int64_t() const$/;"	f	class:crow::json::rvalue
operator std::string	crow.h	/^                operator std::string () const$/;"	f	struct:crow::json::detail::r_string
operator uint64_t	crow.h	/^            explicit operator uint64_t() const$/;"	f	class:crow::json::rvalue
optarg	src/getopt.c	/^char *optarg;$/;"	v
opterr	src/getopt.c	/^int opterr = 1;$/;"	v
optimize	crow.h	/^        void optimize()$/;"	f	class:crow::Trie
optimizeNode	crow.h	/^        void optimizeNode(Node* node)$/;"	f	class:crow::Trie
optimize_picture	src/nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
optind	src/getopt.c	/^int optind = 1;$/;"	v
option	src/getopt.h	/^struct option$/;"	s
option_find	src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	src/option_list.c	/^void option_unused(list *l)$/;"	f
optional_argument	src/getopt.h	99;"	d
options	src/parser.c	/^    list *options;$/;"	m	struct:__anon43	file:
optopt	src/getopt.c	/^int optopt = '?';$/;"	v
order	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon12
ordering	src/getopt.c	/^} ordering;$/;"	v	typeref:enum:__anon3	file:
out	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon18
out	src/stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon23
out_c	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_file	scripts/get_openimages_dataset.py	/^                    out_file = open("destination_path\\\\%s.txt"%bbox[0], 'w')$/;"	v
out_h	src/data.h	/^    int out_h;$/;"	m	struct:load_args
out_h	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	src/data.h	/^	int out_w;$/;"	m	struct:load_args
out_w	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
output	src/layer.h	/^    float * output;$/;"	m	struct:layer
output	src/network.h	/^    float *output;$/;"	m	struct:network
output16_gpu	src/network.h	/^	float **output16_gpu;$/;"	m	struct:network
output_dir	build/darknet/x64/reval_voc_py3.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_dir	scripts/reval_voc.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_dir	scripts/reval_voc_py3.py	/^    output_dir = os.path.abspath(args.output_dir[0])$/;"	v
output_gpu	src/layer.h	/^    float * output_gpu;$/;"	m	struct:layer
output_layer	src/layer.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
outputs	src/layer.h	/^    int outputs;$/;"	m	struct:layer
outputs	src/network.h	/^    int outputs;$/;"	m	struct:network
overlap	src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
p	3rdparty/include/pthread.h	/^    void * p;                   \/* Pointer to actual object *\/$/;"	m	struct:__anon48
p	src/detector.c	/^    float p;$/;"	m	struct:__anon39	file:
pad	src/layer.h	/^    int pad;$/;"	m	struct:layer
pal	src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon23
parameter_tag	crow.h	/^        struct parameter_tag$/;"	s	namespace:crow::black_magic
params	crow.h	/^                const routing_params& params;$/;"	m	struct:crow::detail::routing_handler_call_helper::call_params
parent	src/tree.h	/^    int *parent;$/;"	m	struct:__anon45
parse	crow.h	/^            void parse()$/;"	f	class:crow::mustache::template_t
parse	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon23
parse_activation	src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_args	build/darknet/x64/reval_voc_py3.py	/^def parse_args():$/;"	f
parse_args	scripts/log_parser/log_parser.py	/^def parse_args():$/;"	f
parse_args	scripts/reval_voc.py	/^def parse_args():$/;"	f
parse_args	scripts/reval_voc_py3.py	/^def parse_args():$/;"	f
parse_avgpool	src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	src/parser.c	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	src/utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	scripts/kmeansiou.c	/^double *parse_fields(char *l, int n)$/;"	f
parse_fields	src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_maxpool	src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	src/parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	src/parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_network_cfg_custom	src/parser.c	/^network parse_network_cfg_custom(char *filename, int batch)$/;"	f
parse_normalization	src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_rec	build/darknet/x64/voc_eval_py3.py	/^def parse_rec(filename):$/;"	f
parse_rec	scripts/voc_eval.py	/^def parse_rec(filename):$/;"	f
parse_rec	scripts/voc_eval_py3.py	/^def parse_rec(filename):$/;"	f
parse_region	src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_reorg_old	src/parser.c	/^layer parse_reorg_old(list *options, size_params params)$/;"	f
parse_rnn	src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	src/parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	src/parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	src/parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	src/parser.c	/^layer parse_upsample(list *options, size_params params, network net)$/;"	f
parse_url_char	crow.h	/^parse_url_char(enum state s, const char ch)$/;"	f
parse_yolo	src/parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	src/parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
parser_	crow.h	/^        HTTPParser<Connection> parser_;$/;"	m	class:crow::Connection
partial	src/darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
partial_context	crow.h	/^        struct partial_context$/;"	s	namespace:crow::detail
partial_context	crow.h	/^        struct partial_context<>$/;"	s	namespace:crow::detail
path	src/data.h	/^    char *path;$/;"	m	struct:load_args
paths	src/data.h	/^    char **paths;$/;"	m	struct:load_args
performDetect	build/darknet/x64/darknet.py	/^def performDetect(imagePath="data\/dog.jpg", thresh= 0.25, configPath = ".\/cfg\/yolov3.cfg", weightPath = "yolov3.weights", metaPath= ".\/data\/coco.data", showImage= True, makeImageOnly = False, initOnly= False):$/;"	f
performDetect	darknet.py	/^def performDetect(imagePath="data\/dog.jpg", thresh= 0.25, configPath = ".\/cfg\/yolov3.cfg", weightPath = "yolov3.weights", metaPath= ".\/data\/coco.data", showImage= True, makeImageOnly = False, initOnly= False):$/;"	f
pick_io_service	crow.h	/^        asio::io_service& pick_io_service()$/;"	f	class:crow::Server
pid_t	3rdparty/include/sched.h	/^   typedef int pid_t;$/;"	t
pid_t	3rdparty/include/sched.h	/^ typedef int pid_t;$/;"	t
plse_activate	src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	src/utils.c	/^void pm(int M, int N, float *A)$/;"	f
policy	src/network.h	/^    learning_rate_policy policy;$/;"	m	struct:network
pop_back	crow.h	/^        struct pop_back \/\/: public pop_back_helper<typename gen_seq<sizeof...(T)-1>::type, std::tuple<T...>>$/;"	s	namespace:crow::black_magic
pop_back	crow.h	/^        struct pop_back<>$/;"	s	namespace:crow::black_magic
pop_back_helper	crow.h	/^        struct pop_back_helper<seq<N...>, Tuple>$/;"	s	namespace:crow::black_magic
pop_column	src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
port	crow.h	/^        self_t& port(std::uint16_t port)$/;"	f	class:crow::Crow
port	crow.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port_	crow.h	/^        uint16_t port_ = 80;$/;"	m	class:crow::Crow
port_	crow.h	/^        uint16_t port_;$/;"	m	class:crow::Server
pos	crow.h	/^                static const int pos = Pos;$/;"	m	struct:crow::detail::routing_handler_call_helper::call_pair
pos	crow.h	/^            int pos;$/;"	m	struct:crow::mustache::Action
posixly_correct	src/getopt.c	/^static char *posixly_correct;$/;"	v	file:
post	crow.h	/^                void post(CompletionHandler handler)$/;"	f	class:crow::websocket::Connection
post	crow.h	/^        void post(CompletionHandler handler)$/;"	f	struct:crow::request
pow_cpu	src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	src/network.h	/^    float power;$/;"	m	struct:network
predict	build/darknet/x64/darknet.py	/^predict = lib.network_predict$/;"	v
predict	darknet.py	/^predict = lib.network_predict$/;"	v
predict	src/yolo_console_dll.cpp	/^    std::vector<bbox_t> predict() {$/;"	f	class:track_kalman
predict	src/yolo_console_dll.cpp	/^    std::vector<bbox_t> predict(float cur_time) {$/;"	f	class:extrapolate_coords_t
predict_classifier	src/classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_image	build/darknet/x64/darknet.py	/^predict_image = lib.network_predict_image$/;"	v
predict_image	darknet.py	/^predict_image = lib.network_predict_image$/;"	v
predict_move	src/go.c	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
predictions	src/demo.c	/^static float *predictions[FRAMES];$/;"	v	file:
predictions	src/yolo_v2_class.cpp	/^    float *predictions[FRAMES];$/;"	m	struct:detector_gpu_t	file:
prefix	src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon22
prev	3rdparty/include/pthread.h	/^  struct ptw32_cleanup_t *prev;$/;"	m	struct:ptw32_cleanup_t	typeref:struct:ptw32_cleanup_t::ptw32_cleanup_t
prev	src/list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_bbox_vec_deque	src/yolo_v2_class.hpp	/^    std::deque<std::vector<bbox_t>> prev_bbox_vec_deque;$/;"	m	class:Detector
prev_pts_flow	src/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow, cur_pts_flow;$/;"	m	class:Tracker_optflow
prev_pts_flow_cpu	src/yolo_v2_class.hpp	/^    cv::Mat prev_pts_flow_cpu;$/;"	m	class:Tracker_optflow
prev_pts_flow_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat prev_pts_flow_gpu, cur_pts_flow_gpu;$/;"	m	class:Tracker_optflow
prev_state	src/layer.h	/^    float *prev_state;$/;"	m	struct:layer
prev_state_gpu	src/layer.h	/^    float * prev_state_gpu;$/;"	m	struct:layer
preview_box_size	src/yolo_v2_class.hpp	/^    size_t const preview_box_size, bottom_offset;$/;"	m	class:preview_boxes_t
preview_box_track_id	src/yolo_v2_class.hpp	/^    std::vector<preview_box_track_t> preview_box_track_id;$/;"	m	class:preview_boxes_t
preview_box_track_t	src/yolo_v2_class.hpp	/^        preview_box_track_t() : track_id(0), obj_id(0), last_showed_frames_ago(frames_history), current_detection(false) {}$/;"	f	struct:preview_boxes_t::preview_box_track_t
preview_box_track_t	src/yolo_v2_class.hpp	/^    struct preview_box_track_t {$/;"	s	class:preview_boxes_t
preview_boxes_t	src/yolo_v2_class.hpp	/^    preview_boxes_t(size_t _preview_box_size = 100, size_t _bottom_offset = 100, bool _one_off_detections = false) :$/;"	f	class:preview_boxes_t
preview_boxes_t	src/yolo_v2_class.hpp	/^class preview_boxes_t {$/;"	c
print_board	src/go.c	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	src/coco.c	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_cocos	src/detector.c	/^static void print_cocos(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detector_detections	src/detector.c	/^void print_detector_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_image	src/image.c	/^void print_image(image m)$/;"	f
print_imagenet_detections	src/detector.c	/^void print_imagenet_detections(FILE *fp, int id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_letters	src/data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	src/matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	src/network.c	/^void print_network(network net)$/;"	f
print_statistics	src/utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	src/rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	src/yolo.c	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
prob	build/darknet/YoloWrapper.cs	/^            public float prob;                 \/\/ confidence - probability that the object was found correctly$/;"	f	struct:Darknet.YoloWrapper.bbox_t
prob	src/box.h	/^	float *prob;$/;"	m	struct:detection
prob	src/yolo_v2_class.hpp	/^    float prob;                    \/\/ confidence - probability that the object was found correctly$/;"	m	struct:bbox_t
probability	src/layer.h	/^    float probability;$/;"	m	struct:layer
probs	src/box.c	/^    float **probs;$/;"	m	struct:__anon1	file:
probs	src/demo.c	/^static float **probs;$/;"	v	file:
process	crow.h	/^            void process()$/;"	f	class:crow::detail::dumb_timer_queue
processBlock	crow.h	/^		SHA1& processBlock(const void* const start, const void* const end) {$/;"	f	class:sha1::SHA1
processBlock	crow.h	/^		void processBlock() {$/;"	f	class:sha1::SHA1
processByte	crow.h	/^		SHA1& processByte(uint8_t octet) {$/;"	f	class:sha1::SHA1
processBytes	crow.h	/^		SHA1& processBytes(const void* const data, size_t len) {$/;"	f	class:sha1::SHA1
process_header	crow.h	/^        void process_header()$/;"	f	struct:crow::HTTPParser
process_message	crow.h	/^        void process_message()$/;"	f	struct:crow::HTTPParser
progressive	src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon12
promote	crow.h	/^        struct promote$/;"	s	namespace:crow::black_magic
propagate_liberty	src/go.c	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
pthread_attr_t	3rdparty/include/pthread.h	/^typedef struct pthread_attr_t_ * pthread_attr_t;$/;"	t	typeref:struct:pthread_attr_t_
pthread_barrier_t	3rdparty/include/pthread.h	/^typedef struct pthread_barrier_t_ * pthread_barrier_t;$/;"	t	typeref:struct:pthread_barrier_t_
pthread_barrierattr_t	3rdparty/include/pthread.h	/^typedef struct pthread_barrierattr_t_ * pthread_barrierattr_t;$/;"	t	typeref:struct:pthread_barrierattr_t_
pthread_cleanup_pop	3rdparty/include/pthread.h	763;"	d
pthread_cleanup_pop	3rdparty/include/pthread.h	788;"	d
pthread_cleanup_pop	3rdparty/include/pthread.h	866;"	d
pthread_cleanup_push	3rdparty/include/pthread.h	754;"	d
pthread_cleanup_push	3rdparty/include/pthread.h	782;"	d
pthread_cleanup_push	3rdparty/include/pthread.h	861;"	d
pthread_cond_t	3rdparty/include/pthread.h	/^typedef struct pthread_cond_t_ * pthread_cond_t;$/;"	t	typeref:struct:pthread_cond_t_
pthread_condattr_t	3rdparty/include/pthread.h	/^typedef struct pthread_condattr_t_ * pthread_condattr_t;$/;"	t	typeref:struct:pthread_condattr_t_
pthread_key_t	3rdparty/include/pthread.h	/^typedef struct pthread_key_t_ * pthread_key_t;$/;"	t	typeref:struct:pthread_key_t_
pthread_mutex_t	3rdparty/include/pthread.h	/^typedef struct pthread_mutex_t_ * pthread_mutex_t;$/;"	t	typeref:struct:pthread_mutex_t_
pthread_mutexattr_t	3rdparty/include/pthread.h	/^typedef struct pthread_mutexattr_t_ * pthread_mutexattr_t;$/;"	t	typeref:struct:pthread_mutexattr_t_
pthread_once_t	3rdparty/include/pthread.h	/^typedef struct pthread_once_t_ pthread_once_t;$/;"	t	typeref:struct:pthread_once_t_
pthread_once_t_	3rdparty/include/pthread.h	/^struct pthread_once_t_$/;"	s
pthread_rwlock_t	3rdparty/include/pthread.h	/^typedef struct pthread_rwlock_t_ * pthread_rwlock_t;$/;"	t	typeref:struct:pthread_rwlock_t_
pthread_rwlockattr_t	3rdparty/include/pthread.h	/^typedef struct pthread_rwlockattr_t_ * pthread_rwlockattr_t;$/;"	t	typeref:struct:pthread_rwlockattr_t_
pthread_spinlock_t	3rdparty/include/pthread.h	/^typedef struct pthread_spinlock_t_ * pthread_spinlock_t;$/;"	t	typeref:struct:pthread_spinlock_t_
pthread_t	3rdparty/include/pthread.h	/^typedef ptw32_handle_t pthread_t;$/;"	t
ptw32_cleanup_callback_t	3rdparty/include/pthread.h	/^typedef void (* PTW32_CDECL ptw32_cleanup_callback_t)(void *);$/;"	t
ptw32_cleanup_t	3rdparty/include/pthread.h	/^struct ptw32_cleanup_t$/;"	s
ptw32_cleanup_t	3rdparty/include/pthread.h	/^typedef struct ptw32_cleanup_t ptw32_cleanup_t;$/;"	t	typeref:struct:ptw32_cleanup_t
ptw32_exception	3rdparty/include/pthread.h	/^class ptw32_exception {};$/;"	c
ptw32_exception_cancel	3rdparty/include/pthread.h	/^class ptw32_exception_cancel : public ptw32_exception {};$/;"	c
ptw32_exception_exit	3rdparty/include/pthread.h	/^class ptw32_exception_exit   : public ptw32_exception {};$/;"	c
ptw32_features	3rdparty/include/pthread.h	/^enum ptw32_features {$/;"	g
ptw32_handle_t	3rdparty/include/pthread.h	/^} ptw32_handle_t;$/;"	t	typeref:struct:__anon48
pull_batchnorm_layer	src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	src/connected_layer.c	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_cost_layer	src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	src/connected_layer.c	/^void push_connected_layer(connected_layer l)$/;"	f
push_cost_layer	src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
qs_decode	crow.h	/^inline int qs_decode(char * qs)$/;"	f	namespace:crow
qs_dict_name2kv	crow.h	/^inline boost::optional<std::pair<std::string, std::string>> qs_dict_name2kv(const char * dict_name, char * const * qs_kv, int qs_kv_size, int nth = 0)$/;"	f	namespace:crow
qs_k2v	crow.h	/^inline char * qs_k2v(const char * key, char * const * qs_kv, int qs_kv_size, int nth = 0)$/;"	f	namespace:crow
qs_parse	crow.h	/^inline int qs_parse(char * qs, char * qs_kv[], int qs_kv_size)$/;"	f	namespace:crow
qs_scanvalue	crow.h	/^inline char * qs_scanvalue(const char * key, const char * qs, char * val, size_t val_len)$/;"	f	namespace:crow
qs_strncmp	crow.h	/^inline int qs_strncmp(const char * s, const char * qs, size_t n)$/;"	f	namespace:crow
quality	src/http_stream.cpp	/^    int quality; \/\/ jpeg compression [1..100]$/;"	m	class:MJPGWriter	file:
query_string	crow.h	/^        query_string()$/;"	f	class:crow::query_string
query_string	crow.h	/^        query_string(const query_string& qs)$/;"	f	class:crow::query_string
query_string	crow.h	/^        query_string(std::string url)$/;"	f	class:crow::query_string
query_string	crow.h	/^    class query_string$/;"	c	namespace:crow
r	crow.h	/^        response& operator = (const response& r) = delete;$/;"	m	struct:crow::response
r_cpu	src/layer.h	/^    float *r_cpu;$/;"	m	struct:layer
r_gpu	src/layer.h	/^    float *r_gpu;$/;"	m	struct:layer
r_string	crow.h	/^                r_string() {};$/;"	f	struct:crow::json::detail::r_string
r_string	crow.h	/^                r_string(char* s, char* e)$/;"	f	struct:crow::json::detail::r_string
r_string	crow.h	/^                r_string(const r_string& r)$/;"	f	struct:crow::json::detail::r_string
r_string	crow.h	/^                r_string(r_string&& r)$/;"	f	struct:crow::json::detail::r_string
r_string	crow.h	/^            struct r_string $/;"	s	namespace:crow::json::detail
ramp_activate	src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
rand	src/layer.h	/^    float *rand;$/;"	m	struct:layer
rand_gpu	src/layer.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	src/utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	src/utils.c	/^float rand_normal()$/;"	f
rand_scale	src/utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	src/utils.c	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_strong	src/utils.c	/^float rand_uniform_strong(float min, float max)$/;"	f
random	src/layer.h	/^    int random;$/;"	m	struct:layer
random	src/unistd.h	16;"	d
random_augment_image	src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_centers	scripts/kmeansiou.c	/^void random_centers(matrix data, matrix centers){$/;"	f
random_crop_image	src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_float	src/utils.c	/^float random_float()$/;"	f
random_gen	src/utils.c	/^unsigned int random_gen()$/;"	f
random_go_moves	src/go.c	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_matrix	src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	src/data.c	/^void randomize_data(data d)$/;"	f
ratio	src/layer.h	/^    float ratio;$/;"	m	struct:layer
ratio	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
raw_coeff	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon12::__anon13
raw_data	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon12::__anon13
raw_socket	crow.h	/^        raw_socket()$/;"	f	struct:crow::SSLAdaptor
raw_socket	crow.h	/^        tcp::socket& raw_socket()$/;"	f	struct:crow::SocketAdaptor
raw_url	crow.h	/^        std::string raw_url;$/;"	m	struct:crow::HTTPParser
raw_url	crow.h	/^        std::string raw_url;$/;"	m	struct:crow::request
read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon6
read_all	src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	src/parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_from_callbacks	src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon7
read_int	src/utils.c	/^int read_int(int fd)$/;"	f
read_map	src/utils.c	/^int *read_map(char *filename)$/;"	f
read_option	src/option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_tokenized_data	src/rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	src/rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	src/tree.c	/^tree *read_tree(char *filename)$/;"	f
reconstruct_picture	src/nightmare.c	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
redirect	crow.h	/^        void redirect(const std::string& location)$/;"	f	struct:crow::response
region_layer	src/region_layer.h	/^typedef layer region_layer;$/;"	t
release	src/http_stream.cpp	/^    bool release()$/;"	f	class:MJPGWriter
relie_activate	src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
remote_endpoint	crow.h	/^        tcp::endpoint remote_endpoint()$/;"	f	struct:crow::SSLAdaptor
remote_endpoint	crow.h	/^        tcp::endpoint remote_endpoint()$/;"	f	struct:crow::SocketAdaptor
remove_connected	src/go.c	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
render	crow.h	/^            std::string render()$/;"	f	class:crow::mustache::template_t
render	crow.h	/^            std::string render(context& ctx)$/;"	f	class:crow::mustache::template_t
render_fragment	crow.h	/^            void render_fragment(const std::pair<int, int> fragment, int indent, std::string& out)$/;"	f	class:crow::mustache::template_t
render_internal	crow.h	/^            void render_internal(int actionBegin, int actionEnd, std::vector<context*>& stack, std::string& out, int indent)$/;"	f	class:crow::mustache::template_t
reorg	src/layer.h	/^    int reorg;$/;"	m	struct:layer
reorg_cpu	src/blas.c	/^void reorg_cpu(float *x, int out_w, int out_h, int out_c, int batch, int stride, int forward, float *out)$/;"	f
replace_image_to_label	src/utils.c	/^void replace_image_to_label(char *input_path, char *output_path) {$/;"	f
req	crow.h	/^                const request& req;$/;"	m	struct:crow::detail::routing_handler_call_helper::call_params
req_	crow.h	/^        request req_;$/;"	m	class:crow::Connection
req_handler_wrapper	crow.h	/^                    req_handler_wrapper(Func f)$/;"	f	struct:crow::detail::routing_handler_call_helper::Wrapped::req_handler_wrapper
req_handler_wrapper	crow.h	/^                struct req_handler_wrapper$/;"	s	struct:crow::detail::routing_handler_call_helper::Wrapped
request	crow.h	/^        request()$/;"	f	struct:crow::request
request	crow.h	/^        request(HTTPMethod method, std::string raw_url, std::string url, query_string url_params, ci_map headers, std::string body)$/;"	f	struct:crow::request
request	crow.h	/^    struct request$/;"	s	namespace:crow
required_argument	src/getopt.h	98;"	d
requires_in_range	crow.h	/^        constexpr unsigned requires_in_range( unsigned i, unsigned len )$/;"	f	namespace:crow::black_magic
res	crow.h	/^                response& res;$/;"	m	struct:crow::detail::routing_handler_call_helper::call_params
res	crow.h	/^        response res;$/;"	m	class:crow::Connection
res_body_copy_	crow.h	/^        std::string res_body_copy_;$/;"	m	class:crow::Connection
resample	src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon14
resample_row_1	src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon12
rescale_net	src/darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
rescore	src/layer.h	/^    int rescore;$/;"	m	struct:layer
reserved1	3rdparty/include/pthread.h	/^  int          reserved1;$/;"	m	struct:pthread_once_t_
reserved2	3rdparty/include/pthread.h	/^  int          reserved2;$/;"	m	struct:pthread_once_t_
reset	crow.h	/^		SHA1& reset() {$/;"	f	class:sha1::SHA1
reset	crow.h	/^            void reset()$/;"	f	class:crow::json::wvalue
reset_momentum	src/network.c	/^void reset_momentum(network net)$/;"	f
reset_network_state	src/network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_normalize_net	src/darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn	build/darknet/x64/darknet.py	/^reset_rnn = lib.reset_rnn$/;"	v
reset_rnn	darknet.py	/^reset_rnn = lib.reset_rnn$/;"	v
reset_rnn	src/network.c	/^void reset_rnn(network *net)$/;"	f
reset_rnn_state	src/rnn.c	/^void reset_rnn_state(network net, int b)$/;"	f
resize_avgpool_layer	src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	src/image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	src/image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	src/image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_reorg_old_layer	src/reorg_old_layer.c	/^void resize_reorg_old_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resize_shortcut_layer	src/shortcut_layer.c	/^void resize_shortcut_layer(layer *l, int w, int h)$/;"	f
resize_upsample_layer	src/upsample_layer.c	/^void resize_upsample_layer(layer *l, int w, int h)$/;"	f
resize_yolo_layer	src/yolo_layer.c	/^void resize_yolo_layer(layer *l, int w, int h)$/;"	f
resized	src/data.h	/^    image *resized;$/;"	m	struct:load_args
response	crow.h	/^        explicit response(int code) : code(code) {}$/;"	f	struct:crow::response
response	crow.h	/^        response() {}$/;"	f	struct:crow::response
response	crow.h	/^        response(const json::wvalue& json_value) : body(json::dump(json_value))$/;"	f	struct:crow::response
response	crow.h	/^        response(int code, const json::wvalue& json_value) : code(code), body(json::dump(json_value))$/;"	f	struct:crow::response
response	crow.h	/^        response(int code, std::string body) : code(code), body(std::move(body)) {}$/;"	f	struct:crow::response
response	crow.h	/^        response(json::wvalue&& json_value) : json_value(std::move(json_value))$/;"	f	struct:crow::response
response	crow.h	/^        response(response&& r)$/;"	f	struct:crow::response
response	crow.h	/^        response(std::string body) : body(std::move(body)) {}$/;"	f	struct:crow::response
response	crow.h	/^    struct response$/;"	s	namespace:crow
restart_interval	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon12
result_type	crow.h	/^            typedef R result_type;$/;"	t	struct:crow::utility::function_traits
return_result	crow.cpp	/^crow::json::wvalue return_result(std::vector<bbox_t> const result_vec, std::vector<std::string> const obj_names) {$/;"	f
reverse	src/layer.h	/^    int reverse;$/;"	m	struct:layer
rgb	src/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon12
rgb_to_hsv	src/image.c	/^void rgb_to_hsv(image im)$/;"	f
rgbgr_image	build/darknet/x64/darknet.py	/^rgbgr_image = lib.rgbgr_image$/;"	v
rgbgr_image	darknet.py	/^rgbgr_image = lib.rgbgr_image$/;"	v
rgbgr_image	src/image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	src/darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
right	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon34
rolling_mean	src/layer.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean_gpu	src/layer.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	src/layer.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance_gpu	src/layer.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
rotate_crop_image	src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	src/image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f
route_dynamic	crow.h	/^        DynamicRule& route_dynamic(std::string&& rule)$/;"	f	class:crow::Crow
route_layer	src/route_layer.h	/^typedef layer route_layer;$/;"	t
router_	crow.h	/^        Router router_;$/;"	m	class:crow::Crow
routine	3rdparty/include/pthread.h	/^  ptw32_cleanup_callback_t routine;$/;"	m	struct:ptw32_cleanup_t
routing_handler_call_helper	crow.h	/^        namespace routing_handler_call_helper$/;"	n	namespace:crow::detail
routing_params	crow.h	/^    struct routing_params$/;"	s	namespace:crow
rows	scripts/kmeansiou.c	/^    int rows, cols;$/;"	m	struct:matrix	file:
rows	src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
rule_	crow.h	/^        std::string rule_;$/;"	m	class:crow::BaseRule
rule_to_upgrade_	crow.h	/^		std::unique_ptr<BaseRule> rule_to_upgrade_;$/;"	m	class:crow::BaseRule
rules_	crow.h	/^        std::vector<std::unique_ptr<BaseRule>> rules_;$/;"	m	class:crow::Router
run	crow.h	/^        void run()$/;"	f	class:crow::Crow
run	crow.h	/^        void run()$/;"	f	class:crow::Server
run_art	src/art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	src/captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	src/rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	src/cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	src/classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	src/coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	src/compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detector	src/detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	src/dice.c	/^void run_dice(int argc, char **argv)$/;"	f
run_go	src/go.c	/^void run_go(int argc, char **argv)$/;"	f
run_nightmare	src/nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_super	src/super.c	/^void run_super(int argc, char **argv)$/;"	f
run_swag	src/swag.c	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	src/tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_vid_rnn	src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	src/rnn_vid.c	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	src/voxel.c	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	src/writing.c	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	src/yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
rvalue	crow.h	/^            rvalue(const rvalue& r)$/;"	f	class:crow::json::rvalue
rvalue	crow.h	/^        class rvalue$/;"	c	namespace:crow::json
s	crow.h	/^            detail::r_string s() const$/;"	f	class:crow::json::rvalue
s	crow.h	/^            std::string s;$/;"	m	class:crow::json::wvalue
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon12
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon18
s_	crow.h	/^                char* s_;$/;"	m	struct:crow::json::detail::r_string
s_body_identity	crow.h	/^  , s_body_identity$/;"	e	enum:state
s_body_identity_eof	crow.h	/^  , s_body_identity_eof$/;"	e	enum:state
s_chunk_data	crow.h	/^  , s_chunk_data$/;"	e	enum:state
s_chunk_data_almost_done	crow.h	/^  , s_chunk_data_almost_done$/;"	e	enum:state
s_chunk_data_done	crow.h	/^  , s_chunk_data_done$/;"	e	enum:state
s_chunk_parameters	crow.h	/^  , s_chunk_parameters$/;"	e	enum:state
s_chunk_size	crow.h	/^  , s_chunk_size$/;"	e	enum:state
s_chunk_size_almost_done	crow.h	/^  , s_chunk_size_almost_done$/;"	e	enum:state
s_chunk_size_start	crow.h	/^  , s_chunk_size_start$/;"	e	enum:state
s_dead	crow.h	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state
s_header_almost_done	crow.h	/^  , s_header_almost_done$/;"	e	enum:state
s_header_field	crow.h	/^  , s_header_field$/;"	e	enum:state
s_header_field_start	crow.h	/^  , s_header_field_start$/;"	e	enum:state
s_header_value	crow.h	/^  , s_header_value$/;"	e	enum:state
s_header_value_discard_lws	crow.h	/^  , s_header_value_discard_lws$/;"	e	enum:state
s_header_value_discard_ws	crow.h	/^  , s_header_value_discard_ws$/;"	e	enum:state
s_header_value_discard_ws_almost_done	crow.h	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state
s_header_value_lws	crow.h	/^  , s_header_value_lws$/;"	e	enum:state
s_header_value_start	crow.h	/^  , s_header_value_start$/;"	e	enum:state
s_headers_almost_done	crow.h	/^  , s_headers_almost_done$/;"	e	enum:state
s_headers_done	crow.h	/^  , s_headers_done$/;"	e	enum:state
s_http_host	crow.h	/^  , s_http_host$/;"	e	enum:http_host_state
s_http_host_dead	crow.h	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state
s_http_host_port	crow.h	/^  , s_http_host_port$/;"	e	enum:http_host_state
s_http_host_port_start	crow.h	/^  , s_http_host_port_start$/;"	e	enum:http_host_state
s_http_host_start	crow.h	/^  , s_http_host_start$/;"	e	enum:http_host_state
s_http_host_v6	crow.h	/^  , s_http_host_v6$/;"	e	enum:http_host_state
s_http_host_v6_end	crow.h	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state
s_http_host_v6_start	crow.h	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state
s_http_userinfo	crow.h	/^  , s_http_userinfo$/;"	e	enum:http_host_state
s_http_userinfo_start	crow.h	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state
s_message_done	crow.h	/^  , s_message_done$/;"	e	enum:state
s_req_first_http_major	crow.h	/^  , s_req_first_http_major$/;"	e	enum:state
s_req_first_http_minor	crow.h	/^  , s_req_first_http_minor$/;"	e	enum:state
s_req_fragment	crow.h	/^  , s_req_fragment$/;"	e	enum:state
s_req_fragment_start	crow.h	/^  , s_req_fragment_start$/;"	e	enum:state
s_req_http_H	crow.h	/^  , s_req_http_H$/;"	e	enum:state
s_req_http_HT	crow.h	/^  , s_req_http_HT$/;"	e	enum:state
s_req_http_HTT	crow.h	/^  , s_req_http_HTT$/;"	e	enum:state
s_req_http_HTTP	crow.h	/^  , s_req_http_HTTP$/;"	e	enum:state
s_req_http_major	crow.h	/^  , s_req_http_major$/;"	e	enum:state
s_req_http_minor	crow.h	/^  , s_req_http_minor$/;"	e	enum:state
s_req_http_start	crow.h	/^  , s_req_http_start$/;"	e	enum:state
s_req_line_almost_done	crow.h	/^  , s_req_line_almost_done$/;"	e	enum:state
s_req_method	crow.h	/^  , s_req_method$/;"	e	enum:state
s_req_path	crow.h	/^  , s_req_path$/;"	e	enum:state
s_req_query_string	crow.h	/^  , s_req_query_string$/;"	e	enum:state
s_req_query_string_start	crow.h	/^  , s_req_query_string_start$/;"	e	enum:state
s_req_schema	crow.h	/^  , s_req_schema$/;"	e	enum:state
s_req_schema_slash	crow.h	/^  , s_req_schema_slash$/;"	e	enum:state
s_req_schema_slash_slash	crow.h	/^  , s_req_schema_slash_slash$/;"	e	enum:state
s_req_server	crow.h	/^  , s_req_server$/;"	e	enum:state
s_req_server_start	crow.h	/^  , s_req_server_start$/;"	e	enum:state
s_req_server_with_at	crow.h	/^  , s_req_server_with_at$/;"	e	enum:state
s_req_spaces_before_url	crow.h	/^  , s_req_spaces_before_url$/;"	e	enum:state
s_res_H	crow.h	/^  , s_res_H$/;"	e	enum:state
s_res_HT	crow.h	/^  , s_res_HT$/;"	e	enum:state
s_res_HTT	crow.h	/^  , s_res_HTT$/;"	e	enum:state
s_res_HTTP	crow.h	/^  , s_res_HTTP$/;"	e	enum:state
s_res_first_http_major	crow.h	/^  , s_res_first_http_major$/;"	e	enum:state
s_res_first_http_minor	crow.h	/^  , s_res_first_http_minor$/;"	e	enum:state
s_res_first_status_code	crow.h	/^  , s_res_first_status_code$/;"	e	enum:state
s_res_http_major	crow.h	/^  , s_res_http_major$/;"	e	enum:state
s_res_http_minor	crow.h	/^  , s_res_http_minor$/;"	e	enum:state
s_res_line_almost_done	crow.h	/^  , s_res_line_almost_done$/;"	e	enum:state
s_res_or_resp_H	crow.h	/^  , s_res_or_resp_H$/;"	e	enum:state
s_res_status	crow.h	/^  , s_res_status$/;"	e	enum:state
s_res_status_code	crow.h	/^  , s_res_status_code$/;"	e	enum:state
s_res_status_start	crow.h	/^  , s_res_status_start$/;"	e	enum:state
s_start_req	crow.h	/^  , s_start_req$/;"	e	enum:state
s_start_req_or_res	crow.h	/^  , s_start_req_or_res$/;"	e	enum:state
s_start_res	crow.h	/^  , s_start_res$/;"	e	enum:state
sample	build/darknet/x64/darknet.py	/^def sample(probs):$/;"	f
sample	darknet.py	/^def sample(probs):$/;"	f
sample	scripts/kmeansiou.c	/^int *sample(int n)$/;"	f
sample_array	src/utils.c	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	src/image.c	/^void saturate_image(image im, float sat)$/;"	f
saturation	src/data.h	/^    float saturation;$/;"	m	struct:load_args
saturation	src/layer.h	/^    float saturation;$/;"	m	struct:layer
saturation	src/network.h	/^    float saturation;$/;"	m	struct:network
save_batchnorm_weights	src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_delta_gpu	src/layer.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	src/layer.h	/^    float * save_gpu;$/;"	m	struct:layer
save_image	src/image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	src/image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	src/image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_reconstruction	src/rnn_vid.c	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_weights	src/parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	src/parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	src/data.h	/^    int scale;$/;"	m	struct:load_args
scale	src/layer.h	/^    float scale;$/;"	m	struct:layer
scale	src/network.h	/^    float scale;$/;"	m	struct:network
scale_array	src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	src/data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	src/image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_updates	src/layer.h	/^    float *scale_updates;$/;"	m	struct:layer
scale_updates_gpu	src/layer.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scales	src/layer.h	/^    float *scales;$/;"	m	struct:layer
scales	src/network.h	/^    float *scales;$/;"	m	struct:network
scales_gpu	src/layer.h	/^    float * scales_gpu;$/;"	m	struct:layer
scan_n	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon12
sched_param	3rdparty/include/sched.h	/^struct sched_param {$/;"	s
sched_priority	3rdparty/include/sched.h	/^  int sched_priority;$/;"	m	struct:sched_param
sched_rr_get_interval	3rdparty/include/sched.h	171;"	d
score_game	src/go.c	/^float score_game(float *board)$/;"	f
sec	src/utils.c	/^float sec(clock_t clocks)$/;"	f
section	src/parser.c	/^}section;$/;"	t	typeref:struct:__anon43	file:
seen	src/network.h	/^	int *seen;$/;"	m	struct:network
self_go	src/go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
self_layer	src/layer.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
sem_t	3rdparty/include/semaphore.h	/^typedef struct sem_t_ * sem_t;$/;"	t	typeref:struct:sem_t_
send_mjpeg	src/http_stream.cpp	/^void send_mjpeg(IplImage* ipl, int port, int timeout, int quality) {$/;"	f
send_pong	crow.h	/^                void send_pong(const std::string& msg)$/;"	f	class:crow::websocket::Connection
sending_buffers_	crow.h	/^                std::vector<std::string> sending_buffers_;$/;"	m	class:crow::websocket::Connection
seq	crow.h	/^        template<unsigned...> struct seq{ using type = seq; };$/;"	s	namespace:crow::black_magic
server_	crow.h	/^        std::unique_ptr<server_t> server_;$/;"	m	class:crow::Crow
server_name_	crow.h	/^        const std::string& server_name_;$/;"	m	class:crow::Connection
server_name_	crow.h	/^        std::string server_name_ = "Crow\/0.1";$/;"	m	class:crow::Server
set	src/yolo_console_dll.cpp	/^    void set(std::vector<bbox_t> result_vec) {$/;"	f	class:track_kalman
set	src/yolo_v2_class.hpp	/^    void set(cv::Mat src_mat, std::vector<bbox_t> result_vec)$/;"	f	class:preview_boxes_t
setHandler	crow.h	/^            static void setHandler(ILogHandler* handler) {$/;"	f	class:crow::logger
setLogLevel	crow.h	/^            static void setLogLevel(LogLevel level) {$/;"	f	class:crow::logger
set_	crow.h	/^                void set_(Func f, typename std::enable_if<$/;"	f	struct:crow::detail::routing_handler_call_helper::Wrapped
set_base	crow.h	/^        inline void set_base(const std::string& path)$/;"	f	namespace:crow::mustache
set_batch_network	src/network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_cached	crow.h	/^            void set_cached() const$/;"	f	class:crow::json::rvalue
set_cookie	crow.h	/^            void set_cookie(const std::string& key, const std::string& value)$/;"	f	struct:crow::CookieParser::context
set_error	crow.h	/^            void set_error()$/;"	f	class:crow::json::rvalue
set_gpu	build/darknet/x64/darknet.py	/^    set_gpu = lib.cuda_set_device$/;"	v
set_gpu	darknet.py	/^    set_gpu = lib.cuda_set_device$/;"	v
set_header	crow.h	/^        void set_header(std::string key, std::string value)$/;"	f	struct:crow::response
set_io_service	crow.h	/^            void set_io_service(boost::asio::io_service& io_service)$/;"	f	class:crow::detail::dumb_timer_queue
set_loader	crow.h	/^        inline void set_loader(std::function<std::string(std::string)> loader)$/;"	f	namespace:crow::mustache
set_pixel	src/image.c	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
set_tick_function	crow.h	/^        void set_tick_function(std::chrono::milliseconds d, std::function<void()> f)$/;"	f	class:crow::Server
sets	build/darknet/x64/data/voc/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
sets	scripts/voc_label.py	/^sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]$/;"	v
sets	scripts/voc_label_difficult.py	/^sets=[('2012', 'val'),('2007', 'test')]$/;"	v
sha1	crow.h	/^namespace sha1$/;"	n
shallow	src/data.h	/^    int shallow;$/;"	m	struct:__anon32
shift	src/layer.h	/^    float shift;$/;"	m	struct:layer
shortcut	src/layer.h	/^    int shortcut;$/;"	m	struct:layer
shortcut_cpu	src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
show_console_result	src/yolo_console_dll.cpp	/^void show_console_result(std::vector<bbox_t> const result_vec, std::vector<std::string> const obj_names) {$/;"	f
show_image	src/image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	src/image.c	/^void show_image_cv(image p, const char *name)$/;"	f
show_image_cv_ipl	src/image.c	/^void show_image_cv_ipl(IplImage *disp, const char *name)$/;"	f
show_image_layers	src/image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
show_img	src/demo.c	/^IplImage* show_img;$/;"	v
show_message	scripts/log_parser/log_parser.py	/^def show_message(message, stop=False):$/;"	f
shuffle	src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
side	src/layer.h	/^    int side;$/;"	m	struct:layer
signals_	crow.h	/^        boost::asio::signal_set signals_;$/;"	m	class:crow::Server
simd_detect_x86	src/gemm.c	/^int simd_detect_x86(unsigned int idFeature)$/;"	f
single_tag_to_type	crow.h	/^        struct single_tag_to_type$/;"	s	namespace:crow::black_magic
single_tag_to_type	crow.h	/^        struct single_tag_to_type<1>$/;"	s	namespace:crow::black_magic
single_tag_to_type	crow.h	/^        struct single_tag_to_type<2>$/;"	s	namespace:crow::black_magic
single_tag_to_type	crow.h	/^        struct single_tag_to_type<3>$/;"	s	namespace:crow::black_magic
single_tag_to_type	crow.h	/^        struct single_tag_to_type<4>$/;"	s	namespace:crow::black_magic
single_tag_to_type	crow.h	/^        struct single_tag_to_type<5>$/;"	s	namespace:crow::black_magic
size	crow.h	/^                size_t size() const { return end() - begin(); }$/;"	f	struct:crow::json::detail::r_string
size	crow.h	/^            constexpr unsigned size() const { $/;"	f	class:crow::black_magic::const_str
size	crow.h	/^            size_t size() const$/;"	f	class:crow::json::rvalue
size	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
size	src/layer.h	/^    int size;$/;"	m	struct:layer
size	src/list.h	/^    int size;$/;"	m	struct:list
size	src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon11
size	src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon15
size	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon21
size_	crow.h	/^            unsigned size_;$/;"	m	class:crow::black_magic::const_str
size_params	src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon6
small_object	src/data.h	/^	int small_object;$/;"	m	struct:load_args
small_object	src/network.h	/^	int small_object;$/;"	m	struct:network
smart_centers	scripts/kmeansiou.c	/^void smart_centers(matrix data, matrix centers) {$/;"	f
smooth	src/nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth_data	src/data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
snprintf	src/utils.h	8;"	d
sock	src/http_stream.cpp	/^    SOCKET sock;$/;"	m	class:MJPGWriter	file:
socket	crow.h	/^        boost::asio::ssl::stream<tcp::socket>& socket()$/;"	f	struct:crow::SSLAdaptor
socket	crow.h	/^        decltype(std::declval<Adaptor>().raw_socket())& socket()$/;"	f	class:crow::Connection
socket	crow.h	/^        tcp::socket& socket()$/;"	f	struct:crow::SocketAdaptor
socket_	crow.h	/^        tcp::socket socket_;$/;"	m	struct:crow::SocketAdaptor
softmax	src/blas.c	/^void softmax(float *input, int n, float temp, float *output, int stride)$/;"	f
softmax	src/layer.h	/^    int softmax;$/;"	m	struct:layer
softmax_cpu	src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	src/layer.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	src/softmax_layer.c	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
sort_class	src/box.h	/^	int sort_class;$/;"	m	struct:detection
sorta_shuffle	src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	src/box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon1	file:
sortable_bbox	src/compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon29	file:
spatial_mean	src/layer.h	/^    float * spatial_mean;$/;"	m	struct:layer
spec_end	src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon12
spec_start	src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon12
speed	src/darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f
split_data	src/data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	src/utils.c	/^list *split_str(char *s, char delim)$/;"	f
sqrt	src/layer.h	/^    int sqrt;$/;"	m	struct:layer
squared	src/layer.h	/^    float * squared;$/;"	m	struct:layer
squared_gpu	src/layer.h	/^    float * squared_gpu;$/;"	m	struct:layer
srandom	src/unistd.h	15;"	d
srcTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
src_grey	src/yolo_v2_class.hpp	/^    cv::Mat src_grey;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
src_grey_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_grey_gpu;    \/\/ used in both functions$/;"	m	class:Tracker_optflow
src_mat_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat src_mat_gpu;$/;"	m	class:Tracker_optflow
ssize_t	src/unistd.h	37;"	d
ssl	crow.h	/^        self_t& ssl(T&&)$/;"	f	class:crow::Crow
ssl	crow.h	/^        self_t& ssl(boost::asio::ssl::context&& ctx)$/;"	f	class:crow::Crow
ssl_file	crow.h	/^        self_t& ssl_file(T&&, Remain&&...)$/;"	f	class:crow::Crow
ssl_file	crow.h	/^        self_t& ssl_file(const std::string& crt_filename, const std::string& key_filename)$/;"	f	class:crow::Crow
ssl_file	crow.h	/^        self_t& ssl_file(const std::string& pem_filename)$/;"	f	class:crow::Crow
ssl_server_	crow.h	/^        std::unique_ptr<ssl_server_t> ssl_server_;$/;"	m	class:crow::Crow
ssl_socket_	crow.h	/^        std::unique_ptr<boost::asio::ssl::stream<tcp::socket>> ssl_socket_;$/;"	m	struct:crow::SSLAdaptor
stair_activate	src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
start	crow.h	/^                void start(std::string&& hello)$/;"	f	class:crow::websocket::Connection
start	crow.h	/^            int start;$/;"	m	struct:crow::mustache::Action
start	crow.h	/^        void start()$/;"	f	class:crow::Connection
start	crow.h	/^        void start(F f)$/;"	f	struct:crow::SSLAdaptor
start	crow.h	/^        void start(F f)$/;"	f	struct:crow::SocketAdaptor
start_	crow.h	/^            mutable char* start_;$/;"	m	class:crow::json::rvalue
start_deadline	crow.h	/^        void start_deadline(\/*int timeout = 5*\/)$/;"	f	class:crow::Connection
start_x	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon23
start_y	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon23
state	crow.h	/^  unsigned int state : 8;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
state	crow.h	/^enum state$/;"	g
state	src/layer.h	/^    float *state;$/;"	m	struct:layer
state_delta	src/layer.h	/^    float *state_delta;$/;"	m	struct:layer
state_delta_gpu	src/layer.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_gate_layer	src/layer.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gpu	src/layer.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	src/layer.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	src/layer.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	src/layer.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_size	src/yolo_console_dll.cpp	/^    int state_size, meas_size, contr_size;$/;"	m	class:track_kalman	file:
state_state_layer	src/layer.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	src/layer.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
statistics_connected_layer	src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	src/darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
status	src/yolo_v2_class.hpp	/^    cv::Mat status, err;$/;"	m	class:Tracker_optflow
status_code	crow.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser
status_gpu	src/yolo_v2_class.hpp	/^    cv::cuda::GpuMat status_gpu, err_gpu;$/;"	m	class:Tracker_optflow
stb_image_write_test	src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	src/stb_image.h	3035;"	d
stbi__EOI	src/stb_image.h	3037;"	d
stbi__SOF	src/stb_image.h	3038;"	d
stbi__SOF_progressive	src/stb_image.h	3041;"	d
stbi__SOI	src/stb_image.h	3036;"	d
stbi__SOS	src/stb_image.h	3039;"	d
stbi__YCbCr_to_RGB_row	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	src/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	src/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	src/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	src/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon20
stbi__bmp_info	src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	src/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	src/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	src/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	src/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon7
stbi__convert_16_to_8	src/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	src/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	src/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	src/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	src/stb_image.h	3162;"	d
stbi__div4	src/stb_image.h	3113;"	d
stbi__do_png	src/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	src/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	src/stb_image.h	926;"	d
stbi__err	src/stb_image.h	928;"	d
stbi__err	src/stb_image.h	930;"	d
stbi__errpf	src/stb_image.h	933;"	d
stbi__errpuc	src/stb_image.h	934;"	d
stbi__expand_png_palette	src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	src/stb_image.h	2114;"	d
stbi__fill_bits	src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	src/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f
stbi__float2fixed	src/stb_image.h	3318;"	d
stbi__float2int	src/stb_image.h	1586;"	d
stbi__float_postprocess	src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	src/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	src/stb_image.h	2115;"	d
stbi__g_failure_reason	src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon23
stbi__gif_header	src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	src/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon22
stbi__gif_parse_colortable	src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon11
stbi__idct_block	src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	src/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon12
stbi__jpeg_decode_block	src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	src/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	src/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	src/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	src/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	src/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	src/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	src/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	src/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	src/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	src/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	src/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	src/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	src/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	src/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon21
stbi__pic_test	src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon18
stbi__png_info	src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	src/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon17
stbi__pnm_getinteger	src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	src/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	src/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	src/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon14
stbi__resample_row_generic	src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	src/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon9
stbi__rewind	src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	src/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	src/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	src/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	src/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	src/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	src/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	src/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	src/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	src/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon41
stbi__zbuf	src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon16
stbi__zbuild_huffman	src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	src/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	src/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	src/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	src/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon15
stbi__zhuffman_decode	src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	src/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	src/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	src/stb_image.h	522;"	d
stbi_inline	src/stb_image.h	524;"	d
stbi_inline	src/stb_image.h	527;"	d
stbi_io_callbacks	src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon6
stbi_is_hdr	src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	src/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	src/stb_image.h	558;"	d
stbi_lrot	src/stb_image.h	560;"	d
stbi_set_flip_vertically_on_load	src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	src/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	src/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_func	src/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	src/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	src/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	src/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_func	src/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	src/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	src/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	src/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	src/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	src/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	src/stb_image_write.h	743;"	d
stbiw__crc32	src/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__jpg_DCT	src/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	src/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	src/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	src/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	src/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	src/stb_image_write.h	493;"	d
stbiw__outfile	src/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	src/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	src/stb_image_write.h	675;"	d
stbiw__sbfree	src/stb_image_write.h	676;"	d
stbiw__sbgrow	src/stb_image_write.h	672;"	d
stbiw__sbgrowf	src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	src/stb_image_write.h	667;"	d
stbiw__sbmaybegrow	src/stb_image_write.h	671;"	d
stbiw__sbn	src/stb_image_write.h	668;"	d
stbiw__sbneedgrow	src/stb_image_write.h	670;"	d
stbiw__sbpush	src/stb_image_write.h	674;"	d
stbiw__sbraw	src/stb_image_write.h	666;"	d
stbiw__wp32	src/stb_image_write.h	896;"	d
stbiw__wpcrc	src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	src/stb_image_write.h	895;"	d
stbiw__wptag	src/stb_image_write.h	897;"	d
stbiw__write3	src/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	src/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	src/stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	src/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	src/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	src/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	src/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	src/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	src/stb_image_write.h	732;"	d
stbiw__zlib_bitrev	src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	src/stb_image_write.h	731;"	d
stbiw__zlib_flushf	src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	src/stb_image_write.h	740;"	d
stbiw__zlib_huff1	src/stb_image_write.h	736;"	d
stbiw__zlib_huff2	src/stb_image_write.h	737;"	d
stbiw__zlib_huff3	src/stb_image_write.h	738;"	d
stbiw__zlib_huff4	src/stb_image_write.h	739;"	d
stbiw__zlib_huffa	src/stb_image_write.h	734;"	d
stbiw__zlib_huffb	src/stb_image_write.h	741;"	d
stbiw_uint32	src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	src/network.h	/^    int step;$/;"	m	struct:network
step	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon23
steps	src/layer.h	/^    int steps;$/;"	m	struct:layer
steps	src/network.h	/^    int   *steps;$/;"	m	struct:network
stop	crow.h	/^        void stop()$/;"	f	class:crow::Crow
stop	crow.h	/^        void stop()$/;"	f	class:crow::Server
stopbackward	src/layer.h	/^    int stopbackward;$/;"	m	struct:layer
stream	src/yolo_v2_class.hpp	/^    cv::cuda::Stream stream;$/;"	m	class:Tracker_optflow
streamInit	src/cuda.c	/^static int streamInit[16] = { 0 };$/;"	v	file:
streamsArray	src/cuda.c	/^static cudaStream_t streamsArray[16];    \/\/ cudaStreamSynchronize( get_cuda_stream() );$/;"	v	file:
stride	src/layer.h	/^    int stride;$/;"	m	struct:layer
string_params	crow.h	/^        std::vector<std::string> string_params;$/;"	m	struct:crow::routing_params
string_to_board	src/go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
stringstream_	crow.h	/^            std::ostringstream stringstream_;$/;"	m	class:crow::logger
strip	src/utils.c	/^void strip(char *s)$/;"	f
strip_args	src/utils.c	/^void strip_args(char *s)$/;"	f
strip_char	src/utils.c	/^void strip_char(char *s, char bad)$/;"	f
sub_value	crow.h	/^            static const int sub_value = $/;"	m	struct:crow::black_magic::compute_parameter_tag_from_args_list
subdivisions	src/network.h	/^    int subdivisions;$/;"	m	struct:network
succ_high	src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon12
succ_low	src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon12
suffix	src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon22
suicide_go	src/go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	src/utils.c	/^float sum_array(float *a, int n)$/;"	f
swap_binary	src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
sync_PyrLKOpticalFlow	src/yolo_v2_class.hpp	/^    cv::Ptr<cv::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow;$/;"	m	class:Tracker_optflow
sync_PyrLKOpticalFlow_gpu	src/yolo_v2_class.hpp	/^    cv::Ptr<cv::cuda::SparsePyrLKOpticalFlow> sync_PyrLKOpticalFlow_gpu;$/;"	m	class:Tracker_optflow
t	crow.h	/^            ActionType t;$/;"	m	struct:crow::mustache::Action
t	crow.h	/^            type t() const { return t_; }$/;"	f	class:crow::json::wvalue
t	crow.h	/^            type t() const$/;"	f	class:crow::json::rvalue
t	src/layer.h	/^	int t;$/;"	m	struct:__anon37
t	src/layer.h	/^    int t;$/;"	m	struct:layer
t_	crow.h	/^            type t_;$/;"	m	class:crow::json::rvalue
tag_name	crow.h	/^            std::string tag_name(const Action& action)$/;"	f	class:crow::mustache::template_t
tanh	src/layer.h	/^	int tanh;$/;"	m	struct:layer
tanh_activate	src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_gradient	src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
temperature	src/layer.h	/^    float temperature;$/;"	m	struct:layer
template_t	crow.h	/^            template_t(std::string body)$/;"	f	class:crow::mustache::template_t
template_t	crow.h	/^        class template_t $/;"	c	namespace:crow::mustache
test_box	src/box.c	/^void test_box()$/;"	f
test_captcha	src/captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	src/rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	src/cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	src/cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	src/cifar.c	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	src/cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	src/classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	src/coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	src/convolutional_layer.c	/^void test_convolutional_layer()$/;"	f
test_detector	src/detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh,$/;"	f
test_dice	src/dice.c	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	src/box.c	/^void test_dintersect()$/;"	f
test_dunion	src/box.c	/^void test_dunion()$/;"	f
test_go	src/go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	src/gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	src/image.c	/^void test_resize(char *filename)$/;"	f
test_super	src/super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	src/rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	src/tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	src/voxel.c	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	src/writing.c	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	src/yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
threads	src/data.h	/^    int threads;$/;"	m	struct:load_args
threat_classifier	src/classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	src/layer.h	/^    float thresh;$/;"	m	struct:layer
threshold_image	src/image.c	/^image threshold_image(image im, float thresh)$/;"	f
tick	crow.h	/^        self_t& tick(Duration d, Func f) {$/;"	f	class:crow::Crow
tick_function_	crow.h	/^        std::function<void()> tick_function_;$/;"	m	class:crow::Crow
tick_function_	crow.h	/^        std::function<void()> tick_function_;$/;"	m	class:crow::Server
tick_interval_	crow.h	/^        std::chrono::milliseconds tick_interval_;$/;"	m	class:crow::Crow
tick_interval_	crow.h	/^        std::chrono::milliseconds tick_interval_;$/;"	m	class:crow::Server
tick_timer_	crow.h	/^        boost::asio::deadline_timer tick_timer_;$/;"	m	class:crow::Server
tile_images	src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu_random_matrix	src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_ongpu	src/gemm.c	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	src/network.h	/^    int time_steps;$/;"	m	struct:network
time_steps	src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
time_vec	src/yolo_console_dll.cpp	/^    std::vector<float> dx_vec, dy_vec, time_vec;$/;"	m	class:extrapolate_coords_t	file:
timeout	src/http_stream.cpp	/^    int timeout; \/\/ master sock timeout, shutdown after timeout millis.$/;"	m	class:MJPGWriter	file:
timer_cancel_key_	crow.h	/^        detail::dumb_timer_queue::key timer_cancel_key_;$/;"	m	class:crow::Connection
timer_queue	crow.h	/^        detail::dumb_timer_queue& timer_queue;$/;"	m	class:crow::Connection
timer_queue_pool_	crow.h	/^        std::vector<detail::dumb_timer_queue*> timer_queue_pool_;$/;"	m	class:crow::Server
timersub	src/gettimeofday.c	/^int timersub(struct timeval *a, struct timeval *b, struct timeval *result)$/;"	f
timespec	3rdparty/include/pthread.h	/^struct timespec {$/;"	s
timestamp	crow.h	/^            static std::string timestamp()$/;"	f	class:crow::logger
timezone	src/gettimeofday.h	/^struct timezone $/;"	s
tisnan	src/region_layer.c	/^float tisnan(float x)$/;"	f
tmp	build/darknet/x64/darknet.py	/^            tmp = os.environ["FORCE_CPU"].lower()$/;"	v
tmp	darknet.py	/^            tmp = os.environ["FORCE_CPU"].lower()$/;"	v
to_request	crow.h	/^        request to_request() const$/;"	f	struct:crow::HTTPParser
todo	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon12
top	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon34
top_k	src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	src/network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
total	src/layer.h	/^	int total;$/;"	m	struct:layer
total_compares	src/compare.c	/^int total_compares = 0;$/;"	v
tq	src/stb_image.h	/^      int tq;$/;"	m	struct:__anon12::__anon13
track_id	build/darknet/YoloWrapper.cs	/^            public UInt32 track_id;      \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	f	struct:Darknet.YoloWrapper.bbox_t
track_id	src/yolo_v2_class.cpp	/^    unsigned int *track_id;$/;"	m	struct:detector_gpu_t	file:
track_id	src/yolo_v2_class.hpp	/^        unsigned int track_id, obj_id, last_showed_frames_ago;$/;"	m	struct:preview_boxes_t::preview_box_track_t
track_id	src/yolo_v2_class.hpp	/^    unsigned int track_id;        \/\/ tracking id for video (0 - untracked, 1 - inf - tracked object)$/;"	m	struct:bbox_t
track_kalman	src/yolo_console_dll.cpp	/^    track_kalman(int _state_size = 10, int _meas_size = 10, int _contr_size = 0)$/;"	f	class:track_kalman
track_kalman	src/yolo_console_dll.cpp	/^class track_kalman {$/;"	c	file:
tracking_flow	src/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_flow	src/yolo_v2_class.hpp	/^    std::vector<bbox_t> tracking_flow(cv::Mat new_dst_mat, bool check_error = true)$/;"	f	class:Tracker_optflow
tracking_id	src/yolo_v2_class.cpp	/^YOLODLL_API std::vector<bbox_t> Detector::tracking_id(std::vector<bbox_t> cur_bbox_vec, bool const change_history, $/;"	f	class:Detector
train	src/network.h	/^    int train;$/;"	m	struct:network_state
train_captcha	src/captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	src/rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	src/cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	src/cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	src/classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show)$/;"	f
train_coco	src/coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	src/compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	src/detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int dont_show)$/;"	f
train_dice	src/dice.c	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	src/go.c	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_network	src/network.c	/^float train_network(network net, data d)$/;"	f
train_network_batch	src/network.c	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	src/network.c	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_sgd	src/network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_super	src/super.c	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	src/swag.c	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	src/tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_vid_rnn	src/rnn_vid.c	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voxel	src/voxel.c	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	src/writing.c	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	src/yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
translate_array	src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	src/data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	src/image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon23
transpose_image	src/image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
tree	src/tree.h	/^} tree;$/;"	t	typeref:struct:__anon45
trie_	crow.h	/^        Trie trie_;$/;"	m	class:crow::Router
truth	src/network.h	/^    float *truth;$/;"	m	struct:network_state
truth_flag	src/detector.c	/^    int truth_flag;$/;"	m	struct:__anon39	file:
truth_gpu	src/network.h	/^    float **truth_gpu;$/;"	m	struct:network
truth_thresh	src/layer.h	/^	float truth_thresh;$/;"	m	struct:layer
truths	src/layer.h	/^    int truths;$/;"	m	struct:layer
try_classifier	src/classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
tv_nsec	3rdparty/include/pthread.h	/^        long tv_nsec;$/;"	m	struct:timespec
tv_sec	3rdparty/include/pthread.h	/^        time_t tv_sec;$/;"	m	struct:timespec
type	crow.h	/^        enum class type : char$/;"	c	namespace:crow::json
type	crow.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser
type	src/data.h	/^    data_type type;$/;"	m	struct:load_args
type	src/layer.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	src/parser.c	/^    char *type;$/;"	m	struct:__anon43	file:
type	src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon17
type	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon21
tz_dsttime	src/gettimeofday.h	/^  int  tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:timezone
tz_minuteswest	src/gettimeofday.h	/^  int  tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:timezone
u	crow.h	/^            uint64_t u() const$/;"	f	class:crow::json::rvalue
uint16_t	crow.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	crow.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	crow.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	crow.h	/^typedef unsigned __int8 uint8_t;$/;"	t
uint_params	crow.h	/^        std::vector<uint64_t> uint_params;$/;"	m	struct:crow::routing_params
unescape	crow.h	/^            void unescape() const$/;"	f	class:crow::json::rvalue
unique_truth_index	src/detector.c	/^    int unique_truth_index;$/;"	m	struct:__anon39	file:
unlink	src/unistd.h	29;"	d
update	src/layer.h	/^    void (*update)    (struct layer, int, float, float, float);$/;"	m	struct:layer
update_args	src/layer.h	/^} update_args;$/;"	t	typeref:struct:__anon37
update_connected_layer	src/connected_layer.c	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	src/connected_layer.c	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_convolutional_layer	src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer	src/crnn_layer.c	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_cur_bbox_vec	src/yolo_v2_class.hpp	/^    void update_cur_bbox_vec(std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_deconvolutional_layer	src/deconvolutional_layer.c	/^void update_deconvolutional_layer(deconvolutional_layer l, float learning_rate, float momentum, float decay)$/;"	f
update_gpu	src/layer.h	/^    void (*update_gpu)    (struct layer, int, float, float, float);$/;"	m	struct:layer
update_gru_layer	src/gru_layer.c	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	src/gru_layer.c	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer	src/local_layer.c	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	src/local_layer.c	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_network	src/network.c	/^void update_network(network net)$/;"	f
update_result	src/yolo_console_dll.cpp	/^    void update_result(std::vector<bbox_t> new_result_vec, float new_time, bool update = true) {$/;"	f	class:extrapolate_coords_t
update_rnn_layer	src/rnn_layer.c	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_tracking_flow	src/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat new_src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
update_tracking_flow	src/yolo_v2_class.hpp	/^    void update_tracking_flow(cv::Mat src_mat, std::vector<bbox_t> _cur_bbox_vec)$/;"	f	class:Tracker_optflow
upgrade	crow.h	/^        std::unique_ptr<BaseRule> upgrade()$/;"	f	class:crow::BaseRule
upgrade	crow.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser
upsample_cpu	src/blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
url	crow.h	/^        std::string url;$/;"	m	struct:crow::HTTPParser
url	crow.h	/^        std::string url;$/;"	m	struct:crow::request
url_	crow.h	/^        std::string url_;$/;"	m	class:crow::query_string
url_params	crow.h	/^        query_string url_params;$/;"	m	struct:crow::HTTPParser
url_params	crow.h	/^        query_string url_params;$/;"	m	struct:crow::request
used	src/option_list.h	/^    int used;$/;"	m	struct:__anon27
userdata	crow.h	/^            void userdata(void* u) { userdata_ = u; }$/;"	f	struct:crow::websocket::connection
userdata	crow.h	/^            void* userdata() { return userdata_; }$/;"	f	struct:crow::websocket::connection
userdata_	crow.h	/^            void* userdata_;$/;"	m	struct:crow::websocket::connection
utility	crow.h	/^    namespace utility$/;"	n	namespace:crow
v	src/layer.h	/^    float *v;$/;"	m	struct:layer
v	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon12::__anon13
v_gpu	src/layer.h	/^    float *v_gpu;$/;"	m	struct:layer
val	src/getopt.h	/^  int val;$/;"	m	struct:option
val	src/list.h	/^    void *val;$/;"	m	struct:node
val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon27
valid_captcha	src/captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	src/rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	src/go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	src/rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate	crow.h	/^        void validate()$/;"	f	class:crow::Crow
validate	crow.h	/^        void validate()$/;"	f	class:crow::Router
validate	crow.h	/^        void validate()$/;"	f	class:crow::Trie
validate_classifier_10	src/classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	src/classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	src/classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	src/classifier.c	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	src/classifier.c	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_coco	src/coco.c	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	src/coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	src/compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	src/detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_map	src/detector.c	/^void validate_detector_map(char *datacfg, char *cfgfile, char *weightfile, float thresh_calc_avg_iou)$/;"	f
validate_detector_recall	src/detector.c	/^void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)$/;"	f
validate_dice	src/dice.c	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_uint32	src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	src/yolo.c	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	src/yolo.c	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
vals	scripts/kmeansiou.c	/^    double **vals;$/;"	m	struct:matrix	file:
vals	src/matrix.h	/^    float **vals;$/;"	m	struct:matrix
value	crow.h	/^            static const bool value = decltype(f<T>(nullptr))::value;$/;"	m	struct:crow::detail::is_after_handle_arity_3_impl
value	crow.h	/^            static const bool value = decltype(f<T>(nullptr))::value;$/;"	m	struct:crow::detail::is_before_handle_arity_3_impl
value	crow.h	/^            static const int value = $/;"	m	struct:crow::black_magic::compute_parameter_tag_from_args_list
value	crow.h	/^            static const int value = 0;$/;"	m	struct:crow::black_magic::compute_parameter_tag_from_args_list
value	crow.h	/^            static const int value = 0;$/;"	m	struct:crow::black_magic::parameter_tag
value	crow.h	/^            static constexpr auto value = N;$/;"	m	struct:crow::detail::get_index_of_element_from_tuple_by_type_impl
value	crow.h	/^            static constexpr auto value = get_index_of_element_from_tuple_by_type_impl<T, N + 1, Args...>::value;$/;"	m	struct:crow::detail::get_index_of_element_from_tuple_by_type_impl
value	crow.h	/^            static constexpr bool value = sizeof(__test<F, Args...>(0)) == sizeof(char);$/;"	m	struct:crow::black_magic::CallHelper
value	src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon15
values	src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon11
variance	src/layer.h	/^    float * variance;$/;"	m	struct:layer
variance_array	src/utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	src/layer.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta_cpu	src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	src/layer.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_gpu	src/layer.h	/^    float * variance_gpu;$/;"	m	struct:layer
vec_char_rnn	src/rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
visualize	src/darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	src/network.c	/^void visualize_network(network net)$/;"	f
voc_ap	build/darknet/x64/voc_eval_py3.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_ap	scripts/voc_eval.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_ap	scripts/voc_eval_py3.py	/^def voc_ap(rec, prec, use_07_metric=False):$/;"	f
voc_eval	build/darknet/x64/voc_eval_py3.py	/^def voc_eval(detpath,$/;"	f
voc_eval	scripts/voc_eval.py	/^def voc_eval(detpath,$/;"	f
voc_eval	scripts/voc_eval_py3.py	/^def voc_eval(detpath,$/;"	f
voc_names	src/yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
vs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon14
w	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
w	src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
w	src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon34
w	src/data.h	/^    int w, h;$/;"	m	struct:__anon32
w	src/data.h	/^    int w;$/;"	m	struct:load_args
w	src/detector.c	/^    float w, h;$/;"	m	struct:__anon40	file:
w	src/http_stream.cpp	/^    WSADATA w;$/;"	m	struct:_INIT_W32DATA	file:
w	src/image.h	/^	int w;$/;"	m	struct:__anon44
w	src/layer.h	/^    int h,w,c;$/;"	m	struct:layer
w	src/network.h	/^    int h, w, c;$/;"	m	struct:network
w	src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
w	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon23
w	src/yolo_v2_class.hpp	/^    int w;                        \/\/ width$/;"	m	struct:image_t
w	src/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
w2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon12::__anon13
w_lores	src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon14
wait_for_stream	src/image.c	/^int wait_for_stream(CvCapture *cap, IplImage* src, int dont_close) {$/;"	f
wait_stream	src/network.h	/^	int wait_stream;$/;"	m	struct:network
wait_stream	src/yolo_v2_class.hpp	/^    bool wait_stream;$/;"	m	class:Detector
wd	build/darknet/x64/data/voc/voc_label.py	/^wd = getcwd()$/;"	v
wd	scripts/voc_label.py	/^wd = getcwd()$/;"	v
wd	scripts/voc_label_difficult.py	/^wd = getcwd()$/;"	v
websocket	crow.h	/^		WebSocketRule& websocket() $/;"	f	struct:crow::RuleParameterTraits
websocket	crow.h	/^    namespace websocket$/;"	n	namespace:crow
weightDesc	src/layer.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer
weight_updates	src/layer.h	/^    float *weight_updates;$/;"	m	struct:layer
weight_updates_gpu	src/layer.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weight_updates_gpu16	src/layer.h	/^	float * weight_updates_gpu16;$/;"	m	struct:layer
weighted_delta_cpu	src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	src/layer.h	/^    float *weights;$/;"	m	struct:layer
weights_gpu	src/layer.h	/^    float * weights_gpu;$/;"	m	struct:layer
weights_gpu16	src/layer.h	/^	float * weights_gpu16;$/;"	m	struct:layer
what	crow.h	/^            virtual const char* what() const throw()$/;"	f	class:crow::mustache::invalid_template_exception
what_time_is_it_now	src/utils.c	/^double what_time_is_it_now()$/;"	f
width_in_cfg_file	build/darknet/x64/gen_anchors.py	/^width_in_cfg_file = 416.$/;"	v
width_in_cfg_file	scripts/gen_anchors.py	/^width_in_cfg_file = 416.$/;"	v
winGPUdll	build/darknet/x64/darknet.py	/^    winGPUdll = os.path.join(cwd, "yolo_cpp_dll.dll")$/;"	v
winGPUdll	darknet.py	/^    winGPUdll = os.path.join(cwd, "yolo_cpp_dll.dll")$/;"	v
winNoGPUdll	build/darknet/x64/darknet.py	/^    winNoGPUdll = os.path.join(cwd, "yolo_cpp_dll_nogpu.dll")$/;"	v
winNoGPUdll	darknet.py	/^    winNoGPUdll = os.path.join(cwd, "yolo_cpp_dll_nogpu.dll")$/;"	v
windows	src/image.c	/^int windows = 0;$/;"	v
workspace	src/network.h	/^    float *workspace;$/;"	m	struct:network
workspace	src/network.h	/^    float *workspace;$/;"	m	struct:network_state
workspace_size	src/layer.h	/^    size_t workspace_size;$/;"	m	struct:layer
wrap	crow.h	/^        wrap(Func f, black_magic::seq<Indices...>)$/;"	f	class:crow::DynamicRule
write	crow.h	/^        void write(const std::string& body_part)$/;"	f	struct:crow::response
write	src/http_stream.cpp	/^    bool write(const Mat & frame)$/;"	f	class:MJPGWriter
write_all	src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_anchors_to_file	build/darknet/x64/gen_anchors.py	/^def write_anchors_to_file(centroids,X,anchor_file):$/;"	f
write_anchors_to_file	scripts/gen_anchors.py	/^def write_anchors_to_file(centroids,X,anchor_file):$/;"	f
write_buffers_	crow.h	/^                std::vector<std::string> write_buffers_;$/;"	m	class:crow::websocket::Connection
write_int	src/utils.c	/^void write_int(int fd, int n)$/;"	f
wvalue	crow.h	/^            wvalue() {}$/;"	f	class:crow::json::wvalue
wvalue	crow.h	/^            wvalue(const rvalue& r)$/;"	f	class:crow::json::wvalue
wvalue	crow.h	/^            wvalue(wvalue&& r)$/;"	f	class:crow::json::wvalue
wvalue	crow.h	/^        class wvalue$/;"	c	namespace:crow::json
x	3rdparty/include/pthread.h	/^    unsigned int x;             \/* Extra information - reuse count etc *\/$/;"	m	struct:__anon48
x	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
x	src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
x	src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon34
x	src/layer.h	/^    float * x;$/;"	m	struct:layer
x	src/rnn.c	/^    float *x;$/;"	m	struct:__anon4	file:
x	src/rnn_vid.c	/^    float *x;$/;"	m	struct:__anon2	file:
x	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon12::__anon13
x	src/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
x_gpu	src/layer.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	src/layer.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm_gpu	src/layer.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
xnor	src/layer.h	/^    int xnor;$/;"	m	struct:layer
y	build/darknet/YoloWrapper.cs	/^            public UInt32 x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	f	struct:Darknet.YoloWrapper.bbox_t
y	src/box.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
y	src/data.h	/^    float x,y,w,h;$/;"	m	struct:__anon34
y	src/data.h	/^    matrix y;$/;"	m	struct:__anon32
y	src/rnn.c	/^    float *y;$/;"	m	struct:__anon4	file:
y	src/rnn_vid.c	/^    float *y;$/;"	m	struct:__anon2	file:
y	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon12::__anon13
y	src/yolo_v2_class.hpp	/^    unsigned int x, y, w, h;    \/\/ (x,y) - top-left corner, (w, h) - width & height of bounded box$/;"	m	struct:bbox_t
yolo_num_detections	src/yolo_layer.c	/^int yolo_num_detections(layer l, float thresh)$/;"	f
ypos	src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon14
ystep	src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon14
z_cpu	src/layer.h	/^    float *z_cpu;$/;"	m	struct:layer
z_distance	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon16
z_expandable	src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon16
z_gpu	src/layer.h	/^    float *z_gpu;$/;"	m	struct:layer
z_length	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon16
zbuffer	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon16
zbuffer_end	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon16
zero_matrix	scripts/kmeansiou.c	/^void zero_matrix(matrix m)$/;"	f
zout	src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon16
zout_end	src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon16
zout_start	src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon16
~BaseRule	crow.h	/^        virtual ~BaseRule()$/;"	f	class:crow::BaseRule
~Connection	crow.h	/^        ~Connection()$/;"	f	class:crow::Connection
~Detector	src/yolo_v2_class.cpp	/^YOLODLL_API Detector::~Detector() $/;"	f	class:Detector
~MJPGWriter	src/http_stream.cpp	/^    ~MJPGWriter()$/;"	f	class:MJPGWriter
~PThreadCleanup	3rdparty/include/pthread.h	/^          ~PThreadCleanup()$/;"	f	class:PThreadCleanup
~SHA1	crow.h	/^		virtual ~SHA1() {}$/;"	f	class:sha1::SHA1
~connection	crow.h	/^            virtual ~connection(){}$/;"	f	struct:crow::websocket::connection
~logger	crow.h	/^            ~logger() {$/;"	f	class:crow::logger
~r_string	crow.h	/^                ~r_string()$/;"	f	struct:crow::json::detail::r_string
